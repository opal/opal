{
	"domains": [
		{
			"domain": "Browser",
			"description": "The Browser domain defines methods and events for browser managing.",
			"commands": [
				{
					"name": "close",
					"description": "Close browser gracefully."
				},
				{
					"name": "getVersion",
					"description": "Returns version information.",
					"returns": [
						{
							"name": "protocolVersion",
							"description": "Protocol version.",
							"type": "string"
						},
						{
							"name": "product",
							"description": "Product name.",
							"type": "string"
						},
						{
							"name": "revision",
							"description": "Product revision.",
							"type": "string"
						},
						{
							"name": "userAgent",
							"description": "User-Agent.",
							"type": "string"
						},
						{
							"name": "jsVersion",
							"description": "V8 version.",
							"type": "string"
						}
					]
				}
			]
		},
		{
			"domain": "IO",
			"description": "Input/Output operations for streams produced by DevTools.",
			"types": [
				{
					"id": "StreamHandle",
					"description": "This is either obtained from another method or specifed as `blob:&lt;uuid&gt;` where\n`&lt;uuid&gt` is an UUID of a Blob.",
					"type": "string"
				}
			],
			"commands": [
				{
					"name": "close",
					"description": "Close the stream, discard any temporary backing storage.",
					"parameters": [
						{
							"name": "handle",
							"description": "Handle of the stream to close.",
							"$ref": "StreamHandle"
						}
					]
				},
				{
					"name": "read",
					"description": "Read a chunk of the stream",
					"parameters": [
						{
							"name": "handle",
							"description": "Handle of the stream to read.",
							"$ref": "StreamHandle"
						},
						{
							"name": "offset",
							"description": "Seek to the specified offset before reading (if not specificed, proceed with offset\nfollowing the last read). Some types of streams may only support sequential reads.",
							"optional": true,
							"type": "integer"
						},
						{
							"name": "size",
							"description": "Maximum number of bytes to read (left upon the agent discretion if not specified).",
							"optional": true,
							"type": "integer"
						}
					],
					"returns": [
						{
							"name": "base64Encoded",
							"description": "Set if the data is base64-encoded",
							"optional": true,
							"type": "boolean"
						},
						{
							"name": "data",
							"description": "Data that were read.",
							"type": "string"
						},
						{
							"name": "eof",
							"description": "Set if the end-of-file condition occured while reading.",
							"type": "boolean"
						}
					]
				},
				{
					"name": "resolveBlob",
					"description": "Return UUID of Blob object specified by a remote object id.",
					"parameters": [
						{
							"name": "objectId",
							"description": "Object id of a Blob object wrapper.",
							"$ref": "Runtime.RemoteObjectId"
						}
					],
					"returns": [
						{
							"name": "uuid",
							"description": "UUID of the specified Blob.",
							"type": "string"
						}
					]
				}
			]
		},
		{
			"domain": "Log",
			"description": "Provides access to log entries.",
			"dependencies": [
				"Runtime",
				"Network"
			],
			"types": [
				{
					"id": "LogEntry",
					"description": "Log entry.",
					"type": "object",
					"properties": [
						{
							"name": "source",
							"description": "Log entry source.",
							"type": "string",
							"enum": [
								"xml",
								"javascript",
								"network",
								"storage",
								"appcache",
								"rendering",
								"security",
								"deprecation",
								"worker",
								"violation",
								"intervention",
								"recommendation",
								"other"
							]
						},
						{
							"name": "level",
							"description": "Log entry severity.",
							"type": "string",
							"enum": [
								"verbose",
								"info",
								"warning",
								"error"
							]
						},
						{
							"name": "text",
							"description": "Logged text.",
							"type": "string"
						},
						{
							"name": "timestamp",
							"description": "Timestamp when this entry was added.",
							"$ref": "Runtime.Timestamp"
						},
						{
							"name": "url",
							"description": "URL of the resource if known.",
							"optional": true,
							"type": "string"
						},
						{
							"name": "lineNumber",
							"description": "Line number in the resource.",
							"optional": true,
							"type": "integer"
						},
						{
							"name": "stackTrace",
							"description": "JavaScript stack trace.",
							"optional": true,
							"$ref": "Runtime.StackTrace"
						},
						{
							"name": "networkRequestId",
							"description": "Identifier of the network request associated with this entry.",
							"optional": true,
							"$ref": "Network.RequestId"
						},
						{
							"name": "workerId",
							"description": "Identifier of the worker associated with this entry.",
							"optional": true,
							"type": "string"
						},
						{
							"name": "args",
							"description": "Call arguments.",
							"optional": true,
							"type": "array",
							"items": {
								"$ref": "Runtime.RemoteObject"
							}
						}
					]
				},
				{
					"id": "ViolationSetting",
					"description": "Violation configuration setting.",
					"type": "object",
					"properties": [
						{
							"name": "name",
							"description": "Violation type.",
							"type": "string",
							"enum": [
								"longTask",
								"longLayout",
								"blockedEvent",
								"blockedParser",
								"discouragedAPIUse",
								"handler",
								"recurringHandler"
							]
						},
						{
							"name": "threshold",
							"description": "Time threshold to trigger upon.",
							"type": "number"
						}
					]
				}
			],
			"commands": [
				{
					"name": "clear",
					"description": "Clears the log."
				},
				{
					"name": "disable",
					"description": "Disables log domain, prevents further log entries from being reported to the client."
				},
				{
					"name": "enable",
					"description": "Enables log domain, sends the entries collected so far to the client by means of the\n`entryAdded` notification."
				},
				{
					"name": "startViolationsReport",
					"description": "start violation reporting.",
					"parameters": [
						{
							"name": "config",
							"description": "Configuration for violations.",
							"type": "array",
							"items": {
								"$ref": "ViolationSetting"
							}
						}
					]
				},
				{
					"name": "stopViolationsReport",
					"description": "Stop violation reporting."
				}
			],
			"events": [
				{
					"name": "entryAdded",
					"description": "Issued when new message was logged.",
					"parameters": [
						{
							"name": "entry",
							"description": "The entry.",
							"$ref": "LogEntry"
						}
					]
				}
			]
		},
		{
			"domain": "Page",
			"description": "Actions and events related to the inspected page belong to the page domain.",
			"dependencies": [
				"Debugger",
				"DOM",
				"IO",
				"Network",
				"Runtime"
			],
			"types": [
				{
					"id": "FrameId",
					"description": "Unique frame identifier.",
					"type": "string"
				},
				{
					"id": "Frame",
					"description": "Information about the Frame on the page.",
					"type": "object",
					"properties": [
						{
							"name": "id",
							"description": "Frame unique identifier.",
							"$ref": "FrameId",
							"type": "string"
						},
						{
							"name": "parentId",
							"description": "Parent frame identifier.",
							"optional": true,
                            "$ref": "FrameId",
							"type": "string"
						},
						{
							"name": "loaderId",
							"description": "Identifier of the loader associated with this frame.",
							"$ref": "Network.LoaderId"
						},
						{
							"name": "name",
							"description": "Frame's name as specified in the tag.",
							"optional": true,
							"type": "string"
						},
						{
							"name": "url",
							"description": "Frame document's URL.",
							"type": "string"
						},
						{
							"name": "securityOrigin",
							"description": "Frame document's security origin.",
							"type": "string"
						},
						{
							"name": "mimeType",
							"description": "Frame document's mimeType as determined by the browser.",
							"type": "string"
						}
					]
				},
				{
					"id": "FrameTree",
					"description": "Information about the Frame hierarchy.",
					"type": "object",
					"properties": [
						{
							"name": "frame",
							"description": "Frame information for this tree item.",
							"$ref": "Frame"
						},
						{
							"name": "childFrames",
							"description": "Child frames.",
							"optional": true,
							"type": "array",
							"items": {
								"$ref": "FrameTree"
							}
						}
					]
				},
				{
					"id": "ScriptIdentifier",
					"description": "Unique script identifier.",
					"type": "string"
				},
				{
					"id": "TransitionType",
					"description": "Transition type.",
					"type": "string",
					"enum": [
						"link",
						"typed",
						"address_bar",
						"auto_bookmark",
						"auto_subframe",
						"manual_subframe",
						"generated",
						"auto_toplevel",
						"form_submit",
						"reload",
						"keyword",
						"keyword_generated",
						"other"
					]
				},
				{
					"id": "NavigationEntry",
					"description": "Navigation history entry.",
					"type": "object",
					"properties": [
						{
							"name": "id",
							"description": "Unique id of the navigation history entry.",
							"type": "integer"
						},
						{
							"name": "url",
							"description": "URL of the navigation history entry.",
							"type": "string"
						},
						{
							"name": "userTypedURL",
							"description": "URL that the user typed in the url bar.",
							"type": "string"
						},
						{
							"name": "title",
							"description": "Title of the navigation history entry.",
							"type": "string"
						},
						{
							"name": "transitionType",
							"description": "Transition type.",
							"$ref": "TransitionType"
						}
					]
				},
				{
					"id": "DialogType",
					"description": "Javascript dialog type.",
					"type": "string",
					"enum": [
						"alert",
						"confirm",
						"prompt",
						"beforeunload"
					]
				},
				{
					"id": "AppManifestError",
					"description": "Error while paring app manifest.",
					"type": "object",
					"properties": [
						{
							"name": "message",
							"description": "Error message.",
							"type": "string"
						},
						{
							"name": "critical",
							"description": "If criticial, this is a non-recoverable parse error.",
							"type": "integer"
						},
						{
							"name": "line",
							"description": "Error line.",
							"type": "integer"
						},
						{
							"name": "column",
							"description": "Error column.",
							"type": "integer"
						}
					]
				},
				{
					"id": "LayoutViewport",
					"description": "Layout viewport position and dimensions.",
					"type": "object",
					"properties": [
						{
							"name": "pageX",
							"description": "Horizontal offset relative to the document (CSS pixels).",
							"type": "integer"
						},
						{
							"name": "pageY",
							"description": "Vertical offset relative to the document (CSS pixels).",
							"type": "integer"
						},
						{
							"name": "clientWidth",
							"description": "Width (CSS pixels), excludes scrollbar if present.",
							"type": "integer"
						},
						{
							"name": "clientHeight",
							"description": "Height (CSS pixels), excludes scrollbar if present.",
							"type": "integer"
						}
					]
				},
				{
					"id": "VisualViewport",
					"description": "Visual viewport position, dimensions, and scale.",
					"type": "object",
					"properties": [
						{
							"name": "offsetX",
							"description": "Horizontal offset relative to the layout viewport (CSS pixels).",
							"type": "number"
						},
						{
							"name": "offsetY",
							"description": "Vertical offset relative to the layout viewport (CSS pixels).",
							"type": "number"
						},
						{
							"name": "pageX",
							"description": "Horizontal offset relative to the document (CSS pixels).",
							"type": "number"
						},
						{
							"name": "pageY",
							"description": "Vertical offset relative to the document (CSS pixels).",
							"type": "number"
						},
						{
							"name": "clientWidth",
							"description": "Width (CSS pixels), excludes scrollbar if present.",
							"type": "number"
						},
						{
							"name": "clientHeight",
							"description": "Height (CSS pixels), excludes scrollbar if present.",
							"type": "number"
						},
						{
							"name": "scale",
							"description": "Scale relative to the ideal viewport (size at width=device-width).",
							"type": "number"
						}
					]
				},
				{
					"id": "Viewport",
					"description": "Viewport for capturing screenshot.",
					"type": "object",
					"properties": [
						{
							"name": "x",
							"description": "X offset in CSS pixels.",
							"type": "number"
						},
						{
							"name": "y",
							"description": "Y offset in CSS pixels",
							"type": "number"
						},
						{
							"name": "width",
							"description": "Rectangle width in CSS pixels",
							"type": "number"
						},
						{
							"name": "height",
							"description": "Rectangle height in CSS pixels",
							"type": "number"
						},
						{
							"name": "scale",
							"description": "Page scale factor.",
							"type": "number"
						}
					]
				}
			],
			"commands": [
				{
					"name": "addScriptToEvaluateOnNewDocument",
					"description": "Evaluates given script in every frame upon creation (before loading frame's scripts).",
					"parameters": [
						{
							"name": "source",
							"type": "string"
						}
					],
					"returns": [
						{
							"name": "identifier",
							"description": "Identifier of the added script.",
							"$ref": "ScriptIdentifier"
						}
					]
				},
				{
					"name": "bringToFront",
					"description": "Brings page to front (activates tab)."
				},
				{
					"name": "captureScreenshot",
					"description": "Capture page screenshot.",
					"parameters": [
						{
							"name": "format",
							"description": "Image compression format (defaults to png).",
							"optional": true,
							"type": "string",
							"enum": [
								"jpeg",
								"png"
							]
						},
						{
							"name": "quality",
							"description": "Compression quality from range [0..100] (jpeg only).",
							"optional": true,
							"type": "integer"
						},
						{
							"name": "clip",
							"description": "Capture the screenshot of a given region only.",
							"optional": true,
							"$ref": "Viewport"
						}
					],
					"returns": [
						{
							"name": "data",
							"description": "Base64-encoded image data.",
							"type": "binary"
						}
					]
				},
				{
					"name": "createIsolatedWorld",
					"description": "Creates an isolated world for the given frame.",
					"parameters": [
						{
							"name": "frameId",
							"description": "Id of the frame in which the isolated world should be created.",
							"$ref": "FrameId"
						},
						{
							"name": "worldName",
							"description": "An optional name which is reported in the Execution Context.",
							"optional": true,
							"type": "string"
						},
						{
							"name": "grantUniveralAccess",
							"description": "Whether or not universal access should be granted to the isolated world. This is a powerful\noption, use with caution.",
							"optional": true,
							"type": "boolean"
						}
					],
					"returns": [
						{
							"name": "executionContextId",
							"description": "Execution context of the isolated world.",
							"$ref": "Runtime.ExecutionContextId"
						}
					]
				},
				{
					"name": "disable",
					"description": "Disables page domain notifications."
				},
				{
					"name": "enable",
					"description": "Enables page domain notifications."
				},
				{
					"name": "getAppManifest",
					"returns": [
						{
							"name": "url",
							"description": "Manifest location.",
							"type": "string"
						},
						{
							"name": "errors",
							"type": "array",
							"items": {
								"$ref": "AppManifestError"
							}
						},
						{
							"name": "data",
							"description": "Manifest content.",
							"optional": true,
							"type": "string"
						}
					]
				},
				{
					"name": "getFrameTree",
					"description": "Returns present frame tree structure.",
					"returns": [
						{
							"name": "frameTree",
							"description": "Present frame tree structure.",
							"$ref": "FrameTree"
						}
					]
				},
				{
					"name": "getNavigationHistory",
					"description": "Returns navigation history for the current page.",
					"returns": [
						{
							"name": "currentIndex",
							"description": "Index of the current navigation history entry.",
							"type": "integer"
						},
						{
							"name": "entries",
							"description": "Array of navigation history entries.",
							"type": "array",
							"items": {
								"$ref": "NavigationEntry"
							}
						}
					]
				},
				{
					"name": "handleJavaScriptDialog",
					"description": "Accepts or dismisses a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload).",
					"parameters": [
						{
							"name": "accept",
							"description": "Whether to accept or dismiss the dialog.",
							"type": "boolean"
						},
						{
							"name": "promptText",
							"description": "The text to enter into the dialog prompt before accepting. Used only if this is a prompt\ndialog.",
							"optional": true,
							"type": "string"
						}
					]
				},
				{
					"name": "navigate",
					"description": "Navigates current page to the given URL.",
					"parameters": [
						{
							"name": "url",
							"description": "URL to navigate the page to.",
							"type": "string"
						},
						{
							"name": "referrer",
							"description": "Referrer URL.",
							"optional": true,
							"type": "string"
						},
						{
							"name": "transitionType",
							"description": "Intended transition type.",
							"optional": true,
							"$ref": "TransitionType"
						},
						{
							"name": "frameId",
							"description": "Frame id to navigate, if not specified navigates the top frame.",
							"optional": true,
							"$ref": "FrameId"
						}
					],
					"returns": [
						{
							"name": "frameId",
							"description": "Frame id that has navigated (or failed to navigate)",
							"$ref": "FrameId"
						},
						{
							"name": "loaderId",
							"description": "Loader identifier.",
							"optional": true,
							"$ref": "Network.LoaderId"
						},
						{
							"name": "errorText",
							"description": "User friendly error message, present if and only if navigation has failed.",
							"optional": true,
							"type": "string"
						}
					]
				},
				{
					"name": "navigateToHistoryEntry",
					"description": "Navigates current page to the given history entry.",
					"parameters": [
						{
							"name": "entryId",
							"description": "Unique id of the entry to navigate to.",
							"type": "integer"
						}
					]
				},
				{
					"name": "printToPDF",
					"description": "Print page as PDF.",
					"parameters": [
						{
							"name": "landscape",
							"description": "Paper orientation. Defaults to false.",
							"optional": true,
							"type": "boolean"
						},
						{
							"name": "displayHeaderFooter",
							"description": "Display header and footer. Defaults to false.",
							"optional": true,
							"type": "boolean"
						},
						{
							"name": "printBackground",
							"description": "Print background graphics. Defaults to false.",
							"optional": true,
							"type": "boolean"
						},
						{
							"name": "scale",
							"description": "Scale of the webpage rendering. Defaults to 1.",
							"optional": true,
							"type": "number"
						},
						{
							"name": "paperWidth",
							"description": "Paper width in inches. Defaults to 8.5 inches.",
							"optional": true,
							"type": "number"
						},
						{
							"name": "paperHeight",
							"description": "Paper height in inches. Defaults to 11 inches.",
							"optional": true,
							"type": "number"
						},
						{
							"name": "marginTop",
							"description": "Top margin in inches. Defaults to 1cm (~0.4 inches).",
							"optional": true,
							"type": "number"
						},
						{
							"name": "marginBottom",
							"description": "Bottom margin in inches. Defaults to 1cm (~0.4 inches).",
							"optional": true,
							"type": "number"
						},
						{
							"name": "marginLeft",
							"description": "Left margin in inches. Defaults to 1cm (~0.4 inches).",
							"optional": true,
							"type": "number"
						},
						{
							"name": "marginRight",
							"description": "Right margin in inches. Defaults to 1cm (~0.4 inches).",
							"optional": true,
							"type": "number"
						},
						{
							"name": "pageRanges",
							"description": "Paper ranges to print, e.g., '1-5, 8, 11-13'. Defaults to the empty string, which means\nprint all pages.",
							"optional": true,
							"type": "string"
						},
						{
							"name": "headerTemplate",
							"description": "HTML template for the print header. Should be valid HTML markup with following\nclasses used to inject printing values into them:\n- `date`: formatted print date\n- `title`: document title\n- `url`: document location\n- `pageNumber`: current page number\n- `totalPages`: total pages in the document\n\nFor example, `<span class=title></span>` would generate span containing the title.",
							"optional": true,
							"type": "string"
						},
						{
							"name": "footerTemplate",
							"description": "HTML template for the print footer. Should use the same format as the `headerTemplate`.",
							"optional": true,
							"type": "string"
						},
						{
							"name": "preferCSSPageSize",
							"description": "Whether or not to prefer page size as defined by css. Defaults to false,\nin which case the content will be scaled to fit the paper size.",
							"optional": true,
							"type": "boolean"
						}
					],
					"returns": [
						{
							"name": "data",
							"description": "Base64-encoded pdf data.",
							"type": "binary"
						}
					]
				},
				{
					"name": "reload",
					"description": "Reloads given page optionally ignoring the cache.",
					"parameters": [
						{
							"name": "ignoreCache",
							"description": "If true, browser cache is ignored (as if the user pressed Shift+refresh).",
							"optional": true,
							"type": "boolean"
						},
						{
							"name": "scriptToEvaluateOnLoad",
							"description": "If set, the script will be injected into all frames of the inspected page after reload.\nArgument will be ignored if reloading dataURL origin.",
							"optional": true,
							"type": "string"
						}
					]
				},
				{
					"name": "removeScriptToEvaluateOnNewDocument",
					"description": "Removes given script from the list.",
					"parameters": [
						{
							"name": "identifier",
							"$ref": "ScriptIdentifier"
						}
					]
				},
				{
					"name": "setDocumentContent",
					"description": "Sets given markup as the document's HTML.",
					"parameters": [
						{
							"name": "frameId",
							"description": "Frame id to set HTML for.",
							"$ref": "FrameId"
						},
						{
							"name": "html",
							"description": "HTML content to set.",
							"type": "string"
						}
					]
				},
				{
					"name": "stopLoading",
					"description": "Force the page stop all navigations and pending resource fetches."
				}
			],
			"events": [
				{
					"name": "domContentEventFired",
					"parameters": [
						{
							"name": "timestamp",
							"$ref": "Network.MonotonicTime"
						}
					]
				},
				{
					"name": "frameAttached",
					"description": "Fired when frame has been attached to its parent.",
					"parameters": [
						{
							"name": "frameId",
							"description": "Id of the frame that has been attached.",
							"$ref": "FrameId"
						},
						{
							"name": "parentFrameId",
							"description": "Parent frame identifier.",
							"$ref": "FrameId"
						},
						{
							"name": "stack",
							"description": "JavaScript stack trace of when frame was attached, only set if frame initiated from script.",
							"optional": true,
							"$ref": "Runtime.StackTrace"
						}
					]
				},
				{
					"name": "frameDetached",
					"description": "Fired when frame has been detached from its parent.",
					"parameters": [
						{
							"name": "frameId",
							"description": "Id of the frame that has been detached.",
							"$ref": "FrameId"
						}
					]
				},
				{
					"name": "frameNavigated",
					"description": "Fired once navigation of the frame has completed. Frame is now associated with the new loader.",
					"parameters": [
						{
							"name": "frame",
							"description": "Frame object.",
							"$ref": "Frame"
						}
					]
				},
				{
					"name": "interstitialHidden",
					"description": "Fired when interstitial page was hidden"
				},
				{
					"name": "interstitialShown",
					"description": "Fired when interstitial page was shown"
				},
				{
					"name": "javascriptDialogClosed",
					"description": "Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) has been\nclosed.",
					"parameters": [
						{
							"name": "result",
							"description": "Whether dialog was confirmed.",
							"type": "boolean"
						},
						{
							"name": "userInput",
							"description": "User input in case of prompt.",
							"type": "string"
						}
					]
				},
				{
					"name": "javascriptDialogOpening",
					"description": "Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) is about to\nopen.",
					"parameters": [
						{
							"name": "url",
							"description": "Frame url.",
							"type": "string"
						},
						{
							"name": "message",
							"description": "Message that will be displayed by the dialog.",
							"type": "string"
						},
						{
							"name": "type",
							"description": "Dialog type.",
							"$ref": "DialogType"
						},
						{
							"name": "hasBrowserHandler",
							"description": "True iff browser is capable showing or acting on the given dialog. When browser has no\ndialog handler for given target, calling alert while Page domain is engaged will stall\nthe page execution. Execution can be resumed via calling Page.handleJavaScriptDialog.",
							"type": "boolean"
						},
						{
							"name": "defaultPrompt",
							"description": "Default dialog prompt.",
							"optional": true,
							"type": "string"
						}
					]
				},
				{
					"name": "lifecycleEvent",
					"description": "Fired for top level page lifecycle events such as navigation, load, paint, etc.",
					"parameters": [
						{
							"name": "frameId",
							"description": "Id of the frame.",
							"$ref": "FrameId"
						},
						{
							"name": "loaderId",
							"description": "Loader identifier. Empty string if the request is fetched from worker.",
							"$ref": "Network.LoaderId"
						},
						{
							"name": "name",
							"type": "string"
						},
						{
							"name": "timestamp",
							"$ref": "Network.MonotonicTime"
						}
					]
				},
				{
					"name": "loadEventFired",
					"parameters": [
						{
							"name": "timestamp",
							"$ref": "Network.MonotonicTime"
						}
					]
				},
				{
					"name": "windowOpen",
					"description": "Fired when a new window is going to be opened, via window.open(), link click, form submission,\netc.",
					"parameters": [
						{
							"name": "url",
							"description": "The URL for the new window.",
							"type": "string"
						},
						{
							"name": "windowName",
							"description": "Window name.",
							"type": "string"
						},
						{
							"name": "windowFeatures",
							"description": "An array of enabled window features.",
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						{
							"name": "userGesture",
							"description": "Whether or not it was triggered by user gesture.",
							"type": "boolean"
						}
					]
				}
			]
		},
		{
			"domain": "Target",
			"description": "Supports additional targets discovery and allows to attach to them.",
			"types": [
				{
					"id": "TargetID",
					"type": "string"
				},
				{
					"id": "SessionID",
					"description": "Unique identifier of attached debugging session.",
					"type": "string"
				},
				{
					"id": "TargetInfo",
					"type": "object",
					"properties": [
						{
							"name": "targetId",
							"$ref": "TargetID"
						},
						{
							"name": "type",
							"type": "string"
						},
						{
							"name": "title",
							"type": "string"
						},
						{
							"name": "url",
							"type": "string"
						},
						{
							"name": "attached",
							"description": "Whether the target has an attached client.",
							"type": "boolean"
						},
						{
							"name": "openerId",
							"description": "Opener target Id",
							"optional": true,
							"$ref": "TargetID"
						}
					]
				}
			],
			"commands": [
				{
					"name": "activateTarget",
					"description": "Activates (focuses) the target.",
					"parameters": [
						{
							"name": "targetId",
							"$ref": "TargetID"
						}
					]
				},
				{
					"name": "attachToTarget",
					"description": "Attaches to the target with given id.",
					"parameters": [
						{
							"name": "targetId",
							"$ref": "TargetID"
						}
					],
					"returns": [
						{
							"name": "sessionId",
							"description": "Id assigned to the session.",
							"$ref": "SessionID"
						}
					]
				},
				{
					"name": "closeTarget",
					"description": "Closes the target. If the target is a page that gets closed too.",
					"parameters": [
						{
							"name": "targetId",
							"$ref": "TargetID"
						}
					]
				},
				{
					"name": "createTarget",
					"description": "Creates a new page.",
					"parameters": [
						{
							"name": "url",
							"description": "The initial URL the page will be navigated to.",
							"type": "string"
						},
						{
							"name": "width",
							"description": "Frame width in DIP (headless chrome only).",
							"optional": true,
							"type": "integer"
						},
						{
							"name": "height",
							"description": "Frame height in DIP (headless chrome only).",
							"optional": true,
							"type": "integer"
						}
					],
					"returns": [
						{
							"name": "targetId",
							"description": "The id of the page opened.",
							"$ref": "TargetID"
						}
					]
				},
				{
					"name": "detachFromTarget",
					"description": "Detaches session with given id.",
					"parameters": [
						{
							"name": "sessionId",
							"description": "Session to detach.",
							"optional": true,
							"$ref": "SessionID"
						}
					]
				},
				{
					"name": "getTargets",
					"description": "Retrieves a list of available targets.",
					"returns": [
						{
							"name": "targetInfos",
							"description": "The list of targets.",
							"type": "array",
							"items": {
								"$ref": "TargetInfo"
							}
						}
					]
				},
				{
					"name": "setDiscoverTargets",
					"description": "Controls whether to discover available targets and notify via\n`targetCreated/targetInfoChanged/targetDestroyed` events.",
					"parameters": [
						{
							"name": "discover",
							"description": "Whether to discover available targets.",
							"type": "boolean"
						}
					]
				}
			],
			"events": [
				{
					"name": "receivedMessageFromTarget",
					"description": "Notifies about a new protocol message received from the session (as reported in\n`attachedToTarget` event).",
					"parameters": [
						{
							"name": "sessionId",
							"description": "Identifier of a session which sends a message.",
							"$ref": "SessionID"
						},
						{
							"name": "message",
							"type": "string"
						}
					]
				},
				{
					"name": "targetCreated",
					"description": "Issued when a possible inspection target is created.",
					"parameters": [
						{
							"name": "targetInfo",
							"$ref": "TargetInfo"
						}
					]
				},
				{
					"name": "targetDestroyed",
					"description": "Issued when a target is destroyed.",
					"parameters": [
						{
							"name": "targetId",
							"$ref": "TargetID"
						}
					]
				},
				{
					"name": "targetCrashed",
					"description": "Issued when a target has crashed.",
					"parameters": [
						{
							"name": "targetId",
							"$ref": "TargetID"
						},
						{
							"name": "status",
							"description": "Termination status type.",
							"type": "string"
						},
						{
							"name": "errorCode",
							"description": "Termination error code.",
							"type": "integer"
						}
					]
				},
				{
					"name": "targetInfoChanged",
					"description": "Issued when some information about a target has changed. This only happens between\n`targetCreated` and `targetDestroyed`.",
					"parameters": [
						{
							"name": "targetInfo",
							"$ref": "TargetInfo"
						}
					]
				}
			]
		},
		{
			"domain": "Debugger",
			"description": "Debugger domain exposes JavaScript debugging capabilities. It allows setting and removing\nbreakpoints, stepping through execution, exploring stack traces, etc.",
			"dependencies": [
				"Runtime"
			],
			"types": [
				{
					"id": "BreakpointId",
					"description": "Breakpoint identifier.",
					"type": "string"
				},
				{
					"id": "CallFrameId",
					"description": "Call frame identifier.",
					"type": "string"
				},
				{
					"id": "Location",
					"description": "Location in the source code.",
					"type": "object",
					"properties": [
						{
							"name": "scriptId",
							"description": "Script identifier as reported in the `Debugger.scriptParsed`.",
							"$ref": "Runtime.ScriptId"
						},
						{
							"name": "lineNumber",
							"description": "Line number in the script (0-based).",
							"type": "integer"
						},
						{
							"name": "columnNumber",
							"description": "Column number in the script (0-based).",
							"optional": true,
							"type": "integer"
						}
					]
				},
				{
					"id": "CallFrame",
					"description": "JavaScript call frame. Array of call frames form the call stack.",
					"type": "object",
					"properties": [
						{
							"name": "callFrameId",
							"description": "Call frame identifier. This identifier is only valid while the virtual machine is paused.",
							"$ref": "CallFrameId"
						},
						{
							"name": "functionName",
							"description": "Name of the JavaScript function called on this call frame.",
							"type": "string"
						},
						{
							"name": "functionLocation",
							"description": "Location in the source code.",
							"optional": true,
							"$ref": "Location"
						},
						{
							"name": "location",
							"description": "Location in the source code.",
							"$ref": "Location"
						},
						{
							"name": "scopeChain",
							"description": "Scope chain for this call frame.",
							"type": "array",
							"items": {
								"$ref": "Scope"
							}
						},
						{
							"name": "this",
							"description": "`this` object for this call frame.",
							"$ref": "Runtime.RemoteObject"
						},
						{
							"name": "returnValue",
							"description": "The value being returned, if the function is at return point.",
							"optional": true,
							"$ref": "Runtime.RemoteObject"
						}
					]
				},
				{
					"id": "Scope",
					"description": "Scope description.",
					"type": "object",
					"properties": [
						{
							"name": "type",
							"description": "Scope type.",
							"type": "string",
							"enum": [
								"global",
								"local",
								"with",
								"closure",
								"catch",
								"block",
								"script",
								"eval",
								"module"
							]
						},
						{
							"name": "object",
							"description": "Object representing the scope. For `global` and `with` scopes it represents the actual\nobject; for the rest of the scopes, it is artificial transient object enumerating scope\nvariables as its properties.",
							"$ref": "Runtime.RemoteObject"
						},
						{
							"name": "name",
							"optional": true,
							"type": "string"
						},
						{
							"name": "startLocation",
							"description": "Location in the source code where scope starts",
							"optional": true,
							"$ref": "Location"
						},
						{
							"name": "endLocation",
							"description": "Location in the source code where scope ends",
							"optional": true,
							"$ref": "Location"
						}
					]
				},
				{
					"id": "SearchMatch",
					"description": "Search match for resource.",
					"type": "object",
					"properties": [
						{
							"name": "lineNumber",
							"description": "Line number in resource content.",
							"type": "number"
						},
						{
							"name": "lineContent",
							"description": "Line with match content.",
							"type": "string"
						}
					]
				},
				{
					"id": "BreakLocation",
					"type": "object",
					"properties": [
						{
							"name": "scriptId",
							"description": "Script identifier as reported in the `Debugger.scriptParsed`.",
							"$ref": "Runtime.ScriptId"
						},
						{
							"name": "lineNumber",
							"description": "Line number in the script (0-based).",
							"type": "integer"
						},
						{
							"name": "columnNumber",
							"description": "Column number in the script (0-based).",
							"optional": true,
							"type": "integer"
						},
						{
							"name": "type",
							"optional": true,
							"type": "string",
							"enum": [
								"debuggerStatement",
								"call",
								"return"
							]
						}
					]
				}
			],
			"commands": [
				{
					"name": "continueToLocation",
					"description": "Continues execution until specific location is reached.",
					"parameters": [
						{
							"name": "location",
							"description": "Location to continue to.",
							"$ref": "Location"
						},
						{
							"name": "targetCallFrames",
							"optional": true,
							"type": "string",
							"enum": [
								"any",
								"current"
							]
						}
					]
				},
				{
					"name": "disable",
					"description": "Disables debugger for given page."
				},
				{
					"name": "enable",
					"description": "Enables debugger for the given page. Clients should not assume that the debugging has been\nenabled until the result for this command is received."
				},
				{
					"name": "evaluateOnCallFrame",
					"description": "Evaluates expression on a given call frame.",
					"parameters": [
						{
							"name": "callFrameId",
							"description": "Call frame identifier to evaluate on.",
							"$ref": "CallFrameId"
						},
						{
							"name": "expression",
							"description": "Expression to evaluate.",
							"type": "string"
						},
						{
							"name": "objectGroup",
							"description": "String object group name to put result into (allows rapid releasing resulting object handles\nusing `releaseObjectGroup`).",
							"optional": true,
							"type": "string"
						},
						{
							"name": "includeCommandLineAPI",
							"description": "Specifies whether command line API should be available to the evaluated expression, defaults\nto false.",
							"optional": true,
							"type": "boolean"
						},
						{
							"name": "silent",
							"description": "In silent mode exceptions thrown during evaluation are not reported and do not pause\nexecution. Overrides `setPauseOnException` state.",
							"optional": true,
							"type": "boolean"
						},
						{
							"name": "returnByValue",
							"description": "Whether the result is expected to be a JSON object that should be sent by value.",
							"optional": true,
							"type": "boolean"
						},
						{
							"name": "throwOnSideEffect",
							"description": "Whether to throw an exception if side effect cannot be ruled out during evaluation.",
							"optional": true,
							"type": "boolean"
						}
					],
					"returns": [
						{
							"name": "result",
							"description": "Object wrapper for the evaluation result.",
							"$ref": "Runtime.RemoteObject"
						},
						{
							"name": "exceptionDetails",
							"description": "Exception details.",
							"optional": true,
							"$ref": "Runtime.ExceptionDetails"
						}
					]
				},
				{
					"name": "getPossibleBreakpoints",
					"description": "Returns possible locations for breakpoint. scriptId in start and end range locations should be\nthe same.",
					"parameters": [
						{
							"name": "start",
							"description": "Start of range to search possible breakpoint locations in.",
							"$ref": "Location"
						},
						{
							"name": "end",
							"description": "End of range to search possible breakpoint locations in (excluding). When not specified, end\nof scripts is used as end of range.",
							"optional": true,
							"$ref": "Location"
						},
						{
							"name": "restrictToFunction",
							"description": "Only consider locations which are in the same (non-nested) function as start.",
							"optional": true,
							"type": "boolean"
						}
					],
					"returns": [
						{

							"name": "locations",
							"description": "List of the possible breakpoint locations.",
							"type": "array",
							"items": {
								"$ref": "BreakLocation"
							}
						}
					]
				},
				{
					"name": "getScriptSource",
					"description": "Returns source for the script with given id.",
					"parameters": [
						{
							"name": "scriptId",
							"description": "Id of the script to get source for.",
							"$ref": "Runtime.ScriptId"
						}
					],
					"returns": [
						{
							"name": "scriptSource",
							"description": "Script source.",
							"type": "string"
						}
					]
				},
				{
					"name": "pause",
					"description": "Stops on the next JavaScript statement."
				},
				{
					"name": "removeBreakpoint",
					"description": "Removes JavaScript breakpoint.",
					"parameters": [
						{
							"name": "breakpointId",
							"$ref": "BreakpointId"
						}
					]
				},
				{
					"name": "restartFrame",
					"description": "Restarts particular call frame from the beginning.",
					"parameters": [
						{
							"name": "callFrameId",
							"description": "Call frame identifier to evaluate on.",
							"$ref": "CallFrameId"
						}
					]
				},
				{
					"name": "resume",
					"description": "Resumes JavaScript execution."
				},
				{
					"name": "searchInContent",
					"description": "Searches for given string in script content.",
					"parameters": [
						{
							"name": "scriptId",
							"description": "Id of the script to search in.",
							"$ref": "Runtime.ScriptId"
						},
						{
							"name": "query",
							"description": "String to search for.",
							"type": "string"
						},
						{
							"name": "caseSensitive",
							"description": "If true, search is case sensitive.",
							"optional": true,
							"type": "boolean"
						},
						{
							"name": "isRegex",
							"description": "If true, treats string parameter as regex.",
							"optional": true,
							"type": "boolean"
						}
					],
					"returns": [
						{
							"name": "result",
							"description": "List of search matches.",
							"type": "array",
							"items": {
								"$ref": "SearchMatch"
							}
						}
					]
				},
				{
					"name": "setAsyncCallStackDepth",
					"description": "Enables or disables async call stacks tracking.",
					"parameters": [
						{
							"name": "maxDepth",
							"description": "Maximum depth of async call stacks. Setting to `0` will effectively disable collecting async\ncall stacks (default).",
							"type": "integer"
						}
					]
				},
				{
					"name": "setBreakpoint",
					"description": "Sets JavaScript breakpoint at a given location.",
					"parameters": [
						{
							"name": "location",
							"description": "Location to set breakpoint in.",
							"$ref": "Location"
						},
						{
							"name": "condition",
							"description": "Expression to use as a breakpoint condition. When specified, debugger will only stop on the\nbreakpoint if this expression evaluates to true.",
							"optional": true,
							"type": "string"
						}
					],
					"returns": [
						{
							"name": "breakpointId",
							"description": "Id of the created breakpoint for further reference.",
							"$ref": "BreakpointId"
						},
						{
							"name": "actualLocation",
							"description": "Location this breakpoint resolved into.",
							"$ref": "Location"
						}
					]
				},
				{
					"name": "setBreakpointByUrl",
					"description": "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this\ncommand is issued, all existing parsed scripts will have breakpoints resolved and returned in\n`locations` property. Further matching script parsing will result in subsequent\n`breakpointResolved` events issued. This logical breakpoint will survive page reloads.",
					"parameters": [
						{
							"name": "lineNumber",
							"description": "Line number to set breakpoint at.",
							"type": "integer"
						},
						{
							"name": "url",
							"description": "URL of the resources to set breakpoint on.",
							"optional": true,
							"type": "string"
						},
						{
							"name": "urlRegex",
							"description": "Regex pattern for the URLs of the resources to set breakpoints on. Either `url` or\n`urlRegex` must be specified.",
							"optional": true,
							"type": "string"
						},
						{
							"name": "scriptHash",
							"description": "Script hash of the resources to set breakpoint on.",
							"optional": true,
							"type": "string"
						},
						{
							"name": "columnNumber",
							"description": "Offset in the line to set breakpoint at.",
							"optional": true,
							"type": "integer"
						},
						{
							"name": "condition",
							"description": "Expression to use as a breakpoint condition. When specified, debugger will only stop on the\nbreakpoint if this expression evaluates to true.",
							"optional": true,
							"type": "string"
						}
					],
					"returns": [
						{
							"name": "breakpointId",
							"description": "Id of the created breakpoint for further reference.",
							"$ref": "BreakpointId"
						},
						{
							"name": "locations",
							"description": "List of the locations this breakpoint resolved into upon addition.",
							"type": "array",
							"items": {
								"$ref": "Location"
							}
						}
					]
				},
				{
					"name": "setBreakpointsActive",
					"description": "Activates / deactivates all breakpoints on the page.",
					"parameters": [
						{
							"name": "active",
							"description": "New value for breakpoints active state.",
							"type": "boolean"
						}
					]
				},
				{
					"name": "setPauseOnExceptions",
					"description": "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or\nno exceptions. Initial pause on exceptions state is `none`.",
					"parameters": [
						{
							"name": "state",
							"description": "Pause on exceptions mode.",
							"type": "string",
							"enum": [
								"none",
								"uncaught",
								"all"
							]
						}
					]
				},
				{
					"name": "setScriptSource",
					"description": "Edits JavaScript source live.",
					"parameters": [
						{
							"name": "scriptId",
							"description": "Id of the script to edit.",
							"$ref": "Runtime.ScriptId"
						},
						{
							"name": "scriptSource",
							"description": "New content of the script.",
							"type": "string"
						},
						{
							"name": "dryRun",
							"description": "If true the change will not actually be applied. Dry run may be used to get result\ndescription without actually modifying the code.",
							"optional": true,
							"type": "boolean"
						}
					],
					"returns": [
						{
							"name": "exceptionDetails",
							"description": "Exception details if any.",
							"optional": true,
							"$ref": "Runtime.ExceptionDetails"
						}
					]
				},
				{
					"name": "setSkipAllPauses",
					"description": "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc).",
					"parameters": [
						{
							"name": "skip",
							"description": "New value for skip pauses state.",
							"type": "boolean"
						}
					]
				},
				{
					"name": "setVariableValue",
					"description": "Changes value of variable in a callframe. Object-based scopes are not supported and must be\nmutated manually.",
					"parameters": [
						{
							"name": "scopeNumber",
							"description": "0-based number of scope as was listed in scope chain. Only 'local', 'closure' and 'catch'\nscope types are allowed. Other scopes could be manipulated manually.",
							"type": "integer"
						},
						{
							"name": "variableName",
							"description": "Variable name.",
							"type": "string"
						},
						{
							"name": "newValue",
							"description": "New variable value.",
							"$ref": "Runtime.CallArgument"
						},
						{
							"name": "callFrameId",
							"description": "Id of callframe that holds variable.",
							"$ref": "CallFrameId"
						}
					]
				},
				{
					"name": "stepInto",
					"description": "Steps into the function call."
				},
				{
					"name": "stepOut",
					"description": "Steps out of the function call."
				},
				{
					"name": "stepOver",
					"description": "Steps over the statement."
				}
			],
			"events": [
				{
					"name": "breakpointResolved",
					"description": "Fired when breakpoint is resolved to an actual script and location.",
					"parameters": [
						{
							"name": "breakpointId",
							"description": "Breakpoint unique identifier.",
							"$ref": "BreakpointId"
						},
						{
							"name": "location",
							"description": "Actual breakpoint location.",
							"$ref": "Location"
						}
					]
				},
				{
					"name": "paused",
					"description": "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.",
					"parameters": [
						{
							"name": "callFrames",
							"description": "Call stack the virtual machine stopped on.",
							"type": "array",
							"items": {
								"$ref": "CallFrame"
							}
						},
						{
							"name": "reason",
							"description": "Pause reason.",
							"type": "string",
							"enum": [
								"ambiguous",
								"assert",
								"debugCommand",
								"DOM",
								"EventListener",
								"exception",
								"OOM",
								"other",
								"promiseRejection",
								"XHR"
							]
						},
						{
							"name": "data",
							"description": "Object containing break-specific auxiliary properties.",
							"optional": true,
							"type": "object"
						},
						{
							"name": "hitBreakpoints",
							"description": "Hit breakpoints IDs",
							"optional": true,
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						{
							"name": "asyncStackTrace",
							"description": "Async stack trace, if any.",
							"optional": true,
							"$ref": "Runtime.StackTrace"
						}
					]
				},
				{
					"name": "resumed",
					"description": "Fired when the virtual machine resumed execution."
				},
				{
					"name": "scriptFailedToParse",
					"description": "Fired when virtual machine fails to parse the script.",
					"parameters": [
						{
							"name": "scriptId",
							"description": "Identifier of the script parsed.",
							"$ref": "Runtime.ScriptId"
						},
						{
							"name": "url",
							"description": "URL or name of the script parsed (if any).",
							"type": "string"
						},
						{
							"name": "startLine",
							"description": "Line offset of the script within the resource with given URL (for script tags).",
							"type": "integer"
						},
						{
							"name": "startColumn",
							"description": "Column offset of the script within the resource with given URL.",
							"type": "integer"
						},
						{
							"name": "endLine",
							"description": "Last line of the script.",
							"type": "integer"
						},
						{
							"name": "endColumn",
							"description": "Length of the last line of the script.",
							"type": "integer"
						},
						{
							"name": "executionContextId",
							"description": "Specifies script creation context.",
							"$ref": "Runtime.ExecutionContextId"
						},
						{
							"name": "hash",
							"description": "Content hash of the script.",
							"type": "string"
						},
						{
							"name": "executionContextAuxData",
							"description": "Embedder-specific auxiliary data.",
							"optional": true,
							"type": "object"
						},
						{
							"name": "sourceMapURL",
							"description": "URL of source map associated with script (if any).",
							"optional": true,
							"type": "string"
						},
						{
							"name": "hasSourceURL",
							"description": "True, if this script has sourceURL.",
							"optional": true,
							"type": "boolean"
						},
						{
							"name": "isModule",
							"description": "True, if this script is ES6 module.",
							"optional": true,
							"type": "boolean"
						},
						{
							"name": "length",
							"description": "This script length.",
							"optional": true,
							"type": "integer"
						}
					]
				},
				{
					"name": "scriptParsed",
					"description": "Fired when virtual machine parses script. This event is also fired for all known and uncollected\nscripts upon enabling debugger.",
					"parameters": [
						{
							"name": "scriptId",
							"description": "Identifier of the script parsed.",
							"$ref": "Runtime.ScriptId"
						},
						{
							"name": "url",
							"description": "URL or name of the script parsed (if any).",
							"type": "string"
						},
						{
							"name": "startLine",
							"description": "Line offset of the script within the resource with given URL (for script tags).",
							"type": "integer"
						},
						{
							"name": "startColumn",
							"description": "Column offset of the script within the resource with given URL.",
							"type": "integer"
						},
						{
							"name": "endLine",
							"description": "Last line of the script.",
							"type": "integer"
						},
						{
							"name": "endColumn",
							"description": "Length of the last line of the script.",
							"type": "integer"
						},
						{
							"name": "executionContextId",
							"description": "Specifies script creation context.",
							"$ref": "Runtime.ExecutionContextId"
						},
						{
							"name": "hash",
							"description": "Content hash of the script.",
							"type": "string"
						},
						{
							"name": "executionContextAuxData",
							"description": "Embedder-specific auxiliary data.",
							"optional": true,
							"type": "object"
						},
						{
							"name": "sourceMapURL",
							"description": "URL of source map associated with script (if any).",
							"optional": true,
							"type": "string"
						},
						{
							"name": "hasSourceURL",
							"description": "True, if this script has sourceURL.",
							"optional": true,
							"type": "boolean"
						},
						{
							"name": "isModule",
							"description": "True, if this script is ES6 module.",
							"optional": true,
							"type": "boolean"
						},
						{
							"name": "length",
							"description": "This script length.",
							"optional": true,
							"type": "integer"
						}
					]
				}
			]
		},
		{
			"domain": "Profiler",
			"dependencies": [
				"Runtime",
				"Debugger"
			],
			"types": [
				{
					"id": "ProfileNode",
					"description": "Profile node. Holds callsite information, execution statistics and child nodes.",
					"type": "object",
					"properties": [
						{
							"name": "id",
							"description": "Unique id of the node.",
							"type": "integer"
						},
						{
							"name": "callFrame",
							"description": "Function location.",
							"$ref": "Runtime.CallFrame"
						},
						{
							"name": "hitCount",
							"description": "Number of samples where this node was on top of the call stack.",
							"optional": true,
							"type": "integer"
						},
						{
							"name": "children",
							"description": "Child node ids.",
							"optional": true,
							"type": "array",
							"items": {
								"type": "integer"
							}
						},
						{
							"name": "deoptReason",
							"description": "The reason of being not optimized. The function may be deoptimized or marked as don't\noptimize.",
							"optional": true,
							"type": "string"
						},
						{
							"name": "positionTicks",
							"description": "An array of source position ticks.",
							"optional": true,
							"type": "array",
							"items": {
								"$ref": "PositionTickInfo"
							}
						}
					]
				},
				{
					"id": "Profile",
					"description": "Profile.",
					"type": "object",
					"properties": [
						{
							"name": "nodes",
							"description": "The list of profile nodes. First item is the root node.",
							"type": "array",
							"items": {
								"$ref": "ProfileNode"
							}
						},
						{
							"name": "startTime",
							"description": "Profiling start timestamp in microseconds.",
							"type": "number"
						},
						{
							"name": "endTime",
							"description": "Profiling end timestamp in microseconds.",
							"type": "number"
						},
						{
							"name": "samples",
							"description": "Ids of samples top nodes.",
							"optional": true,
							"type": "array",
							"items": {
								"type": "integer"
							}
						},
						{
							"name": "timeDeltas",
							"description": "Time intervals between adjacent samples in microseconds. The first delta is relative to the\nprofile startTime.",
							"optional": true,
							"type": "array",
							"items": {
								"type": "integer"
							}
						}
					]
				},
				{
					"id": "PositionTickInfo",
					"description": "Specifies a number of samples attributed to a certain source position.",
					"type": "object",
					"properties": [
						{
							"name": "line",
							"description": "Source line number (1-based).",
							"type": "integer"
						},
						{
							"name": "ticks",
							"description": "Number of samples attributed to the source line.",
							"type": "integer"
						}
					]
				},
				{
					"id": "CoverageRange",
					"description": "Coverage data for a source range.",
					"type": "object",
					"properties": [
						{
							"name": "startOffset",
							"description": "JavaScript script source offset for the range start.",
							"type": "integer"
						},
						{
							"name": "endOffset",
							"description": "JavaScript script source offset for the range end.",
							"type": "integer"
						},
						{
							"name": "count",
							"description": "Collected execution count of the source range.",
							"type": "integer"
						}
					]
				},
				{
					"id": "FunctionCoverage",
					"description": "Coverage data for a JavaScript function.",
					"type": "object",
					"properties": [
						{
							"name": "functionName",
							"description": "JavaScript function name.",
							"type": "string"
						},
						{
							"name": "ranges",
							"description": "Source ranges inside the function with coverage data.",
							"type": "array",
							"items": {
								"$ref": "CoverageRange"
							}
						},
						{
							"name": "isBlockCoverage",
							"description": "Whether coverage data for this function has block granularity.",
							"type": "boolean"
						}
					]
				},
				{
					"id": "ScriptCoverage",
					"description": "Coverage data for a JavaScript script.",
					"type": "object",
					"properties": [
						{
							"name": "scriptId",
							"description": "JavaScript script id.",
							"$ref": "Runtime.ScriptId"
						},
						{
							"name": "url",
							"description": "JavaScript script name or url.",
							"type": "string"
						},
						{
							"name": "functions",
							"description": "Functions contained in the script that has coverage data.",
							"type": "array",
							"items": {
								"$ref": "FunctionCoverage"
							}
						}
					]
				}
			],
			"commands": [
				{
					"name": "disable"
				},
				{
					"name": "enable"
				},
				{
					"name": "getBestEffortCoverage",
					"description": "Collect coverage data for the current isolate. The coverage data may be incomplete due to\ngarbage collection.",
					"returns": [
						{
							"name": "result",
							"description": "Coverage data for the current isolate.",
							"type": "array",
							"items": {
								"$ref": "ScriptCoverage"
							}
						}
					]
				},
				{
					"name": "setSamplingInterval",
					"description": "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started.",
					"parameters": [
						{
							"name": "interval",
							"description": "New sampling interval in microseconds.",
							"type": "integer"
						}
					]
				},
				{
					"name": "start"
				},
				{
					"name": "startPreciseCoverage",
					"description": "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code\ncoverage may be incomplete. Enabling prevents running optimized code and resets execution\ncounters.",
					"parameters": [
						{
							"name": "callCount",
							"description": "Collect accurate call counts beyond simple 'covered' or 'not covered'.",
							"optional": true,
							"type": "boolean"
						},
						{
							"name": "detailed",
							"description": "Collect block-based coverage.",
							"optional": true,
							"type": "boolean"
						}
					]
				},
				{
					"name": "stop",
					"returns": [
						{
							"name": "profile",
							"description": "Recorded profile.",
							"$ref": "Profile"
						}
					]
				},
				{
					"name": "stopPreciseCoverage",
					"description": "Disable precise code coverage. Disabling releases unnecessary execution count records and allows\nexecuting optimized code."
				},
				{
					"name": "takePreciseCoverage",
					"description": "Collect coverage data for the current isolate, and resets execution counters. Precise code\ncoverage needs to have started.",
					"returns": [
						{
							"name": "result",
							"description": "Coverage data for the current isolate.",
							"type": "array",
							"items": {
								"$ref": "ScriptCoverage"
							}
						}
					]
				}
			],
			"events": [
				{
					"name": "consoleProfileFinished",
					"parameters": [
						{
							"name": "id",
							"type": "string"
						},
						{
							"name": "location",
							"description": "Location of console.profileEnd().",
							"$ref": "Debugger.Location"
						},
						{
							"name": "profile",
							"$ref": "Profile"
						},
						{
							"name": "title",
							"description": "Profile title passed as an argument to console.profile().",
							"optional": true,
							"type": "string"
						}
					]
				},
				{
					"name": "consoleProfileStarted",
					"description": "Sent when new profile recording is started using console.profile() call.",
					"parameters": [
						{
							"name": "id",
							"type": "string"
						},
						{
							"name": "location",
							"description": "Location of console.profile().",
							"$ref": "Debugger.Location"
						},
						{
							"name": "title",
							"description": "Profile title passed as an argument to console.profile().",
							"optional": true,
							"type": "string"
						}
					]
				}
			]
		},
		{
			"domain": "Runtime",
			"description": "Runtime domain exposes JavaScript runtime by means of remote evaluation and mirror objects.\nEvaluation results are returned as mirror object that expose object type, string representation\nand unique identifier that can be used for further object reference. Original objects are\nmaintained in memory unless they are either explicitly released or are released along with the\nother objects in their object group.",
			"types": [
				{
					"id": "ScriptId",
					"description": "Unique script identifier.",
					"type": "string"
				},
				{
					"id": "RemoteObjectId",
					"description": "Unique object identifier.",
					"type": "string"
				},
				{
					"id": "UnserializableValue",
					"description": "Primitive value which cannot be JSON-stringified. Includes values `-0`, `NaN`, `Infinity`,\n`-Infinity`, and bigint literals.",
					"type": "string"
				},
				{
					"id": "RemoteObject",
					"description": "Mirror object referencing original JavaScript object.",
					"type": "object",
					"properties": [
						{
							"name": "type",
							"description": "Object type.",
							"type": "string",
							"enum": [
								"object",
								"function",
								"undefined",
								"string",
								"number",
								"boolean",
								"symbol",
								"bigint"
							]
						},
						{
							"name": "subtype",
							"description": "Object subtype hint. Specified for `object` type values only.",
							"optional": true,
							"type": "string",
							"enum": [
								"array",
								"null",
								"node",
								"regexp",
								"date",
								"map",
								"set",
								"weakmap",
								"weakset",
								"iterator",
								"generator",
								"error",
								"proxy",
								"promise",
								"typedarray",
								"arraybuffer",
								"dataview"
							]
						},
						{
							"name": "className",
							"description": "Object class (constructor) name. Specified for `object` type values only.",
							"optional": true,
							"type": "string"
						},
						{
							"name": "value",
							"description": "Remote object value in case of primitive values or JSON values (if it was requested).",
							"optional": true,
							"type": "any"
						},
						{
							"name": "unserializableValue",
							"description": "Primitive value which can not be JSON-stringified does not have `value`, but gets this\nproperty.",
							"optional": true,
							"$ref": "UnserializableValue"
						},
						{
							"name": "description",
							"description": "String representation of the object.",
							"optional": true,
							"type": "string"
						},
						{
							"name": "objectId",
							"description": "Unique object identifier (for non-primitive values).",
							"optional": true,
							"$ref": "RemoteObjectId"
						}
					]
				},
				{
					"id": "PropertyDescriptor",
					"description": "Object property descriptor.",
					"type": "object",
					"properties": [
						{
							"name": "name",
							"description": "Property name or symbol description.",
							"type": "string"
						},
						{
							"name": "value",
							"description": "The value associated with the property.",
							"optional": true,
							"$ref": "RemoteObject"
						},
						{
							"name": "writable",
							"description": "True if the value associated with the property may be changed (data descriptors only).",
							"optional": true,
							"type": "boolean"
						},
						{
							"name": "get",
							"description": "A function which serves as a getter for the property, or `undefined` if there is no getter\n(accessor descriptors only).",
							"optional": true,
							"$ref": "RemoteObject"
						},
						{
							"name": "set",
							"description": "A function which serves as a setter for the property, or `undefined` if there is no setter\n(accessor descriptors only).",
							"optional": true,
							"$ref": "RemoteObject"
						},
						{
							"name": "configurable",
							"description": "True if the type of this property descriptor may be changed and if the property may be\ndeleted from the corresponding object.",
							"type": "boolean"
						},
						{
							"name": "enumerable",
							"description": "True if this property shows up during enumeration of the properties on the corresponding\nobject.",
							"type": "boolean"
						},
						{
							"name": "wasThrown",
							"description": "True if the result was thrown during the evaluation.",
							"optional": true,
							"type": "boolean"
						},
						{
							"name": "isOwn",
							"description": "True if the property is owned for the object.",
							"optional": true,
							"type": "boolean"
						},
						{
							"name": "symbol",
							"description": "Property symbol object, if the property is of the `symbol` type.",
							"optional": true,
							"$ref": "RemoteObject"
						}
					]
				},
				{
					"id": "InternalPropertyDescriptor",
					"description": "Object internal property descriptor. This property isn't normally visible in JavaScript code.",
					"type": "object",
					"properties": [
						{
							"name": "name",
							"description": "Conventional property name.",
							"type": "string"
						},
						{
							"name": "value",
							"description": "The value associated with the property.",
							"optional": true,
							"$ref": "RemoteObject"
						}
					]
				},
				{
					"id": "CallArgument",
					"description": "Represents function call argument. Either remote object id `objectId`, primitive `value`,\nunserializable primitive value or neither of (for undefined) them should be specified.",
					"type": "object",
					"properties": [
						{
							"name": "value",
							"description": "Primitive value or serializable javascript object.",
							"optional": true,
							"type": "any"
						},
						{
							"name": "unserializableValue",
							"description": "Primitive value which can not be JSON-stringified.",
							"optional": true,
							"$ref": "UnserializableValue"
						},
						{
							"name": "objectId",
							"description": "Remote object handle.",
							"optional": true,
							"$ref": "RemoteObjectId"
						}
					]
				},
				{
					"id": "ExecutionContextId",
					"description": "Id of an execution context.",
					"type": "integer"
				},
				{
					"id": "ExecutionContextDescription",
					"description": "Description of an isolated world.",
					"type": "object",
					"properties": [
						{
							"name": "id",
							"description": "Unique id of the execution context. It can be used to specify in which execution context\nscript evaluation should be performed.",
							"$ref": "ExecutionContextId"
						},
						{
							"name": "origin",
							"description": "Execution context origin.",
							"type": "string"
						},
						{
							"name": "name",
							"description": "Human readable name describing given context.",
							"type": "string"
						},
						{
							"name": "auxData",
							"description": "Embedder-specific auxiliary data.",
							"optional": true,
							"type": "object"
						}
					]
				},
				{
					"id": "ExceptionDetails",
					"description": "Detailed information about exception (or error) that was thrown during script compilation or\nexecution.",
					"type": "object",
					"properties": [
						{
							"name": "exceptionId",
							"description": "Exception id.",
							"type": "integer"
						},
						{
							"name": "text",
							"description": "Exception text, which should be used together with exception object when available.",
							"type": "string"
						},
						{
							"name": "lineNumber",
							"description": "Line number of the exception location (0-based).",
							"type": "integer"
						},
						{
							"name": "columnNumber",
							"description": "Column number of the exception location (0-based).",
							"type": "integer"
						},
						{
							"name": "scriptId",
							"description": "Script ID of the exception location.",
							"optional": true,
							"$ref": "ScriptId"
						},
						{
							"name": "url",
							"description": "URL of the exception location, to be used when the script was not reported.",
							"optional": true,
							"type": "string"
						},
						{
							"name": "stackTrace",
							"description": "JavaScript stack trace if available.",
							"optional": true,
							"$ref": "StackTrace"
						},
						{
							"name": "exception",
							"description": "Exception object if available.",
							"optional": true,
							"$ref": "RemoteObject"
						},
						{
							"name": "executionContextId",
							"description": "Identifier of the context where exception happened.",
							"optional": true,
							"$ref": "ExecutionContextId"
						}
					]
				},
				{
					"id": "Timestamp",
					"description": "Number of milliseconds since epoch.",
					"type": "number"
				},
				{
					"id": "TimeDelta",
					"description": "Number of milliseconds.",
					"type": "number"
				},
				{
					"id": "CallFrame",
					"description": "Stack entry for runtime errors and assertions.",
					"type": "object",
					"properties": [
						{
							"name": "functionName",
							"description": "JavaScript function name.",
							"type": "string"
						},
						{
							"name": "scriptId",
							"description": "JavaScript script id.",
							"$ref": "ScriptId"
						},
						{
							"name": "url",
							"description": "JavaScript script name or url.",
							"type": "string"
						},
						{
							"name": "lineNumber",
							"description": "JavaScript script line number (0-based).",
							"type": "integer"
						},
						{
							"name": "columnNumber",
							"description": "JavaScript script column number (0-based).",
							"type": "integer"
						}
					]
				}
			],
			"commands": [
				{
					"name": "awaitPromise",
					"description": "Add handler to promise with given promise object id.",
					"parameters": [
						{
							"name": "promiseObjectId",
							"description": "Identifier of the promise.",
							"$ref": "RemoteObjectId"
						},
						{
							"name": "returnByValue",
							"description": "Whether the result is expected to be a JSON object that should be sent by value.",
							"optional": true,
							"type": "boolean"
						},
						{
							"name": "generatePreview",
							"description": "Whether preview should be generated for the result.",
							"optional": true,
							"type": "boolean"
						}
					],
					"returns": [
						{
							"name": "result",
							"description": "Promise result. Will contain rejected value if promise was rejected.",
							"$ref": "RemoteObject"
						},
						{
							"name": "exceptionDetails",
							"description": "Exception details if stack strace is available.",
							"optional": true,
							"$ref": "ExceptionDetails"
						}
					]
				},
				{
					"name": "callFunctionOn",
					"description": "Calls function with given declaration on the given object. Object group of the result is\ninherited from the target object.",
					"parameters": [
						{
							"name": "functionDeclaration",
							"description": "Declaration of the function to call.",
							"type": "string"
						},
						{
							"name": "objectId",
							"description": "Identifier of the object to call function on. Either objectId or executionContextId should\nbe specified.",
							"optional": true,
							"$ref": "RemoteObjectId"
						},
						{
							"name": "arguments",
							"description": "Call arguments. All call arguments must belong to the same JavaScript world as the target\nobject.",
							"optional": true,
							"type": "array",
							"items": {
								"$ref": "CallArgument"
							}
						},
						{
							"name": "silent",
							"description": "In silent mode exceptions thrown during evaluation are not reported and do not pause\nexecution. Overrides `setPauseOnException` state.",
							"optional": true,
							"type": "boolean"
						},
						{
							"name": "returnByValue",
							"description": "Whether the result is expected to be a JSON object which should be sent by value.",
							"optional": true,
							"type": "boolean"
						},
						{
							"name": "userGesture",
							"description": "Whether execution should be treated as initiated by user in the UI.",
							"optional": true,
							"type": "boolean"
						},
						{
							"name": "awaitPromise",
							"description": "Whether execution should `await` for resulting value and return once awaited promise is\nresolved.",
							"optional": true,
							"type": "boolean"
						},
						{
							"name": "executionContextId",
							"description": "Specifies execution context which global object will be used to call function on. Either\nexecutionContextId or objectId should be specified.",
							"optional": true,
							"$ref": "ExecutionContextId"
						},
						{
							"name": "objectGroup",
							"description": "Symbolic group name that can be used to release multiple objects. If objectGroup is not\nspecified and objectId is, objectGroup will be inherited from object.",
							"optional": true,
							"type": "string"
						}
					],
					"returns": [
						{
							"name": "result",
							"description": "Call result.",
							"$ref": "RemoteObject"
						},
						{
							"name": "exceptionDetails",
							"description": "Exception details.",
							"optional": true,
							"$ref": "ExceptionDetails"
						}
					]
				},
				{
					"name": "compileScript",
					"description": "Compiles expression.",
					"parameters": [
						{
							"name": "expression",
							"description": "Expression to compile.",
							"type": "string"
						},
						{
							"name": "sourceURL",
							"description": "Source url to be set for the script.",
							"type": "string"
						},
						{
							"name": "persistScript",
							"description": "Specifies whether the compiled script should be persisted.",
							"type": "boolean"
						},
						{
							"name": "executionContextId",
							"description": "Specifies in which execution context to perform script run. If the parameter is omitted the\nevaluation will be performed in the context of the inspected page.",
							"optional": true,
							"$ref": "ExecutionContextId"
						}
					],
					"returns": [
						{
							"name": "scriptId",
							"description": "Id of the script.",
							"optional": true,
							"$ref": "ScriptId"
						},
						{
							"name": "exceptionDetails",
							"description": "Exception details.",
							"optional": true,
							"$ref": "ExceptionDetails"
						}
					]
				},
				{
					"name": "disable",
					"description": "Disables reporting of execution contexts creation."
				},
				{
					"name": "discardConsoleEntries",
					"description": "Discards collected exceptions and console API calls."
				},
				{
					"name": "enable",
					"description": "Enables reporting of execution contexts creation by means of `executionContextCreated` event.\nWhen the reporting gets enabled the event will be sent immediately for each existing execution\ncontext."
				},
				{
					"name": "evaluate",
					"description": "Evaluates expression on global object.",
					"parameters": [
						{
							"name": "expression",
							"description": "Expression to evaluate.",
							"type": "string"
						},
						{
							"name": "objectGroup",
							"description": "Symbolic group name that can be used to release multiple objects.",
							"optional": true,
							"type": "string"
						},
						{
							"name": "includeCommandLineAPI",
							"description": "Determines whether Command Line API should be available during the evaluation.",
							"optional": true,
							"type": "boolean"
						},
						{
							"name": "silent",
							"description": "In silent mode exceptions thrown during evaluation are not reported and do not pause\nexecution. Overrides `setPauseOnException` state.",
							"optional": true,
							"type": "boolean"
						},
						{
							"name": "contextId",
							"description": "Specifies in which execution context to perform evaluation. If the parameter is omitted the\nevaluation will be performed in the context of the inspected page.",
							"optional": true,
							"$ref": "ExecutionContextId"
						},
						{
							"name": "returnByValue",
							"description": "Whether the result is expected to be a JSON object that should be sent by value.",
							"optional": true,
							"type": "boolean"
						},
						{
							"name": "userGesture",
							"description": "Whether execution should be treated as initiated by user in the UI.",
							"optional": true,
							"type": "boolean"
						},
						{
							"name": "awaitPromise",
							"description": "Whether execution should `await` for resulting value and return once awaited promise is\nresolved.",
							"optional": true,
							"type": "boolean"
						}
					],
					"returns": [
						{
							"name": "result",
							"description": "Evaluation result.",
							"$ref": "RemoteObject"
						},
						{
							"name": "exceptionDetails",
							"description": "Exception details.",
							"optional": true,
							"$ref": "ExceptionDetails"
						}
					]
				},
				{
					"name": "getProperties",
					"description": "Returns properties of a given object. Object group of the result is inherited from the target\nobject.",
					"parameters": [
						{
							"name": "objectId",
							"description": "Identifier of the object to return properties for.",
							"$ref": "RemoteObjectId"
						},
						{
							"name": "ownProperties",
							"description": "If true, returns properties belonging only to the element itself, not to its prototype\nchain.",
							"optional": true,
							"type": "boolean"
						}
					],
					"returns": [
						{
							"name": "result",
							"description": "Object properties.",
							"type": "array",
							"items": {
								"$ref": "PropertyDescriptor"
							}
						},
						{
							"name": "internalProperties",
							"description": "Internal object properties (only of the element itself).",
							"optional": true,
							"type": "array",
							"items": {
								"$ref": "InternalPropertyDescriptor"
							}
						},
						{
							"name": "exceptionDetails",
							"description": "Exception details.",
							"optional": true,
							"$ref": "ExceptionDetails"
						}
					]
				},
				{
					"name": "globalLexicalScopeNames",
					"description": "Returns all let, const and class variables from global scope.",
					"parameters": [
						{
							"name": "executionContextId",
							"description": "Specifies in which execution context to lookup global scope variables.",
							"optional": true,
							"$ref": "ExecutionContextId"
						}
					],
					"returns": [
						{
							"name": "names",
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					]
				},
				{
					"name": "queryObjects",
					"parameters": [
						{
							"name": "prototypeObjectId",
							"description": "Identifier of the prototype to return objects for.",
							"$ref": "RemoteObjectId"
						},
						{
							"name": "objectGroup",
							"description": "Symbolic group name that can be used to release the results.",
							"optional": true,
							"type": "string"
						}
					],
					"returns": [
						{
							"name": "objects",
							"description": "Array with objects.",
							"$ref": "RemoteObject"
						}
					]
				},
				{
					"name": "releaseObject",
					"description": "Releases remote object with given id.",
					"parameters": [
						{
							"name": "objectId",
							"description": "Identifier of the object to release.",
							"$ref": "RemoteObjectId"
						}
					]
				},
				{
					"name": "releaseObjectGroup",
					"description": "Releases all remote objects that belong to a given group.",
					"parameters": [
						{
							"name": "objectGroup",
							"description": "Symbolic object group name.",
							"type": "string"
						}
					]
				},
				{
					"name": "runIfWaitingForDebugger",
					"description": "Tells inspected instance to run if it was waiting for debugger to attach."
				},
				{
					"name": "runScript",
					"description": "Runs script with given id in a given context.",
					"parameters": [
						{
							"name": "scriptId",
							"description": "Id of the script to run.",
							"$ref": "ScriptId"
						},
						{
							"name": "executionContextId",
							"description": "Specifies in which execution context to perform script run. If the parameter is omitted the\nevaluation will be performed in the context of the inspected page.",
							"optional": true,
							"$ref": "ExecutionContextId"
						},
						{
							"name": "objectGroup",
							"description": "Symbolic group name that can be used to release multiple objects.",
							"optional": true,
							"type": "string"
						},
						{
							"name": "silent",
							"description": "In silent mode exceptions thrown during evaluation are not reported and do not pause\nexecution. Overrides `setPauseOnException` state.",
							"optional": true,
							"type": "boolean"
						},
						{
							"name": "includeCommandLineAPI",
							"description": "Determines whether Command Line API should be available during the evaluation.",
							"optional": true,
							"type": "boolean"
						},
						{
							"name": "returnByValue",
							"description": "Whether the result is expected to be a JSON object which should be sent by value.",
							"optional": true,
							"type": "boolean"
						},
						{
							"name": "generatePreview",
							"description": "Whether preview should be generated for the result.",
							"optional": true,
							"type": "boolean"
						},
						{
							"name": "awaitPromise",
							"description": "Whether execution should `await` for resulting value and return once awaited promise is\nresolved.",
							"optional": true,
							"type": "boolean"
						}
					],
					"returns": [
						{
							"name": "result",
							"description": "Run result.",
							"$ref": "RemoteObject"
						},
						{
							"name": "exceptionDetails",
							"description": "Exception details.",
							"optional": true,
							"$ref": "ExceptionDetails"
						}
					]
				},
				{
					"name": "setAsyncCallStackDepth",
					"description": "Enables or disables async call stacks tracking.",
					"redirect": "Debugger",
					"parameters": [
						{
							"name": "maxDepth",
							"description": "Maximum depth of async call stacks. Setting to `0` will effectively disable collecting async\ncall stacks (default).",
							"type": "integer"
						}
					]
				}
			],
			"events": [
				{
					"name": "consoleAPICalled",
					"description": "Issued when console API was called.",
					"parameters": [
						{
							"name": "type",
							"description": "Type of the call.",
							"type": "string",
							"enum": [
								"log",
								"debug",
								"info",
								"error",
								"warning",
								"dir",
								"dirxml",
								"table",
								"trace",
								"clear",
								"startGroup",
								"startGroupCollapsed",
								"endGroup",
								"assert",
								"profile",
								"profileEnd",
								"count",
								"timeEnd"
							]
						},
						{
							"name": "args",
							"description": "Call arguments.",
							"type": "array",
							"items": {
								"$ref": "RemoteObject"
							}
						},
						{
							"name": "executionContextId",
							"description": "Identifier of the context where the call was made.",
							"$ref": "ExecutionContextId"
						},
						{
							"name": "timestamp",
							"description": "Call timestamp.",
							"$ref": "Timestamp"
						},
						{
							"name": "stackTrace",
							"description": "Stack trace captured when the call was made.",
							"optional": true,
							"$ref": "StackTrace"
						}
					]
				},
				{
					"name": "exceptionRevoked",
					"description": "Issued when unhandled exception was revoked.",
					"parameters": [
						{
							"name": "reason",
							"description": "Reason describing why exception was revoked.",
							"type": "string"
						},
						{
							"name": "exceptionId",
							"description": "The id of revoked exception, as reported in `exceptionThrown`.",
							"type": "integer"
						}
					]
				},
				{
					"name": "exceptionThrown",
					"description": "Issued when exception was thrown and unhandled.",
					"parameters": [
						{
							"name": "timestamp",
							"description": "Timestamp of the exception.",
							"$ref": "Timestamp"
						},
						{
							"name": "exceptionDetails",
							"$ref": "ExceptionDetails"
						}
					]
				},
				{
					"name": "executionContextCreated",
					"description": "Issued when new execution context is created.",
					"parameters": [
						{
							"name": "context",
							"description": "A newly created execution context.",
							"$ref": "ExecutionContextDescription"
						}
					]
				},
				{
					"name": "executionContextDestroyed",
					"description": "Issued when execution context is destroyed.",
					"parameters": [
						{
							"name": "executionContextId",
							"description": "Id of the destroyed context",
							"$ref": "ExecutionContextId"
						}
					]
				},
				{
					"name": "executionContextsCleared",
					"description": "Issued when all executionContexts were cleared in browser"
				},
				{
					"name": "inspectRequested",
					"description": "Issued when object should be inspected (for example, as a result of inspect() command line API\ncall).",
					"parameters": [
						{
							"name": "object",
							"$ref": "RemoteObject"
						},
						{
							"name": "hints",
							"type": "object"
						}
					]
				}
			]
		}
	]
}