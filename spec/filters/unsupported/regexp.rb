opal_unsupported_filter "Regexp" do
  fails "Regexp#options does not include Regexp::FIXEDENCODING for a Regexp literal with the 'n' option"
  fails "Regexp#options includes Regexp::FIXEDENCODING for a Regexp literal with the 'e' option"
  fails "Regexp#options includes Regexp::FIXEDENCODING for a Regexp literal with the 's' option"
  fails "Regexp#options includes Regexp::FIXEDENCODING for a Regexp literal with the 'u' option"
  fails "Regexp#options includes Regexp::NOENCODING for a Regexp literal with the 'n' option"
  fails "Regexp.escape sets the encoding of the result to ASCII-8BIT if any non-US-ASCII characters are present in an input String with invalid encoding"
  fails "Regexp.escape sets the encoding of the result to the encoding of the String if any non-US-ASCII characters are present in an input String with valid encoding"
  fails "Regexp.escape sets the encoding of the result to US-ASCII if there are only US-ASCII characters present in the input String"
  fails "Regexp.new given a String accepts a Fixnum of two or more options ORed together as the second argument"
  fails "Regexp.new given a String ignores the third argument if it is 'e' or 'euc' (case-insensitive)"
  fails "Regexp.new given a String ignores the third argument if it is 's' or 'sjis' (case-insensitive)"
  fails "Regexp.new given a String ignores the third argument if it is 'u' or 'utf8' (case-insensitive)"
  fails "Regexp.new given a String uses ASCII_8BIT encoding if third argument is 'n' or 'none' (case insensitive) and non-ascii characters"
  fails "Regexp.new given a String uses US_ASCII encoding if third argument is 'n' or 'none' (case insensitive) and only ascii characters"
  fails "Regexp.new given a String with escaped characters accepts a combination of escaped octal and hexadecimal digits and \\u{HHHH}"
  fails "Regexp.new given a String with escaped characters accepts characters followed by \\u{HHHH}"
  fails "Regexp.new given a String with escaped characters accepts escaped hexadecimal digits followed by \\u{HHHH}"
  fails "Regexp.new given a String with escaped characters accepts escaped octal digits followed by \\u{HHHH}"
  fails "Regexp.new given a String with escaped characters accepts \\u{HHHHHH} for a single Unicode codepoint"
  fails "Regexp.new given a String with escaped characters accepts \\u{HHHHH} for a single Unicode codepoint"
  fails "Regexp.new given a String with escaped characters accepts \\u{HHHH} followed by characters"
  fails "Regexp.new given a String with escaped characters accepts \\u{HHHH} for a single Unicode codepoint"
  fails "Regexp.new given a String with escaped characters accepts \\u{HHH} for a single Unicode codepoint"
  fails "Regexp.new given a String with escaped characters accepts \\u{HH} for a single Unicode codepoint"
  fails "Regexp.new given a String with escaped characters accepts \\u{H} for a single Unicode codepoint"
  fails "Regexp.new given a String with escaped characters raises a RegexpError if less than four digits are given for \\uHHHH"
  fails "Regexp.new given a String with escaped characters raises a RegexpError if the \\u{} escape is empty"
  fails "Regexp.new given a String with escaped characters returns a Regexp with source String having the input String's encoding"
  fails "Regexp.new given a String with escaped characters returns a Regexp with source String having US-ASCII encoding if only 7-bit ASCII characters are present regardless of the input String's encoding"
  fails "Regexp.new given a String with escaped characters returns a Regexp with source String having US-ASCII encoding if UTF-8 escape sequences using only 7-bit ASCII are present"
  fails "Regexp.new given a String with escaped characters returns a Regexp with source String having UTF-8 encoding if any UTF-8 escape sequences outside 7-bit ASCII are present"
  fails "Regexp.new given a String with escaped characters returns a Regexp with the input String's encoding"
  fails "Regexp.new given a String with escaped characters returns a Regexp with US-ASCII encoding if only 7-bit ASCII characters are present regardless of the input String's encoding"
  fails "Regexp.new given a String with escaped characters returns a Regexp with US-ASCII encoding if UTF-8 escape sequences using only 7-bit ASCII are present"
  fails "Regexp.new given a String with escaped characters returns a Regexp with UTF-8 encoding if any UTF-8 escape sequences outside 7-bit ASCII are present"
  fails "Regexp.quote sets the encoding of the result to ASCII-8BIT if any non-US-ASCII characters are present in an input String with invalid encoding"
  fails "Regexp.quote sets the encoding of the result to the encoding of the String if any non-US-ASCII characters are present in an input String with valid encoding"
  fails "Regexp.quote sets the encoding of the result to US-ASCII if there are only US-ASCII characters present in the input String"
  fails "Regexp.union raises ArgumentError if the arguments include a fixed encoding Regexp and a String containing non-ASCII-compatible characters in a different encoding"
  fails "Regexp.union raises ArgumentError if the arguments include a String containing non-ASCII-compatible characters and a fixed encoding Regexp in a different encoding"
  fails "Regexp.union raises ArgumentError if the arguments include an ASCII-incompatible Regexp and a Regexp containing non-ASCII-compatible characters in a different encoding"
  fails "Regexp.union raises ArgumentError if the arguments include an ASCII-incompatible Regexp and a String containing non-ASCII-compatible characters in a different encoding"
  fails "Regexp.union raises ArgumentError if the arguments include an ASCII-incompatible Regexp and an ASCII-only Regexp"
  fails "Regexp.union raises ArgumentError if the arguments include an ASCII-incompatible Regexp and an ASCII-only String"
  fails "Regexp.union raises ArgumentError if the arguments include an ASCII-incompatible String and a Regexp containing non-ASCII-compatible characters in a different encoding"
  fails "Regexp.union raises ArgumentError if the arguments include an ASCII-incompatible String and a String containing non-ASCII-compatible characters in a different encoding"
  fails "Regexp.union raises ArgumentError if the arguments include an ASCII-incompatible String and an ASCII-only Regexp"
  fails "Regexp.union raises ArgumentError if the arguments include an ASCII-incompatible String and an ASCII-only String"
  fails "Regexp.union raises ArgumentError if the arguments include conflicting ASCII-incompatible Regexps"
  fails "Regexp.union raises ArgumentError if the arguments include conflicting fixed encoding Regexps"
  fails "Regexp.union returns a Regexp with the encoding of a String containing non-ASCII-compatible characters and another ASCII-only String"
  fails "Regexp.union returns a Regexp with the encoding of a String containing non-ASCII-compatible characters"
  fails "Regexp.union returns a Regexp with the encoding of an ASCII-incompatible String argument"
  fails "Regexp.union returns a Regexp with the encoding of multiple non-conflicting ASCII-incompatible String arguments"
  fails "Regexp.union returns a Regexp with the encoding of multiple non-conflicting Strings containing non-ASCII-compatible characters"
  fails "Regexp.union returns a Regexp with US-ASCII encoding if all arguments are ASCII-only"
  fails "Regexp.union returns a Regexp with UTF-8 if one part is UTF-8"
  fails "Regexp#source has US-ASCII encoding when created from an ASCII-only \\u{} literal"
  fails "Regexp#source has UTF-8 encoding when created from a non-ASCII-only \\u{} literal"
  fails "Regexp#to_s displays options if included"
  fails "Regexp#to_s displays groups with options"
  fails "Regexp#to_s displays single group with same options as main regex as the main regex"
  fails "Regexp#to_s deals properly with uncaptured groups"
  fails "Regexp#to_s handles abusive option groups"
  fails "Regexp.try_convert returns the argument if given a Regexp"
  fails "Regexp with character classes doesn't match non-ASCII characters with [[:ascii:]]"
end
