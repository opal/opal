opal_unsupported_filter "taint" do
  fails "Hash#reject with extra state does not taint the resulting hash"
  fails "Kernel#inspect returns a tainted string if self is tainted"
  fails "Module#append_features copies own tainted status to the given module"
  fails "Module#append_features copies own untrusted status to the given module"
  fails "Module#extend_object does not copy own tainted status to the given object"
  fails "Module#extend_object does not copy own untrusted status to the given object"
  fails "Module#prepend_features copies own tainted status to the given module"
  fails "Module#prepend_features copies own untrusted status to the given module"
  fails "String#% doesn't taint the result for %E when argument is tainted"
  fails "String#% doesn't taint the result for %G when argument is tainted"
  fails "String#% doesn't taint the result for %e when argument is tainted"
  fails "String#% doesn't taint the result for %f when argument is tainted"
  fails "String#% doesn't taint the result for %g when argument is tainted"
  fails "String#[] with Regexp always taints resulting strings when self or regexp is tainted"
  fails "String#[] with Regexp returns an untrusted string if the regexp is untrusted"
  fails "String#byteslice with Range always taints resulting strings when self is tainted"
  fails "String#byteslice with index, length always taints resulting strings when self is tainted"
  fails "String#dump taints the result if self is tainted"
  fails "String#slice with Regexp always taints resulting strings when self or regexp is tainted"
  fails "String#slice with Regexp returns an untrusted string if the regexp is untrusted"
  fails "StringScanner#getbyte taints the returned String if the input was tainted"
  fails "StringScanner#getch taints the returned String if the input was tainted"
  fails "StringScanner#matched taints the returned String if the input was tainted"
  fails "StringScanner#peek taints the returned String if the input was tainted"
  fails "StringScanner#peep taints the returned String if the input was tainted"
  fails "StringScanner#post_match taints the returned String if the input was tainted"
  fails "StringScanner#pre_match taints the returned String if the input was tainted"
  fails "StringScanner#rest taints the returned String if the input was tainted"
  fails "Array#pack with format 'a' returns a tainted string when a pack argument is tainted"
  fails "Array#pack with format 'a' returns a tainted string when an empty format is tainted"
  fails "Array#pack with format 'a' returns a tainted string when the format is tainted"
  fails "Array#pack with format 'a' returns a trusted string when the array is untrusted"
  fails "Array#pack with format 'a' returns a untrusted string when a pack argument is untrusted"
  fails "Array#pack with format 'a' returns a untrusted string when the empty format is untrusted"
  fails "Array#pack with format 'a' returns a untrusted string when the format is untrusted"
  fails "Array#pack with format 'a' taints the output string if the format string is tainted"
  fails "Array#pack with format 'A' returns a tainted string when a pack argument is tainted"
  fails "Array#pack with format 'A' returns a tainted string when an empty format is tainted"
  fails "Array#pack with format 'A' returns a tainted string when the format is tainted"
  fails "Array#pack with format 'A' returns a trusted string when the array is untrusted"
  fails "Array#pack with format 'A' returns a untrusted string when a pack argument is untrusted"
  fails "Array#pack with format 'A' returns a untrusted string when the empty format is untrusted"
  fails "Array#pack with format 'A' returns a untrusted string when the format is untrusted"
  fails "Array#pack with format 'A' taints the output string if the format string is tainted"
  fails "Array#pack with format 'C' taints the output string if the format string is tainted"
  fails "Array#pack with format 'c' taints the output string if the format string is tainted"
end
