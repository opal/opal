opal_filter "Enumerable" do
  fails "Enumerable#cycle passed a number n as an argument raises an ArgumentError if more arguments are passed"
  fails "Enumerable#each_cons gathers whole arrays as elements when each yields multiple"
  fails "Enumerable#each_cons passes element groups to the block"
  fails "Enumerable#each_cons raises an Argument Error if there is not a single parameter > 0"
  fails "Enumerable#each_cons tries to convert n to an Integer using #to_int"
  fails "Enumerable#each_cons when no block is given Enumerable with no size when no block is given returned Enumerator size returns nil"
  fails "Enumerable#each_cons when no block is given Enumerable with size returned Enumerator size returns 0 when the argument is larger than self"
  fails "Enumerable#each_cons when no block is given Enumerable with size returned Enumerator size returns 0 when the enum is empty"
  fails "Enumerable#each_cons when no block is given Enumerable with size returned Enumerator size returns enum size - each_cons argument + 1"
  fails "Enumerable#each_cons when no block is given returns an enumerator"
  fails "Enumerable#each_cons works when n is >= full length"
  fails "Enumerable#each_cons yields only as much as needed"
  fails "Enumerable#each_entry Enumerable with no size when no block is given returned Enumerator size returns nil"
  fails "Enumerable#each_entry Enumerable with size when no block is given returned Enumerator size returns the enumerable size"
  fails "Enumerable#each_entry passes extra arguments to #each"
  fails "Enumerable#each_entry passes through the values yielded by #each_with_index"
  fails "Enumerable#each_entry returns an enumerator if no block"
  fails "Enumerable#each_entry yields multiple arguments as an array"
  fails "Enumerable#first raises a RangeError when passed a Bignum"
  fails "Enumerable#minmax gathers whole arrays as elements when each yields multiple"
  fails "Enumerable#minmax min should return the minimum element"
  fails "Enumerable#minmax raises a NoMethodError for elements without #<=>"
  fails "Enumerable#minmax raises an ArgumentError when elements are incomparable"
  fails "Enumerable#minmax returns [nil, nil] for an empty Enumerable"
  fails "Enumerable#minmax returns the minimum when using a block rule"
  fails "Enumerable#minmax_by Enumerable with no size when no block is given returned Enumerator size returns nil"
  fails "Enumerable#minmax_by Enumerable with size when no block is given returned Enumerator size returns the enumerable size"
  fails "Enumerable#minmax_by gathers whole arrays as elements when each yields multiple"
  fails "Enumerable#minmax_by is able to return the maximum for enums that contain nils"
  fails "Enumerable#minmax_by returns an enumerator if no block"
  fails "Enumerable#minmax_by returns nil if #each yields no objects"
  fails "Enumerable#minmax_by returns the object for whom the value returned by block is the largest"
  fails "Enumerable#minmax_by returns the object that appears first in #each in case of a tie"
  fails "Enumerable#minmax_by uses min/max.<=>(current) to determine order"
  fails "Enumerable#reverse_each gathers whole arrays as elements when each yields multiple"
  fails "Enumerable#sort compare values returned by block with 0"
  fails "Enumerable#sort raises an error if objects can't be compared"
  fails "Enumerable#take_while calls the block with initial args when yielded with multiple arguments"
  fails "Enumerable#to_h calls #to_ary on contents"
  fails "Enumerable#to_h converts empty enumerable to empty hash"
  fails "Enumerable#to_h converts yielded [key, value] pairs to a hash"
  fails "Enumerable#to_h forwards arguments to #each"
  fails "Enumerable#to_h raises ArgumentError if an element is not a [key, value] pair"
  fails "Enumerable#to_h raises TypeError if an element is not an array"
  fails "Enumerable#to_h uses the last value of a duplicated key"
  fails "Enumerable#zip converts arguments to enums using #to_enum"
  fails "Enumerable#zip gathers whole arrays as elements when each yields multiple"
  fails "Enumerable#zip passes each element of the result array to a block and return nil if a block is given"
  fails "Enumerator#size returns the result from size.call if the size respond to call "
end
