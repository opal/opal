opal_filter "Exception" do
  fails "Errno::EAGAIN is the same class as Errno::EWOULDBLOCK if they represent the same errno value"
  fails "Errno::EINVAL.new accepts an optional custom message and location"
  fails "Errno::EINVAL.new accepts an optional custom message"
  fails "Errno::EINVAL.new can be called with no arguments"
  fails "Errno::EMFILE can be subclassed"
  fails "Exception is a superclass of EncodingError"
  fails "Exception is a superclass of Interrupt"
  fails "Exception is a superclass of SystemStackError"
  fails "Exception#== returns false if the two exceptions differ only in their backtrace"
  fails "Exception#== returns false if the two exceptions differ only in their message"
  fails "Exception#== returns false if the two exceptions inherit from Exception but have different classes"
  fails "Exception#== returns true if both exceptions have the same class, no message, and no backtrace"
  fails "Exception#== returns true if both exceptions have the same class, the same message, and no backtrace"
  fails "Exception#== returns true if both exceptions have the same class, the same message, and the same backtrace"
  fails "Exception#== returns true if one exception is the dup'd copy of the other"
  fails "Exception#== returns true if the two objects subclass Exception and have the same message and backtrace"
  fails "Exception#backtrace contains lines of the same format for each prior position in the stack"
  fails "Exception#backtrace includes the filename of the location immediately prior to where self raised in the second element"
  fails "Exception#backtrace includes the filename of the location where self raised in the first element"
  fails "Exception#backtrace includes the line number of the location immediately prior to where self raised in the second element"
  fails "Exception#backtrace includes the line number of the location where self raised in the first element"
  fails "Exception#backtrace includes the name of the method from where self raised in the first element"
  fails "Exception#backtrace returns nil if no backtrace was set"
  fails "Exception#set_backtrace accepts a String"
  fails "Exception#set_backtrace accepts an Array of Strings"
  fails "Exception#set_backtrace accepts an empty Array"
  fails "Exception#set_backtrace accepts nil"
  fails "Exception#set_backtrace allows the user to set the backtrace from a rescued exception"
  fails "Exception#set_backtrace raises a TypeError when passed a Symbol"
  fails "Exception#set_backtrace raises a TypeError when the Array contains a Symbol"
  fails "Exception#set_backtrace raises a TypeError when the argument is a nested array"
  fails "Exception#set_backtrace raises a TypeError when the array contains nil"
  fails "IOError is a superclass of EOFError"
  fails "NameError#name returns a class variable name as a symbol"
  fails "NoMethodError#message for an protected method match /protected method/"
  fails "NoMethodError#message for private method match /private method/"
  fails "SignalException.new raises an exception for an optional argument with a signal name"
  fails "SignalException.new raises an exception with an invalid signal name"
  fails "SignalException.new raises an exception with an invalid signal number"
  fails "SignalException.new takes a signal name with SIG prefix as the first argument"
  fails "SignalException.new takes a signal name without SIG prefix as the first argument"
  fails "SignalException.new takes a signal number as the first argument"
  fails "SignalException.new takes a signal symbol with SIG prefix as the first argument"
  fails "SignalException.new takes a signal symbol without SIG prefix as the first argument"
  fails "SignalException.new takes an optional message argument with a signal number"
  fails "StopIteration#result returns the method-returned-object from an Enumerator"
  fails "SystemCallError#errno returns nil when no errno given"
  fails "SystemCallError#errno returns the errno given as optional argument to new"
  fails "SystemCallError#message returns the default message when no message is given"
  fails "SystemCallError.new accepts an optional custom message preceding the errno"
  fails "SystemCallError.new accepts an optional third argument specifying the location"
  fails "SystemCallError.new accepts single Fixnum argument as errno"
  fails "SystemCallError.new constructs the appropriate Errno class"
  fails "SystemCallError.new requires at least one argument"
  fails "SystemStackError is a subclass of Exception"
  fails "rescueing SignalException raises a SignalException when sent a signal"
  fails "NameError#receiver returns a class when an undefined class variable is called in a subclass' namespace"
  fails "NameError#receiver returns a class when an undefined constant is called"
  fails "NameError#receiver returns the Object class when an undefined class variable is called"
  fails "NameError#receiver returns the Object class when an undefined constant is called without namespace"
  fails "NameError#receiver returns the object that raised the exception"
  fails "NameError#receiver returns the receiver when raised from #class_variable_get"
  fails "NameError#receiver returns the receiver when raised from #instance_variable_get"
end
