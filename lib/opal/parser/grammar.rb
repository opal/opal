#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'
module Opal
  class Parser < Racc::Parser


##### State transition tables begin ###

clist = [
'64,65,66,8,52,598,258,568,58,59,-479,258,598,62,258,60,61,63,28,29,67',
'68,-95,467,-103,98,642,27,26,25,91,90,92,93,560,547,18,559,109,677,-102',
'-87,7,42,6,9,95,94,85,51,87,86,88,-98,89,96,97,598,82,83,-95,39,40,-94',
'-100,-70,677,206,207,620,206,207,676,-103,-97,253,560,102,253,562,206',
'207,101,37,598,-102,31,641,598,53,257,55,-95,33,196,257,-103,41,257',
'676,-102,-82,206,207,-99,19,197,-87,-98,567,80,74,76,77,78,79,102,198',
'597,75,81,101,-100,102,-87,597,-94,57,101,-94,54,64,65,66,673,52,38',
'84,205,58,59,-97,-93,-87,62,-101,60,61,63,28,29,67,68,-87,311,-89,841',
'311,27,26,25,91,90,92,93,-94,-91,18,102,-571,597,944,619,101,42,-94',
'-88,95,94,85,51,87,86,88,805,89,96,97,-99,82,83,102,39,40,-93,102,101',
'597,247,102,101,597,302,-95,101,-95,-90,-103,-95,-103,-572,-102,-103',
'-102,211,303,-102,215,216,-98,53,-98,55,-101,-98,-467,630,311,41,759',
'759,-89,-467,-100,-96,-100,19,399,-100,677,677,80,74,76,77,78,79,-92',
'206,207,75,81,-97,-91,-97,759,-88,-97,57,402,-93,54,64,65,66,-571,52',
'38,84,102,58,59,676,676,101,62,-90,60,61,63,28,29,67,68,-92,632,631',
'628,817,27,26,25,91,90,92,93,-93,-89,220,-99,-572,-99,704,630,-99,42',
'-93,74,95,94,85,51,87,86,88,75,89,96,97,-91,82,83,-88,39,40,228,102',
'102,758,758,204,101,101,-89,-101,102,-101,413,-98,-101,101,-571,-90',
'-89,630,211,206,207,215,-572,-92,53,102,55,758,-91,225,101,-88,41,227',
'226,632,631,604,-91,605,219,-88,818,-94,799,80,74,76,77,78,79,-90,426',
'-103,75,81,912,-470,913,-92,-479,-90,57,466,-470,54,64,65,66,-92,52',
'38,84,-477,58,59,632,631,628,62,-477,60,61,63,28,29,67,68,560,-569,468',
'562,-100,27,26,25,91,90,92,93,-87,469,220,249,250,216,-96,665,-97,42',
'-95,251,95,94,85,51,87,86,88,274,89,96,97,630,82,83,502,39,40,228,232',
'237,238,239,234,236,244,245,240,241,-470,-470,221,222,517,102,242,243',
'-470,211,101,630,215,-569,635,53,228,55,519,271,225,269,231,41,227,226',
'223,224,235,233,229,219,230,-569,304,305,80,272,76,77,78,79,632,631',
'633,75,81,225,246,547,-238,227,226,57,-476,-470,54,-470,275,340,-475',
'-476,38,84,64,65,66,-475,52,337,632,631,58,59,844,560,605,62,562,60',
'61,63,28,29,67,68,521,311,-69,-93,1006,27,26,25,91,90,92,93,423,-102',
'220,355,354,425,424,665,529,42,411,412,95,94,85,51,87,86,88,274,89,96',
'97,630,82,83,530,39,40,228,232,237,238,239,234,236,244,245,240,241,338',
'531,221,222,-472,540,242,243,340,211,630,-472,215,542,543,53,262,55',
'337,271,225,269,231,41,227,226,223,224,235,233,229,219,230,206,207,311',
'80,272,76,77,78,79,632,631,637,75,81,-473,246,652,355,354,-474,57,-473',
'253,54,544,275,-474,625,548,38,84,64,65,66,626,52,632,631,643,58,59',
'355,354,549,62,228,60,61,63,28,29,67,68,311,338,563,-89,564,27,26,25',
'91,90,92,93,102,-98,220,203,201,101,653,870,844,42,521,202,95,94,85',
'51,87,86,88,274,89,96,97,571,82,83,574,39,40,102,575,228,804,586,101',
'347,345,344,586,346,347,345,344,102,346,578,-91,579,101,211,870,844',
'215,581,583,53,-100,55,199,271,200,269,225,41,593,594,227,226,223,224',
'415,219,-88,610,611,612,80,272,76,77,78,79,-97,636,640,75,81,-337,-337',
'644,647,-269,649,57,650,-337,54,651,275,253,664,228,38,84,64,65,66,8',
'52,752,228,228,58,59,936,228,311,62,688,60,61,63,28,29,67,68,104,105',
'106,107,108,27,26,25,91,90,92,93,689,697,18,706,-337,-82,-337,707,7',
'42,709,9,95,94,85,51,87,86,88,553,89,96,97,720,82,83,726,39,40,727,586',
'728,347,345,344,586,346,347,345,344,340,346,902,903,733,747,904,96,97',
'37,337,748,281,228,750,53,754,55,967,33,347,345,344,41,346,605,203,462',
'589,762,801,19,-270,349,463,592,80,74,76,77,78,79,355,354,225,75,81',
'502,227,226,223,224,502,57,502,820,54,64,65,66,821,52,38,84,828,58,59',
'830,831,519,62,521,60,61,63,295,296,67,68,338,720,465,838,464,291,292',
'298,91,90,92,93,253,253,220,539,536,839,253,720,228,293,228,537,95,94',
'85,51,87,86,88,844,89,96,97,850,82,83,851,330,852,347,345,344,340,346',
'854,539,550,104,105,106,107,108,337,551,586,578,347,345,344,289,346',
'857,286,859,854,53,863,55,535,285,538,866,844,874,875,349,325,104,105',
'106,107,108,352,351,355,354,80,74,76,77,78,79,589,877,878,75,81,-571',
'880,592,465,889,464,57,578,892,54,64,65,66,894,52,299,84,896,58,59,898',
'900,-271,62,338,60,61,63,295,296,67,68,915,916,311,918,919,291,292,298',
'91,90,92,93,920,922,220,539,607,923,720,925,-269,293,929,608,95,94,85',
'51,87,86,88,-572,89,96,97,938,82,83,939,330,941,347,345,344,340,346',
'947,949,950,539,616,311,963,-272,337,969,586,614,347,345,344,289,346',
'971,215,854,980,53,854,55,606,854,609,984,938,987,988,349,993,570,578',
'995,997,999,352,351,355,354,80,74,76,77,78,79,589,1001,1001,75,81,1011',
'938,865,301,1019,615,57,538,726,54,64,65,66,854,52,299,84,938,58,59',
'1034,1035,1001,62,338,60,61,63,295,296,67,68,1001,1001,1040,1041,1001',
'291,292,298,91,90,92,93,,,220,539,616,,,,,42,,746,95,94,85,51,87,86',
'88,,89,96,97,,82,83,,39,40,,586,,347,345,344,586,346,347,345,344,340',
'346,967,,347,345,344,,346,211,337,,215,,,53,,55,615,,538,,,41,,,-290',
'-290,589,,,219,,349,-290,,80,74,76,77,78,79,355,354,,75,81,,,,,,,57',
',,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,338,,-290',
',-290,291,292,298,91,90,92,93,,,220,539,616,,,,,42,,746,95,94,85,51',
'87,86,88,,89,96,97,,82,83,,39,40,,586,,347,345,344,586,346,347,345,344',
'340,346,,,,,,,,211,337,,215,,,53,,55,615,,538,,,41,,,-292,-292,589,',
',219,,349,-292,,80,74,76,77,78,79,355,354,,75,81,,,,,,,57,,,54,64,65',
'66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,338,,-292,,-292,291',
'292,298,91,90,92,93,,,220,539,1009,,,,,42,,1010,95,94,85,51,87,86,88',
',89,96,97,,82,83,,39,40,,228,,,,,586,,347,345,344,340,346,,,,,,242,243',
'211,337,,215,,,53,,55,1008,,609,225,,41,,227,226,223,224,,,219,,349',
',,80,74,76,77,78,79,355,354,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84',
',58,59,,,,62,,60,61,63,28,29,67,68,338,,,,,27,26,25,91,90,92,93,,,18',
',586,,347,345,344,42,346,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39',
'40,228,586,,347,345,344,586,346,347,345,344,340,346,589,,,,242,243,',
'211,337,,215,,,53,,55,,,225,,231,41,227,226,223,224,589,,229,19,230',
'349,,,80,74,76,77,78,79,355,354,,75,81,,,,,,,57,,,54,64,65,66,,52,38',
'84,,58,59,,,,62,,60,61,63,28,29,67,68,338,,,,,27,26,25,91,90,92,93,',
',220,,,,,,,42,,,95,94,85,51,87,86,88,274,89,96,97,,82,83,,39,40,228',
'232,237,238,239,234,236,244,245,240,241,-289,-289,221,222,,,242,243',
'-289,211,,,215,-572,,53,,55,,271,225,,231,41,227,226,223,224,235,233',
'229,219,230,,,,80,272,76,77,78,79,,,,75,81,,246,,-238,,,57,,-289,54',
'-289,275,,,,38,84,64,65,66,,52,,,,58,59,,,,62,,60,61,63,295,296,67,68',
',,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,274',
'89,96,97,,82,83,,39,40,228,232,237,238,239,234,236,244,245,240,241,',
',221,222,,,242,243,,211,,,215,,,53,,55,,,225,,231,41,227,226,223,224',
'235,233,229,219,230,,,,80,272,76,77,78,79,,,,75,81,,246,822,,,,57,,',
'54,,275,,,,38,84,64,65,66,,52,,,,58,59,,,,62,,60,61,63,28,29,67,68,',
',,,,27,26,25,91,90,92,93,,,18,,586,,347,345,344,42,346,,95,94,85,51',
'87,86,88,,89,96,97,,82,83,,39,40,228,,,,,,586,,347,345,344,340,346,589',
',,,242,243,,211,337,,215,,,53,,55,,,225,,231,41,227,226,223,224,,,229',
'19,230,349,,,80,74,76,77,78,79,355,354,,75,81,,,,,,,57,,,54,64,65,66',
',52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,338,,,,,27,26,25,91,90',
'92,93,,,18,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228',
',,,,,586,,347,345,344,340,346,,,,,242,243,,211,337,,215,,,53,,55,,,225',
',231,41,227,226,223,224,,,229,19,230,349,,,80,74,76,77,78,79,355,354',
',75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,28,29',
'67,68,338,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,85,51,87,86',
'88,,89,96,97,,82,83,,39,40,228,,,,,,586,,347,345,344,340,346,,,,,242',
'243,,211,337,,215,,,53,,55,,,225,,231,41,227,226,223,224,,,229,19,230',
'349,,,80,74,76,77,78,79,355,354,,75,81,102,,,,,101,57,,,54,64,65,66',
',52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,338,,,,,291,292,298,91',
'90,92,93,,,220,,,,,,,293,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,330',
',347,345,344,340,346,,,,,,,,,337,,,,,,,367,,,31,,,53,,55,,33,,,,,,349',
',,,,,,352,351,355,354,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65',
'66,,52,299,84,,58,59,,,,62,338,60,61,63,295,296,67,68,,,,,,291,292,298',
'91,90,92,93,,,220,,,,,,,293,,,95,94,85,51,87,86,372,,89,96,97,228,82',
'83,,330,,347,345,344,340,346,,,,,,,242,243,337,,,,378,,,373,,,215,,225',
'53,231,55,227,226,223,224,,,,349,,,,,,,352,351,355,354,80,74,76,77,78',
'79,,,,75,81,,,,,,,57,,,54,-568,-568,-568,,-568,299,84,,-568,-568,,,',
'-568,338,-568,-568,-568,-568,-568,-568,-568,,-568,,,,-568,-568,-568',
'-568,-568,-568,-568,,,-568,,,,,,,-568,,,-568,-568,-568,-568,-568,-568',
'-568,-568,-568,-568,-568,,-568,-568,,-568,-568,228,232,237,238,239,234',
'236,244,245,240,241,,,221,222,,,242,243,,-568,,,-568,-568,,-568,,-568',
',-568,225,-568,231,-568,227,226,223,224,235,233,229,-568,230,-568,,',
'-568,-568,-568,-568,-568,-568,,,,-568,-568,,246,,,,,-568,,,-568,,-568',
',,,-568,-568,-569,-569,-569,,-569,,,,-569,-569,,,,-569,,-569,-569,-569',
'-569,-569,-569,-569,,-569,,,,-569,-569,-569,-569,-569,-569,-569,,,-569',
',,,,,,-569,,,-569,-569,-569,-569,-569,-569,-569,-569,-569,-569,-569',
',-569,-569,,-569,-569,228,232,237,238,239,234,236,244,245,240,241,,',
'221,222,,,242,243,,-569,,,-569,-569,,-569,,-569,,-569,225,-569,231,-569',
'227,226,223,224,235,233,229,-569,230,-569,,,-569,-569,-569,-569,-569',
'-569,,,,-569,-569,,246,,,,,-569,,,-569,,-569,,,,-569,-569,64,65,66,8',
'52,,,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,',
'18,,,,,,7,42,6,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228,,',
',,,586,,347,345,344,340,346,,,,,242,243,,37,337,,31,,,53,,55,,33,225',
',231,41,227,226,223,224,,,,19,,349,,,80,74,76,77,78,79,355,354,,75,81',
',,,,,415,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,28,29,67',
'68,338,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,85,51,87,86,88',
',89,96,97,,82,83,,39,40,,,,,,,586,,347,345,344,340,346,,,,,,,,211,337',
',215,,,53,,55,,,,,,41,,,,,,,,19,,349,,,80,74,76,77,78,79,355,354,,75',
'81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,28,29,67',
'68,338,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,85,51,87,86,88',
',89,96,97,,82,83,,39,40,228,232,237,238,239,234,236,244,245,240,241',
',,221,222,,,242,243,,211,,,215,,,53,,55,,,225,,231,41,227,226,223,224',
'235,233,229,19,230,,,,80,74,76,77,78,79,,,,75,81,,246,,,,,57,,,54,64',
'65,66,,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91',
'90,92,93,,,18,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40',
'228,232,237,238,239,234,236,244,245,240,241,,,221,222,,,242,243,,211',
',,215,,,53,,55,,,225,,231,41,227,226,223,224,235,233,229,19,230,,,,80',
'74,76,77,78,79,,,,75,81,,246,,,,,57,,,54,64,65,66,,52,38,84,,58,59,',
',,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,',
',95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228,232,237,238,239,234',
'236,244,245,240,241,,,221,222,,,242,243,,211,,,215,,,53,,55,,,225,,231',
'41,227,226,223,224,235,233,229,19,230,,,,80,74,76,77,78,79,,,,75,81',
',246,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,28,29,67',
'68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88',
',89,96,97,,82,83,,39,40,228,232,237,238,239,234,236,244,245,240,241',
',,221,222,,,242,243,,37,,,31,,,53,,55,,33,225,,231,41,227,226,223,224',
'235,233,229,19,230,,,,80,74,76,77,78,79,,,,75,81,,246,,,,,57,,,54,64',
'65,66,8,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91',
'90,92,93,,,18,,,,,,7,42,6,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39',
'40,228,232,237,238,239,234,236,244,245,240,241,,,221,222,,,242,243,',
'37,,,31,,,53,,55,,33,225,,231,41,227,226,223,224,235,233,229,19,230',
',,,80,74,76,77,78,79,,,,75,81,,246,,,,,57,,,54,64,65,66,8,52,38,84,',
'58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,',
',,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228,232,237,238',
'239,234,236,244,245,240,241,,,221,222,,,242,243,,37,,,31,,,53,,55,,33',
'225,,231,41,227,226,223,224,235,233,229,19,230,,,,80,74,76,77,78,79',
',,,75,81,,246,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63',
'28,29,67,68,,,,,,27,26,25,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87',
'86,88,,89,96,97,,82,83,,39,40,228,232,237,238,239,234,236,244,245,240',
'241,,,221,222,,,242,243,,211,,,215,,,53,,55,,431,225,,231,41,227,226',
'223,224,235,233,229,219,230,,,,80,74,76,77,78,79,,,,75,81,,246,,,,,57',
',,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26',
'25,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83',
',39,40,228,232,237,238,239,234,236,244,245,240,241,,,221,222,,,242,243',
',211,,,215,,,53,,55,,,225,,231,41,227,226,223,224,235,233,229,219,230',
',,,80,74,76,77,78,79,,,,75,81,,246,,,,,57,,,54,64,65,66,,52,38,84,,58',
'59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,220,,,,,',
',42,,,95,94,85,51,87,86,88,274,89,96,97,,82,83,,39,40,228,232,237,238',
'239,234,236,244,245,240,241,,,221,222,,,242,243,,211,,,215,,,53,,55',
',271,225,,231,41,227,226,223,224,235,233,229,219,230,,,,80,272,76,77',
'78,79,,,,75,81,,246,,,,,57,,,54,,275,,,,38,84,64,65,66,,52,,,,58,59',
',,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,220,,,,,,,42',
',,95,94,85,51,87,86,88,274,89,96,97,,82,83,,39,40,228,232,237,238,239',
'234,236,244,245,240,241,,,221,222,,,242,243,,211,,,215,,,53,,55,,271',
'225,,231,41,227,226,223,224,235,233,229,219,230,,,,80,272,76,77,78,79',
',,,75,81,,246,,,,,57,,,54,,275,,,,38,84,64,65,66,,52,,,,58,59,,,,62',
',60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,220,,,,,,,42,,,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228,232,237,238,239,234,236',
'244,245,240,241,,,221,222,,,242,243,,211,,,215,,,53,,55,,,225,,231,41',
'227,226,223,224,235,233,229,219,230,,,,80,74,76,77,78,79,,,,75,81,,246',
',,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,',
',,,27,26,25,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96',
'97,,82,83,,39,40,228,232,237,238,239,234,236,244,245,240,241,,,221,222',
',,242,243,,211,,,215,,,53,,55,,431,225,,231,41,227,226,223,224,235,233',
'229,219,230,,,,80,74,76,77,78,79,,,,75,81,,246,,,,,57,,,54,64,65,66',
',52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92',
'93,,,18,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228',
'232,237,238,239,234,236,244,245,240,241,,,-592,-592,,,242,243,,211,',
',215,,,53,,55,,,225,,231,41,227,226,223,224,235,233,229,19,230,,,,80',
'74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62',
',60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94',
'85,51,87,86,88,,89,96,97,,82,83,,39,40,228,232,237,238,239,234,236,244',
'245,240,241,,,-592,-592,,,242,243,,211,,,215,,,53,,55,,,225,,231,41',
'227,226,223,224,235,233,229,19,230,,,,80,74,76,77,78,79,,,,75,81,,,',
',,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,',
',,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96',
'97,,82,83,,39,40,228,-592,-592,-592,-592,234,236,,,-592,-592,,,,,,,242',
'243,,37,,,31,,,53,,55,,33,225,,231,41,227,226,223,224,235,233,229,19',
'230,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,',
'58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,',
',,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228,-592,-592,-592',
'-592,234,236,,,-592,-592,,,,,,,242,243,,211,,,215,,471,53,,55,,,225',
',231,41,227,226,223,224,235,233,229,19,230,,,,80,74,76,77,78,79,,,,75',
'81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67',
'68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88',
',89,96,97,,82,83,,39,40,228,-592,-592,-592,-592,234,236,,,-592,-592',
',,,,,,242,243,,211,,,215,,,53,,55,,,225,,231,41,227,226,223,224,235',
'233,229,219,230,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66',
',52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90',
'92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40',
'228,-592,-592,-592,-592,234,236,,,-592,-592,,,,,,,242,243,,211,,,215',
',,53,,55,,,225,,231,41,227,226,223,224,235,233,229,219,230,,,,80,74',
'76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,',
'60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,',
',95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228,-592,-592,-592,-592',
'234,236,,,-592,-592,,,,,,,242,243,,211,,,215,,,53,,55,,,225,,231,41',
'227,226,223,224,235,233,229,219,230,,,,80,74,76,77,78,79,,,,75,81,,',
',,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68',
',,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,',
'89,96,97,,82,83,,39,40,228,-592,-592,-592,-592,234,236,,,-592,-592,',
',,,,,242,243,,211,,,215,,,53,,55,,,225,,231,41,227,226,223,224,235,233',
'229,219,230,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52',
'38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92',
'93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228',
'232,237,238,239,234,236,,,240,241,,,,,,,242,243,,211,,,215,,,53,,55',
',,225,,231,41,227,226,223,224,235,233,229,219,230,,,,80,74,76,77,78',
'79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63',
'295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85',
'51,87,86,88,,89,96,97,,82,83,,39,40,228,232,237,238,239,234,236,244',
',240,241,,,,,,,242,243,,211,,,215,,,53,,55,,,225,,231,41,227,226,223',
'224,235,233,229,219,230,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54',
'64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292',
'298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82',
'83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219',
',,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58',
'59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220',
',,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,',
',,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79',
',,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295',
'296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51',
'87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53',
',55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54',
'64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292',
'298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82',
'83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219',
',,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58',
'59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220',
',,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,',
',,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79',
',,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295',
'296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51',
'87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53',
',55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54',
'64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292',
'298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82',
'83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219',
',,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58',
'59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220',
',,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,',
',,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79',
',,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295',
'296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51',
'87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53',
',55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54',
'64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292',
'298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82',
'83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219',
',,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58',
'59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220',
',,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,',
',,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79',
',,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295',
'296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51',
'87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53',
',55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54',
'64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292',
'298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82',
'83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219',
',,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58',
'59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220',
',,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,',
',,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79',
',,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295',
'296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51',
'87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53',
',55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54',
'64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292',
'298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82',
'83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219',
',,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58',
'59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220',
',,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,',
',,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79',
',,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295',
'296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51',
'87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53',
',55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54',
'64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292',
'298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82',
'83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219',
',,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58',
'59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220',
',,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,',
',,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79',
',,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,28',
'29,67,68,,,,,,27,26,25,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86',
'88,274,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55',
',271,,269,,41,,,,,,,,219,,,,,80,272,76,77,78,79,,,,75,81,,,,,,,57,,',
'54,,275,,,,38,84,64,65,66,,52,,,,58,59,,,,62,,60,61,63,28,29,67,68,',
',,,,27,26,25,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,274,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,511,,55,,271,,269',
',41,,,,,,,,219,,,,,80,272,76,77,78,79,,,,75,81,,,,,,,57,,,54,,275,,',
',38,84,64,65,66,,52,,,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26',
'25,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,274,89,96,97,,82',
'83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,515,53,,55,,271,,269,,41,,',
',,,,,219,,,,,80,272,76,77,78,79,,,,75,81,,,,,,,57,,,54,,275,,,,38,84',
'64,65,66,,52,,,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298',
'91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,',
'39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,',
'80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,',
',,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,',
',,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,',
',,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75',
'81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67',
'68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88',
',89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,',
'41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66',
',52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90',
'92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40',
',,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74',
'76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62',
',60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,281',
',,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57',
',,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291',
'292,298,91,90,92,93,,,220,,,,,,,293,,,95,94,85,51,87,86,88,,89,96,97',
',82,83,,793,,347,345,344,340,346,,,,,,,,,337,,,,,,,289,,,215,,,53,,55',
',,,,,,,349,782,,,,,,352,351,355,354,80,74,76,77,78,79,,,,75,81,,,,533',
',,57,,,54,64,65,66,8,52,299,84,,58,59,,,,62,338,60,61,63,28,29,67,68',
',,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,281,,,53,,55,,33,,,,41',
',,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52',
'38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92',
'93,,,220,,,,,,,293,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,330,,347',
'345,344,340,346,,,,,,,,,337,,,,,,,289,,,286,,,53,,55,,,,,,,,349,,,,',
',,352,351,355,354,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66',
'311,52,299,84,,58,59,,,,62,338,60,61,63,295,296,67,68,,,,,,291,292,298',
'91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,',
'39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,553,,53,,55,,,,,,41,,,,,,,,219,',
',,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58',
'59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7',
'42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,',
',,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75',
'81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67',
'68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,293,,,95,94,85,51,87,86',
'88,,89,96,97,,82,83,,793,,347,345,344,340,346,,,,,,,,,337,,,,,,,585',
',,215,,,53,,55,,,,,,,,349,,,,,,,352,351,355,354,80,74,76,77,78,79,,',
',75,81,,,,,,,57,,,54,64,65,66,,52,299,84,,58,59,,,,62,338,60,61,63,28',
'29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,85,51,87,86',
'88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,',
',,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66',
',52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92',
'93,,,18,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,',
',,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,19,,,,,80,74,76,77',
'78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61',
'63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,293,,,95,94',
'85,51,87,86,372,,89,96,97,,82,83,,330,,347,345,344,340,346,,,,,,,,,337',
',,,,,,373,,,215,,,53,,55,,,,,,,,349,,,,,,,352,351,355,354,80,74,76,77',
'78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,299,84,,58,59,,,,62,338,60',
'61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,85',
'51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,',
'53,,55,,,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54',
'64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292',
'298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82',
'83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219',
',,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,-573,-573,-573,,-573,38',
'84,,-573,-573,,,,-573,,-573,-573,-573,-573,-573,-573,-573,,,,,,-573',
'-573,-573,-573,-573,-573,-573,,,-573,,,,,,,-573,,,-573,-573,-573,-573',
'-573,-573,-573,-573,-573,-573,-573,,-573,-573,,-573,-573,,,,,,,,,,,',
',,,,,,,,,-573,,,-573,-573,,-573,,-573,,-573,,-573,,-573,,,,,,,,-573',
',,,,-573,-573,-573,-573,-573,-573,,,,-573,-573,,,,,,,-573,,,-573,,-573',
',,,-573,-573,-574,-574,-574,,-574,,,,-574,-574,,,,-574,,-574,-574,-574',
'-574,-574,-574,-574,,,,,,-574,-574,-574,-574,-574,-574,-574,,,-574,',
',,,,,-574,,,-574,-574,-574,-574,-574,-574,-574,-574,-574,-574,-574,',
'-574,-574,,-574,-574,,,,,,,,,,,,,,,,,,,,,-574,,,-574,-574,,-574,,-574',
',-574,,-574,,-574,,,,,,,,-574,,,,,-574,-574,-574,-574,-574,-574,,,,-574',
'-574,,,,,,,-574,,,-574,,-574,,,,-574,-574,64,65,66,,52,,,,58,59,,,,62',
',60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,220,,,,,,,42,,,95',
'94,85,51,87,86,88,274,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211',
',,215,,,53,,55,,271,,,,41,,,,,,,,219,,,,,80,272,76,77,78,79,,,,75,81',
',,,,,,57,,,54,,275,,,,38,84,64,65,66,,52,,,,58,59,,,,62,,60,61,63,28',
'29,67,68,,,,,,27,26,25,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86',
'88,274,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55',
',271,,,,41,,,,,,,,219,,,,,80,272,76,77,78,79,,,,75,81,,,,,,,57,,,54',
',275,,,,38,84,64,65,66,,52,,,,58,59,,,,62,,60,61,63,295,296,67,68,,',
',,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,',
',,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52',
'38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92',
'93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,',
',,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60',
'61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,',
'215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,',
',57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,',
',,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,',
',,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52',
'38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,',
',18,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,',
',,,,,,,,,,,,211,,,215,,693,53,,55,,,,269,,41,,,,,,,,19,,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60',
'61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95',
'94,85,51,87,86,88,274,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211',
',,215,,,53,,55,,701,,269,,41,,,,,,,,219,,,,,80,272,76,77,78,79,,,,75',
'81,,,,,,,57,,,54,,275,,,,38,84,64,65,66,,52,,,,58,59,,,,62,,60,61,63',
'295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85',
'51,87,86,88,274,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215',
',,53,,55,,,,269,,41,,,,,,,,219,,,,,80,272,76,77,78,79,,,,75,81,,,,,',
',57,,,54,,275,,,,38,84,64,65,66,,52,,,,58,59,,,,62,,60,61,63,295,296',
'67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86',
'88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,',
',,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65',
'66,8,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90',
'92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40',
',,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,415,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,',
'60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,293',
',,95,94,85,51,87,86,88,,89,96,97,,82,83,,793,,347,345,344,340,346,,',
',,,,,,337,,,,,,,289,,,286,,,53,,55,,,,,,,,349,,,,,,,352,351,355,354',
'80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,299,84,,58,59',
',,,62,338,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,220,,,,,',
',42,,,95,94,85,51,87,86,88,274,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,',
',,,,,,211,,,215,,,53,,55,,271,,,,41,,,,,,,,219,,,,,80,272,76,77,78,79',
',,,75,81,,,,,,,57,,,54,,275,,,,38,84,64,65,66,,52,,,,58,59,,,,62,,60',
'61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,220,,,,,,,42,,,95,94,85',
'51,87,86,88,274,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215',
',,53,,55,,271,,,,41,,,,,,,,219,,,,,80,272,76,77,78,79,,,,75,81,,,,,',
',57,,,54,,275,,,,38,84,64,65,66,,52,,,,58,59,,,,62,,60,61,63,295,296',
'67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,293,,,95,94,85,51,87',
'86,88,,89,96,97,,82,83,,793,,347,345,344,340,346,,,,,,,,,337,,,,,,,289',
',,286,,,53,,55,,,,,,,,349,,,,,,,352,351,355,354,80,74,76,77,78,79,,',
',75,81,,,,,,,57,,,54,64,65,66,,52,299,84,,58,59,,,,62,338,60,61,63,295',
'296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51',
'87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53',
',55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54',
'64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292',
'298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82',
'83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219',
',,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58',
'59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220',
',,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,',
',,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79',
',,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,28',
'29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,85,51,87,86',
'88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,',
',,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66',
',52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90',
'92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,274,89,96,97,,82,83,,39',
'40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,701,,269,,41,,,,,,,,219,',
',,,80,272,76,77,78,79,,,,75,81,,,,,,,57,,,54,,275,,,,38,84,64,65,66',
',52,,,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92',
'93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,274,89,96,97,,82,83,,39,40',
',,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,272',
'76,77,78,79,,,,75,81,,,,,,,57,,,54,,275,,,,38,84,64,65,66,8,52,,,,58',
'59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7',
'42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,',
',,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75',
'81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,28,29,67',
'68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88',
',89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,',
'41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,',
'52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90',
'92,93,,,220,,,,,,,293,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,793,',
'347,345,344,340,346,,,,,,,,,337,,,,,,,585,,,215,,,53,,55,,,,,,,,349',
'782,,,,,,352,351,355,354,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64',
'65,66,8,52,299,84,,58,59,,,,62,338,60,61,63,28,29,67,68,,,,,,27,26,25',
'91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83',
',39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,',
'80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59',
',,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42',
',9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,',
'37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81',
',,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68',
',,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,',
',,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38',
'84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,220',
',,,,,,42,,,95,94,85,51,87,86,88,274,89,96,97,,82,83,,39,40,,,,,,,,,',
',,,,,,,,,,,211,,,215,,,53,,55,,271,,,,41,,,,,,,,219,,,,,80,272,76,77',
'78,79,,,,75,81,,,,,,,57,,,54,,275,,,,38,84,64,65,66,,52,,,,58,59,,,',
'62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,220,,,,,,,42,,',
'95,94,85,51,87,86,88,274,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,',
'211,,,215,,,53,,55,,271,,,,41,,,,,,,,219,,,,,80,272,76,77,78,79,,,,75',
'81,,,,,,,57,,,54,,275,,,,38,84,64,65,66,,52,,,,58,59,,,,62,,60,61,63',
'28,29,67,68,,,,,,27,26,25,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87',
'86,88,274,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53',
',55,,271,,,,41,,,,,,,,219,,,,,80,272,76,77,78,79,,,,75,81,,,,,,,57,',
',54,,275,,,,38,84,64,65,66,,52,,,,58,59,,,,62,,60,61,63,28,29,67,68',
',,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,85,51,87,86,88,,89,96',
'97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,',
',,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84',
',58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,',
',,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,',
',,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,',
'75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296',
'67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86',
'88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,803',
',,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65',
'66,,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90',
'92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40',
',,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74',
'76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,',
'60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,220,,,,,,,42,,,95,94',
'85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215',
',,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57',
',,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26',
'25,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83',
',39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,',
',80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59',
',,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,',
',,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,',
',,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,',
'75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,28,29',
'67,68,,,,,,27,26,25,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88',
',89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,',
'41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66',
',52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90',
'92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40',
',,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74',
'76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62',
',60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31',
',,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57',
',,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27',
'26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,',
'82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19',
',,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58',
'59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220',
',,,,,,42,,,95,94,85,51,87,86,88,274,89,96,97,,82,83,,39,40,,,,,,,,,',
',,,,,,,,,,,211,,,215,,,53,,55,,701,,269,,41,,,,,,,,219,,,,,80,272,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,,275,,,,38,84,64,65,66,,52,,,,58,59',
',,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,',
',,,42,,,95,94,85,51,87,86,88,274,89,96,97,,82,83,,39,40,,,,,,,,,,,,',
',,,,,,,,211,,,215,,,53,,55,,,,269,,41,,,,,,,,219,,,,,80,272,76,77,78',
'79,,,,75,81,,,,,,,57,,,54,,275,,,,38,84,64,65,66,8,52,,,,58,59,,,,62',
',60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31',
',,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57',
',,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27',
'26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,',
'82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19',
',,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58',
'59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220',
',,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,',
',,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79',
',,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295',
'296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51',
'87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53',
',55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54',
'64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292',
'298,91,90,92,93,,,220,,,,,,,293,,,95,94,85,51,87,86,88,,89,96,97,,82',
'83,,793,,347,345,344,340,346,,,,,,,,,337,,,,,,,289,,,286,,,53,,55,,',
',,,,,349,,,,,,,352,351,355,354,80,74,76,77,78,79,,,,75,81,,,,,,,57,',
',54,64,65,66,,52,299,84,,58,59,,,,62,338,60,61,63,295,296,67,68,,,,',
',291,292,298,91,90,92,93,,,220,,,,,,,293,,,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,,,,,,,,,,,,,,,,,,,,,,,289,,,286,,,53,,55,,,,,,,,,,,,,',
',,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,299,84,,58',
'59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220',
',,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,',
',,,,,,,,211,,,215,,,53,,55,,431,,,,41,,,,,,,,219,,,,,80,74,76,77,78',
'79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63',
'295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85',
'51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,',
'53,,55,,271,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57',
',,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26',
'25,91,90,92,93,,,18,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83',
',39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,19,,,,',
'80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59',
',,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42',
',9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,',
'37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81',
',,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68',
',,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,',
',,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52',
'38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,',
',18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,',
',,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78',
'79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63',
'295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85',
'51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,',
'53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,',
'54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26',
'25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82',
'83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,',
',,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59',
',,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,',
',,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,',
',,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,',
'75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,28,29',
'67,68,,,,,,27,26,25,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88',
',89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,',
'41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66',
',52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92',
'93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,',
',,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60',
'61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,',
'215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,',
',57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,',
',,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,',
',,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52',
'38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92',
'93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,',
',,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60',
'61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,',
'215,,,53,,55,,271,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,',
',,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,',
',,,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,',
',,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38',
'84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18',
',,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,',
',,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,',
',,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,28',
'29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87',
'86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,',
'33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65',
'66,8,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90',
'92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40',
',,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60',
'61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,',
'215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,',
',57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,',
',,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,',
',,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52',
'38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92',
'93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,',
',,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60',
'61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,',
'215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,',
',57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,',
',,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,274',
'89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,269',
',41,,,,,,,,219,,,,,80,272,76,77,78,79,,,,75,81,,,,,,,57,,,54,,275,,',
',38,84,64,65,66,8,52,,,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26',
'25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82',
'83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,',
',,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59',
',,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,',
',,,293,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,,,,,,,,,,,,,,,,,,,,',
',,976,,,215,,,53,,55,,,,,,,,,,,,,,,,,,,80,74,76,77,78,79,,,,75,81,,',
',,,,57,,,54,64,65,66,,52,299,84,,58,59,,,,62,,60,61,63,295,296,67,68',
',,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,',
'89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,701,',
',,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66',
'8,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92',
'93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,',
',,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60',
'61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94',
'85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,',
',53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57',
',,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291',
'292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97',
',82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,701,,269,,41,',
',,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52',
'38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,',
',18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,',
',,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78',
'79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63',
'28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51',
'87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55',
',33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64',
'65,66,8,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91',
'90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39',
'40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74',
'76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62',
',60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31',
',,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57',
',,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26',
'25,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,274,89,96,97,,82',
'83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,271,,,,41,,,,,,,,219',
',,,-575,80,272,76,77,78,79,-575,-575,-575,75,81,,-575,-575,,-575,,57',
',,54,,275,,-575,,38,84,,,,,,,,-575,-575,,-575,-575,-575,-575,-575,,',
',,,,,,,,,,,,,,,,,,,-575,-575,-575,-575,-575,-575,-575,-575,-575,-575',
'-575,-575,-575,-575,-575,,,-575,-575,-575,,658,,,,-575,,,,,,-575,,-575',
',-575,-575,-575,-575,-575,-575,-575,,-575,-575,-575,,,,,,,,,,,,,-575',
'-575,,-90,,-575,,-289,-575,,-575,,,-99,-289,-289,-289,,,,-289,-289,',
'-289,,,,,,,,,,,,,,,,,,,,-289,-289,,-289,-289,-289,-289,-289,,,,,,,,',
',,,,,,,,,,,,,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289',
'-289,-289,-289,-289,,,-289,-289,-289,,661,,,,-289,,,,,,-289,,-289,,-289',
'-289,-289,-289,-289,-289,-289,,-289,,-289,,,,,,,,,,,,,-289,-289,,-92',
',-289,,-575,-289,,-289,,,-101,-575,-575,-575,,,-575,-575,-575,,-575',
',,,,,,,,-575,-575,-575,,,,,,,,,-575,-575,,-575,-575,-575,-575,-575,',
',,,,,,,,,,,,,,,,,,,,-575,-575,-575,-575,-575,-575,-575,-575,-575,-575',
'-575,-575,-575,-575,-575,,,-575,-575,-575,,819,-575,,,-575,,-575,,-575',
',-575,,-575,,-575,-575,-575,-575,-575,-575,-575,,-575,-575,-575,,,,',
',,,,,,,,-575,-575,-575,-575,,-575,,-289,-575,,-575,,,-99,-289,-289,-289',
',,-289,-289,-289,,-289,,,,,,,,,,-289,-289,,,,,,,,,-289,-289,,-289,-289',
'-289,-289,-289,,,,,,,,,,,,,,,,,,,,,,-289,-289,-289,-289,-289,-289,-289',
'-289,-289,-289,-289,-289,-289,-289,-289,,,-289,-289,-289,,661,-289,',
',-289,,-289,,-289,,-289,,-289,,-289,-289,-289,-289,-289,-289,-289,,-289',
',-289,,,,,,,,,,,,,-289,-289,-289,-289,,-289,,-403,-289,,-289,,,-101',
'-403,-403,-403,,,-403,-403,-403,,-403,,,,,,,,,-403,-403,-403,,,,,,,',
',-403,-403,,-403,-403,-403,-403,-403,,,,,,,,,,,,,,,,,,,,,,-403,-403',
'-403,-403,-403,-403,-403,-403,-403,-403,-403,-403,-403,-403,-403,,,-403',
'-403,-403,,,-403,,253,-403,,-403,,-403,,-403,,-403,,-403,-403,-403,-403',
'-403,-403,-403,,-403,-403,-403,,,,,,,,,,,,,-403,-403,-403,-403,-298',
'-403,,,-403,,-403,-298,-298,-298,,,-298,-298,-298,,-298,,,,,,,,,,-298',
'-298,,,,,,,,,-298,-298,,-298,-298,-298,-298,-298,,,,,,,,,,,,,,,,,,,',
',,-298,-298,-298,-298,-298,-298,-298,-298,-298,-298,-298,-298,-298,-298',
'-298,,,-298,-298,-298,,,-298,,262,-298,,-298,,-298,,-298,,-298,,-298',
'-298,-298,-298,-298,-298,-298,,-298,,-298,,,,,,,,,,,,,-298,-298,-298',
'-298,-284,-298,,,-298,,-298,-284,-284,-284,,,-284,-284,-284,,-284,,',
',,,,,,,-284,-284,-284,,,,,,,,-284,-284,,-284,-284,-284,-284,-284,,,',
',,,,,,,,,,,,,,,,,,-284,-284,-284,-284,-284,-284,-284,-284,-284,-284',
'-284,-284,-284,-284,-284,,,-284,-284,-284,,,-284,,,-284,,-284,,-284',
',-284,,-284,,-284,-284,-284,-284,-284,-284,-284,,-284,,-284,,,,,,,,',
',,,,-284,-284,-284,-284,-591,-284,,-284,-284,,-284,-591,-591,-591,,',
'-591,-591,-591,,-591,,,,,,,,,-591,-591,-591,,,,,,,,,-591,-591,,-591',
'-591,-591,-591,-591,,,,,,,,,,,,,,,,,,,,,,-591,-591,-591,-591,-591,-591',
'-591,-591,-591,-591,-591,-591,-591,-591,-591,,,-591,-591,-591,,,-591',
',253,-591,,-591,,-591,,-591,,-591,,-591,-591,-591,-591,-591,-591,-591',
',-591,-591,-591,,,,,,,,,,,,,-591,-591,-591,-591,-591,-591,,,-591,,-591',
'-591,-591,-591,,,-591,-591,-591,,-591,,,,,,,,,-591,-591,-591,,,,,,,',
',-591,-591,,-591,-591,-591,-591,-591,,,,,,,,,,,,,,,,,,,,,,-591,-591',
'-591,-591,-591,-591,-591,-591,-591,-591,-591,-591,-591,-591,-591,,,-591',
'-591,-591,,,-591,,253,-591,,-591,,-591,,-591,,-591,,-591,-591,-591,-591',
'-591,-591,-591,,-591,-591,-591,,,,,,,,,,,,,-591,-591,-591,-591,-591',
'-591,,,-591,,-591,-591,-591,-591,,,-591,-591,-591,,-591,,,,,,,,,,-591',
',,,,,,,,,-591,-591,,-591,-591,-591,-591,-591,,,,,,,,,,,,-591,,,,,,,-591',
'-591,-591,,,-591,-591,-591,,-591,,,,,-591,-591,,,,-591,,,-591,,,,,253',
'-591,-591,-591,,-591,-591,-591,-591,-591,,,,,,,,,,,,-591,,,,,,,,,,,',
',-591,,-591,,,-591,,,-591,-591,,-591,,,,,-591,,-591,-591,-591,253,-591',
'-591,-591,-591,,-591,,,,,,,,,,-591,,,,,-591,,,,,-591,-591,,-591,-591',
'-591,-591,-591,-591,,-591,,,-591,443,447,,,445,,,,,,,,,143,144,140,122',
'123,124,131,128,130,,,125,126,-591,-591,,,145,146,132,133,-591,,,,,253',
'-591,,,,,137,136,,121,142,139,138,134,135,129,127,119,141,120,,-591',
'147,,,,,,,,,,,,-591,,-591,,,-591,157,168,158,181,154,174,164,163,189',
'192,179,162,161,156,182,190,191,166,155,169,173,175,167,160,,,,176,183',
'178,177,170,180,165,153,172,171,184,185,186,187,188,152,159,150,151',
'148,149,112,114,111,,113,,,,,,,,,143,144,140,122,123,124,131,128,130',
',,125,126,,,,,145,146,132,133,,,,,,,,,,,,137,136,,121,142,139,138,134',
'135,129,127,119,141,120,,,147,193,,,,,,,,,,81,157,168,158,181,154,174',
'164,163,189,192,179,162,161,156,182,190,191,166,155,169,173,175,167',
'160,,,,176,183,178,177,170,180,165,153,172,171,184,185,186,187,188,152',
'159,150,151,148,149,112,114,,,113,,,,,,,,,143,144,140,122,123,124,131',
'128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,,,137,136,,121,142,139',
'138,134,135,129,127,119,141,120,,,147,193,,,,,,,,,,81,157,168,158,181',
'154,174,164,163,189,192,179,162,161,156,182,190,191,166,155,169,173',
'175,167,160,,,,176,183,178,177,170,180,165,153,172,171,184,185,186,187',
'188,152,159,150,151,148,149,112,114,,,113,,,,,,,,,143,144,140,122,123',
'124,131,128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,,,137,136,,121',
'142,139,138,134,135,129,127,119,141,120,,,147,193,,,,,,,,,,81,157,168',
'158,181,154,174,164,163,189,192,179,162,161,156,182,190,191,166,155',
'169,173,175,167,160,,,,176,183,178,177,170,180,165,153,172,171,184,185',
'186,187,188,152,159,150,151,148,149,112,114,,,113,,,,,,,,,143,144,140',
'122,123,124,131,128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,,,137',
'136,,121,142,139,138,134,135,129,127,119,141,120,,,147,193,,,,,,,,,',
'81,157,168,158,181,154,174,164,163,189,192,179,162,161,156,182,190,191',
'166,155,169,173,175,167,160,,,,176,183,178,387,386,388,385,153,172,171',
'184,185,186,187,188,152,159,150,151,383,384,381,114,87,86,382,,89,,',
',,,,143,144,140,122,123,124,131,128,130,,,125,126,,,,,145,146,132,133',
',,,,,392,,,,,,137,136,,121,142,139,138,134,135,129,127,119,141,120,',
',147,157,168,158,181,154,174,164,163,189,192,179,162,161,156,182,190',
'191,166,155,169,173,175,167,160,,,,176,183,178,177,170,180,165,153,172',
'171,184,185,186,187,188,152,159,150,151,148,149,112,114,409,408,113',
',410,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126,,,,,145,146',
'132,133,,,,,,,,,,,,137,136,,121,142,139,138,134,135,129,127,119,141',
'120,,,147,157,168,158,181,154,174,164,163,189,192,179,162,161,156,182',
'190,191,166,155,169,173,175,167,160,,,,176,183,178,177,170,180,165,153',
'172,171,184,185,186,187,188,152,159,150,151,148,149,112,114,409,408',
'113,,410,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126,,,,,145',
'146,132,133,,,,,,,,,,,,137,136,,121,142,139,138,134,135,129,127,119',
'141,120,,,147,157,168,158,181,154,174,164,163,189,192,179,162,161,156',
'182,190,191,166,155,169,173,175,167,160,,,,176,183,178,177,170,180,165',
'153,172,171,184,185,186,187,188,152,159,150,151,148,149,112,114,,,113',
',,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126,,,,,145,146,132',
'133,,,,,,,,,,,,137,136,,121,142,139,138,134,135,129,127,119,141,120',
'437,441,147,,438,,,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126',
',,,,145,146,132,133,,,,,,253,,,,,,137,136,,121,142,139,138,134,135,129',
'127,119,141,120,450,441,147,,451,,,,,,,,,143,144,140,122,123,124,131',
'128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,,,137,136,,121,142,139',
'138,134,135,129,127,119,141,120,450,441,147,,451,,,,,,,,,143,144,140',
'122,123,124,131,128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,,,137',
'136,,121,142,139,138,134,135,129,127,119,141,120,450,441,147,,451,,',
',,,,,,143,144,140,122,123,124,131,128,130,,,125,126,,,,,145,146,132',
'133,,,,,,,,,,,,137,136,,121,142,139,138,134,135,129,127,119,141,120',
'450,441,147,,451,,,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126',
',,,,145,146,132,133,,,,,,,,,,,,137,136,,121,142,139,138,134,135,129',
'127,119,141,120,666,441,147,,667,,,,,,,,,143,144,140,122,123,124,131',
'128,130,,,125,126,,,,,145,146,132,133,,,,,,253,,,,,,137,136,,121,142',
'139,138,134,135,129,127,119,141,120,668,447,147,,669,,,,,,,,,143,144',
'140,122,123,124,131,128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,',
',137,136,,121,142,139,138,134,135,129,127,119,141,120,711,441,147,,712',
',,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126,,,,,145,146,132',
'133,,,,,,253,,,,,,137,136,,121,142,139,138,134,135,129,127,119,141,120',
'714,447,147,,715,,,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126',
',,,,145,146,132,133,,,,,,,,,,,,137,136,,121,142,139,138,134,135,129',
'127,119,141,120,450,441,147,,451,,,,,,,,,143,144,140,122,123,124,131',
'128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,,,137,136,,121,142,139',
'138,134,135,129,127,119,141,120,666,441,147,,667,,,,,,,,,143,144,140',
'122,123,124,131,128,130,,,125,126,,,,,145,146,132,133,,,,,,253,,,,,',
'137,136,,121,142,139,138,134,135,129,127,119,141,120,668,447,147,,669',
',,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126,,,,,145,146,132',
'133,,,,,,,,,,,,137,136,,121,142,139,138,134,135,129,127,119,141,120',
'766,441,147,,767,,,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126',
',,,,145,146,132,133,,,,,,253,,,,,,137,136,,121,142,139,138,134,135,129',
'127,119,141,120,768,447,147,,769,,,,,,,,,143,144,140,122,123,124,131',
'128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,,,137,136,,121,142,139',
'138,134,135,129,127,119,141,120,774,447,147,,772,,,,,,,,,143,144,140',
'122,123,124,131,128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,,,137',
'136,,121,142,139,138,134,135,129,127,119,141,120,450,441,147,,451,,',
',,,,,,143,144,140,122,123,124,131,128,130,,,125,126,,,,,145,146,132',
'133,,,,,,253,,,,,,137,136,,121,142,139,138,134,135,129,127,119,141,120',
'774,447,147,,862,,,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126',
',,,,145,146,132,133,,,,,,,,,,,,137,136,,121,142,139,138,134,135,129',
'127,119,141,120,1028,441,147,,1029,,,,,,,,,143,144,140,122,123,124,131',
'128,130,,,125,126,,,,,145,146,132,133,,,,,,253,,,,,,137,136,,121,142',
'139,138,134,135,129,127,119,141,120,1030,447,147,,1031,,,,,,,,,143,144',
'140,122,123,124,131,128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,',
',137,136,,121,142,139,138,134,135,129,127,119,141,120,,,147' ]
        racc_action_table = arr = ::Array.new(26038, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,0,0,0,358,56,324,0,0,210,24,359,0,294,0,0,0,0,0,0,0,365,212,368',
'1,403,0,0,0,0,0,0,0,316,466,0,316,6,498,610,287,0,0,0,0,0,0,0,0,0,0',
'0,766,0,0,0,876,0,0,210,0,0,290,767,706,502,313,313,377,627,627,498',
'212,877,24,317,3,294,317,470,470,3,0,928,466,0,403,940,0,56,0,974,0',
'9,24,977,0,294,502,1011,706,724,724,768,0,11,287,1028,324,0,0,0,0,0',
'0,358,12,358,0,0,358,1029,359,365,359,368,0,359,290,0,18,18,18,470,18',
'0,0,15,18,18,1041,610,287,18,769,18,18,18,18,18,18,18,287,313,766,724',
'627,18,18,18,18,18,18,18,290,767,18,876,768,876,876,377,876,18,290,877',
'18,18,18,18,18,18,18,651,18,18,18,1030,18,18,377,18,18,540,928,377,928',
'21,940,928,940,35,974,940,974,768,977,974,977,769,1011,977,1011,18,37',
'1011,18,18,1028,18,1028,18,1031,1028,381,523,42,18,600,601,711,381,1029',
'651,1029,18,78,1029,512,513,18,18,18,18,18,18,769,779,779,18,18,1041',
'712,1041,879,838,1041,18,79,540,18,19,19,19,1030,19,18,18,278,19,19',
'512,513,278,19,714,19,19,19,19,19,19,19,715,523,523,523,666,19,19,19',
'19,19,19,19,540,711,19,1030,1031,1030,523,638,1030,19,540,72,19,19,19',
'19,19,19,19,72,19,19,19,712,19,19,838,19,19,474,600,601,600,601,14,600',
'601,711,1031,779,1031,98,666,1031,779,714,714,711,394,19,16,16,19,715',
'715,19,879,19,879,712,474,879,838,19,474,474,638,638,363,712,363,19',
'838,667,14,638,19,19,19,19,19,19,714,194,14,19,19,820,382,821,715,36',
'714,19,211,382,19,27,27,27,715,27,19,19,383,27,27,394,394,394,27,383',
'27,27,27,27,27,27,27,320,372,213,320,667,27,27,27,27,27,27,27,36,214',
'27,23,23,220,820,458,821,27,36,23,27,27,27,27,27,27,27,27,27,27,27,396',
'27,27,252,27,27,458,458,458,458,458,458,458,458,458,458,458,372,372',
'458,458,266,362,458,458,372,27,362,398,27,372,398,27,475,27,267,27,458',
'27,458,27,458,458,458,458,458,458,458,27,458,372,38,38,27,27,27,27,27',
'27,396,396,396,27,27,475,458,303,458,475,475,27,384,372,27,372,27,575',
'385,384,27,27,28,28,28,385,28,575,398,398,28,28,990,729,990,28,729,28',
'28,28,28,28,28,28,270,965,280,303,965,28,28,28,28,28,28,28,111,303,28',
'575,575,111,111,672,282,28,84,84,28,28,28,28,28,28,28,28,28,28,28,400',
'28,28,283,28,28,672,672,672,672,672,672,672,672,672,672,672,575,284',
'672,672,386,289,672,672,889,28,405,386,28,299,299,28,292,28,889,28,672',
'28,672,28,672,672,672,672,672,672,672,28,672,357,357,293,28,28,28,28',
'28,28,400,400,400,28,28,387,672,437,889,889,388,28,387,298,28,300,28',
'388,390,304,28,28,29,29,29,390,29,405,405,405,29,29,578,578,305,29,308',
'29,29,29,29,29,29,29,315,889,318,437,319,29,29,29,29,29,29,29,620,437',
'29,13,13,620,438,753,753,29,321,13,29,29,29,29,29,29,29,29,29,29,29',
'329,29,29,330,29,29,777,331,493,650,592,777,592,592,592,865,592,865',
'865,865,783,865,332,438,334,783,29,1014,1014,29,335,339,29,438,29,13',
'29,13,29,493,29,353,356,493,493,493,493,364,29,650,367,369,373,29,29',
'29,29,29,29,650,399,402,29,29,43,43,421,427,429,432,29,435,43,29,436',
'29,444,455,476,29,29,31,31,31,31,31,592,477,478,31,31,865,479,504,31',
'507,31,31,31,31,31,31,31,5,5,5,5,5,31,31,31,31,31,31,31,508,514,31,528',
'43,529,43,532,31,31,534,31,31,31,31,31,31,31,31,541,31,31,31,545,31',
'31,554,31,31,555,349,556,349,349,349,581,349,581,581,581,581,581,797',
'797,569,585,797,797,797,31,581,587,31,494,591,31,596,31,915,31,915,915',
'915,31,915,602,209,209,349,603,642,31,648,581,209,349,31,31,31,31,31',
'31,581,581,494,31,31,654,494,494,494,494,659,31,662,670,31,32,32,32',
'671,32,31,31,687,32,32,691,694,698,32,700,32,32,32,32,32,32,32,581,708',
'209,710,209,32,32,32,32,32,32,32,713,716,32,288,288,717,718,719,722',
'32,723,288,32,32,32,32,32,32,32,725,32,32,32,731,32,32,732,57,736,57',
'57,57,57,57,737,306,306,279,279,279,279,279,57,306,589,739,589,589,589',
'32,589,742,32,743,745,32,749,32,288,32,288,751,755,761,763,57,57,705',
'705,705,705,705,57,57,57,57,32,32,32,32,32,32,589,765,770,32,32,774',
'775,589,306,786,306,32,787,789,32,33,33,33,790,33,32,32,791,33,33,793',
'796,802,33,57,33,33,33,33,33,33,33,823,824,825,826,827,33,33,33,33,33',
'33,33,829,832,33,366,366,833,837,842,845,33,846,366,33,33,33,33,33,33',
'33,862,33,33,33,867,33,33,868,325,871,325,325,325,325,325,881,884,885',
'375,375,886,906,907,325,917,750,375,750,750,750,33,750,921,33,931,932',
'33,933,33,366,934,366,935,937,942,943,325,951,325,953,955,956,957,325',
'325,325,325,33,33,33,33,33,33,750,958,960,33,33,976,985,750,33,992,375',
'33,375,1007,33,39,39,39,1012,39,33,33,1013,39,39,1018,1020,1021,39,325',
'39,39,39,39,39,39,39,1022,1023,1024,1027,1042,39,39,39,39,39,39,39,',
',39,584,584,,,,,39,,584,39,39,39,39,39,39,39,,39,39,39,,39,39,,39,39',
',752,,752,752,752,852,752,852,852,852,852,852,1006,,1006,1006,1006,',
'1006,39,852,,39,,,39,,39,584,,584,,,39,,,612,612,752,,,39,,852,612,',
'39,39,39,39,39,39,852,852,,39,39,,,,,,,39,,,39,40,40,40,,40,39,39,,40',
'40,,,,40,,40,40,40,40,40,40,40,852,,612,,612,40,40,40,40,40,40,40,,',
'40,738,738,,,,,40,,738,40,40,40,40,40,40,40,,40,40,40,,40,40,,40,40',
',866,,866,866,866,854,866,854,854,854,854,854,,,,,,,,40,854,,40,,,40',
',40,738,,738,,,40,,,878,878,866,,,40,,854,878,,40,40,40,40,40,40,854',
'854,,40,40,,,,,,,40,,,40,41,41,41,,41,40,40,,41,41,,,,41,,41,41,41,41',
'41,41,41,854,,878,,878,41,41,41,41,41,41,41,,,41,975,975,,,,,41,,975',
'41,41,41,41,41,41,41,,41,41,41,,41,41,,41,41,,482,,,,,859,,859,859,859',
'859,859,,,,,,482,482,41,859,,41,,,41,,41,975,,975,482,,41,,482,482,482',
'482,,,41,,859,,,41,41,41,41,41,41,859,859,,41,41,,,,,,,41,,,41,53,53',
'53,,53,41,41,,53,53,,,,53,,53,53,53,53,53,53,53,859,,,,,53,53,53,53',
'53,53,53,,,53,,936,,936,936,936,53,936,,53,53,53,53,53,53,53,,53,53',
'53,,53,53,,53,53,484,938,,938,938,938,896,938,896,896,896,896,896,936',
',,,484,484,,53,896,,53,,,53,,53,,,484,,484,53,484,484,484,484,938,,484',
'53,484,896,,,53,53,53,53,53,53,896,896,,53,53,,,,,,,53,,,53,54,54,54',
',54,53,53,,54,54,,,,54,,54,54,54,54,54,54,54,896,,,,,54,54,54,54,54',
'54,54,,,54,,,,,,,54,,,54,54,54,54,54,54,54,54,54,54,54,,54,54,,54,54',
'690,690,690,690,690,690,690,690,690,690,690,772,772,690,690,,,690,690',
'772,54,,,54,772,,54,,54,,54,690,,690,54,690,690,690,690,690,690,690',
'54,690,,,,54,54,54,54,54,54,,,,54,54,,690,,690,,,54,,772,54,772,54,',
',,54,54,55,55,55,,55,,,,55,55,,,,55,,55,55,55,55,55,55,55,,,,,,55,55',
'55,55,55,55,55,,,55,,,,,,,55,,,55,55,55,55,55,55,55,55,55,55,55,,55',
'55,,55,55,674,674,674,674,674,674,674,674,674,674,674,,,674,674,,,674',
'674,,55,,,55,,,55,,55,,,674,,674,55,674,674,674,674,674,674,674,55,674',
',,,55,55,55,55,55,55,,,,55,55,,674,674,,,,55,,,55,,55,,,,55,55,58,58',
'58,,58,,,,58,58,,,,58,,58,58,58,58,58,58,58,,,,,,58,58,58,58,58,58,58',
',,58,,984,,984,984,984,58,984,,58,58,58,58,58,58,58,,58,58,58,,58,58',
',58,58,485,,,,,,980,,980,980,980,980,980,984,,,,485,485,,58,980,,58',
',,58,,58,,,485,,485,58,485,485,485,485,,,485,58,485,980,,,58,58,58,58',
'58,58,980,980,,58,58,,,,,,,58,,,58,59,59,59,,59,58,58,,59,59,,,,59,',
'59,59,59,59,59,59,59,980,,,,,59,59,59,59,59,59,59,,,59,,,,,,,59,,,59',
'59,59,59,59,59,59,,59,59,59,,59,59,,59,59,486,,,,,,997,,997,997,997',
'997,997,,,,,486,486,,59,997,,59,,,59,,59,,,486,,486,59,486,486,486,486',
',,486,59,486,997,,,59,59,59,59,59,59,997,997,,59,59,,,,,,,59,,,59,62',
'62,62,,62,59,59,,62,62,,,,62,,62,62,62,62,62,62,62,997,,,,,62,62,62',
'62,62,62,62,,,62,,,,,,,62,,,62,62,62,62,62,62,62,,62,62,62,,62,62,,62',
'62,487,,,,,,999,,999,999,999,999,999,,,,,487,487,,62,999,,62,,,62,,62',
',,487,,487,62,487,487,487,487,,,487,62,487,999,,,62,62,62,62,62,62,999',
'999,,62,62,62,,,,,62,62,,,62,63,63,63,,63,62,62,,63,63,,,,63,,63,63',
'63,63,63,63,63,999,,,,,63,63,63,63,63,63,63,,,63,,,,,,,63,,,63,63,63',
'63,63,63,63,,63,63,63,,63,63,,571,,571,571,571,571,571,,,,,,,,,571,',
',,,,,63,,,63,,,63,,63,,63,,,,,,571,,,,,,,571,571,571,571,63,63,63,63',
'63,63,,,,63,63,,,,,,,63,,,63,64,64,64,,64,63,63,,64,64,,,,64,571,64',
'64,64,64,64,64,64,,,,,,64,64,64,64,64,64,64,,,64,,,,,,,64,,,64,64,64',
'64,64,64,64,,64,64,64,480,64,64,,579,,579,579,579,579,579,,,,,,,480',
'480,579,,,,64,,,64,,,64,,480,64,480,64,480,480,480,480,,,,579,,,,,,',
'579,579,579,579,64,64,64,64,64,64,,,,64,64,,,,,,,64,,,64,85,85,85,,85',
'64,64,,85,85,,,,85,579,85,85,85,85,85,85,85,,85,,,,85,85,85,85,85,85',
'85,,,85,,,,,,,85,,,85,85,85,85,85,85,85,85,85,85,85,,85,85,,85,85,20',
'20,20,20,20,20,20,20,20,20,20,,,20,20,,,20,20,,85,,,85,85,,85,,85,,85',
'20,85,20,85,20,20,20,20,20,20,20,85,20,85,,,85,85,85,85,85,85,,,,85',
'85,,20,,,,,85,,,85,,85,,,,85,85,88,88,88,,88,,,,88,88,,,,88,,88,88,88',
'88,88,88,88,,88,,,,88,88,88,88,88,88,88,,,88,,,,,,,88,,,88,88,88,88',
'88,88,88,88,88,88,88,,88,88,,88,88,264,264,264,264,264,264,264,264,264',
'264,264,,,264,264,,,264,264,,88,,,88,88,,88,,88,,88,264,88,264,88,264',
'264,264,264,264,264,264,88,264,88,,,88,88,88,88,88,88,,,,88,88,,264',
',,,,88,,,88,,88,,,,88,88,100,100,100,100,100,,,,100,100,,,,100,,100',
'100,100,100,100,100,100,,,,,,100,100,100,100,100,100,100,,,100,,,,,',
'100,100,100,100,100,100,100,100,100,100,100,,100,100,100,,100,100,,100',
'100,481,,,,,,1001,,1001,1001,1001,1001,1001,,,,,481,481,,100,1001,,100',
',,100,,100,,100,481,,481,100,481,481,481,481,,,,100,,1001,,,100,100',
'100,100,100,100,1001,1001,,100,100,,,,,,100,100,,,100,104,104,104,,104',
'100,100,,104,104,,,,104,,104,104,104,104,104,104,104,1001,,,,,104,104',
'104,104,104,104,104,,,104,,,,,,,104,,,104,104,104,104,104,104,104,,104',
'104,104,,104,104,,104,104,,,,,,,1035,,1035,1035,1035,1035,1035,,,,,',
',,104,1035,,104,,,104,,104,,,,,,104,,,,,,,,104,,1035,,,104,104,104,104',
'104,104,1035,1035,,104,104,,,,,,,104,,,104,105,105,105,,105,104,104',
',105,105,,,,105,,105,105,105,105,105,105,105,1035,,,,,105,105,105,105',
'105,105,105,,,105,,,,,,,105,,,105,105,105,105,105,105,105,,105,105,105',
',105,105,,105,105,434,434,434,434,434,434,434,434,434,434,434,,,434',
'434,,,434,434,,105,,,105,,,105,,105,,,434,,434,105,434,434,434,434,434',
'434,434,105,434,,,,105,105,105,105,105,105,,,,105,105,,434,,,,,105,',
',105,106,106,106,,106,105,105,,106,106,,,,106,,106,106,106,106,106,106',
'106,,,,,,106,106,106,106,106,106,106,,,106,,,,,,,106,,,106,106,106,106',
'106,106,106,,106,106,106,,106,106,,106,106,453,453,453,453,453,453,453',
'453,453,453,453,,,453,453,,,453,453,,106,,,106,,,106,,106,,,453,,453',
'106,453,453,453,453,453,453,453,106,453,,,,106,106,106,106,106,106,',
',,106,106,,453,,,,,106,,,106,107,107,107,,107,106,106,,107,107,,,,107',
',107,107,107,107,107,107,107,,,,,,107,107,107,107,107,107,107,,,107',
',,,,,,107,,,107,107,107,107,107,107,107,,107,107,107,,107,107,,107,107',
'552,552,552,552,552,552,552,552,552,552,552,,,552,552,,,552,552,,107',
',,107,,,107,,107,,,552,,552,107,552,552,552,552,552,552,552,107,552',
',,,107,107,107,107,107,107,,,,107,107,,552,,,,,107,,,107,108,108,108',
'108,108,107,107,,108,108,,,,108,,108,108,108,108,108,108,108,,,,,,108',
'108,108,108,108,108,108,,,108,,,,,,108,108,,108,108,108,108,108,108',
'108,108,,108,108,108,,108,108,,108,108,721,721,721,721,721,721,721,721',
'721,721,721,,,721,721,,,721,721,,108,,,108,,,108,,108,,108,721,,721',
'108,721,721,721,721,721,721,721,108,721,,,,108,108,108,108,108,108,',
',,108,108,,721,,,,,108,,,108,109,109,109,109,109,108,108,,109,109,,',
',109,,109,109,109,109,109,109,109,,,,,,109,109,109,109,109,109,109,',
',109,,,,,,109,109,109,109,109,109,109,109,109,109,109,,109,109,109,',
'109,109,,109,109,807,807,807,807,807,807,807,807,807,807,807,,,807,807',
',,807,807,,109,,,109,,,109,,109,,109,807,,807,109,807,807,807,807,807',
'807,807,109,807,,,,109,109,109,109,109,109,,,,109,109,,807,,,,,109,',
',109,196,196,196,196,196,109,109,,196,196,,,,196,,196,196,196,196,196',
'196,196,,,,,,196,196,196,196,196,196,196,,,196,,,,,,196,196,,196,196',
'196,196,196,196,196,196,,196,196,196,,196,196,,196,196,809,809,809,809',
'809,809,809,809,809,809,809,,,809,809,,,809,809,,196,,,196,,,196,,196',
',196,809,,809,196,809,809,809,809,809,809,809,196,809,,,,196,196,196',
'196,196,196,,,,196,196,,809,,,,,196,,,196,197,197,197,,197,196,196,',
'197,197,,,,197,,197,197,197,197,197,197,197,,,,,,197,197,197,197,197',
'197,197,,,197,,,,,,,197,,,197,197,197,197,197,197,197,,197,197,197,',
'197,197,,197,197,812,812,812,812,812,812,812,812,812,812,812,,,812,812',
',,812,812,,197,,,197,,,197,,197,,197,812,,812,197,812,812,812,812,812',
'812,812,197,812,,,,197,197,197,197,197,197,,,,197,197,,812,,,,,197,',
',197,198,198,198,,198,197,197,,198,198,,,,198,,198,198,198,198,198,198',
'198,,,,,,198,198,198,198,198,198,198,,,198,,,,,,,198,,,198,198,198,198',
'198,198,198,,198,198,198,,198,198,,198,198,814,814,814,814,814,814,814',
'814,814,814,814,,,814,814,,,814,814,,198,,,198,,,198,,198,,,814,,814',
'198,814,814,814,814,814,814,814,198,814,,,,198,198,198,198,198,198,',
',,198,198,,814,,,,,198,,,198,199,199,199,,199,198,198,,199,199,,,,199',
',199,199,199,199,199,199,199,,,,,,199,199,199,199,199,199,199,,,199',
',,,,,,199,,,199,199,199,199,199,199,199,199,199,199,199,,199,199,,199',
'199,816,816,816,816,816,816,816,816,816,816,816,,,816,816,,,816,816',
',199,,,199,,,199,,199,,199,816,,816,199,816,816,816,816,816,816,816',
'199,816,,,,199,199,199,199,199,199,,,,199,199,,816,,,,,199,,,199,,199',
',,,199,199,200,200,200,,200,,,,200,200,,,,200,,200,200,200,200,200,200',
'200,,,,,,200,200,200,200,200,200,200,,,200,,,,,,,200,,,200,200,200,200',
'200,200,200,200,200,200,200,,200,200,,200,200,909,909,909,909,909,909',
'909,909,909,909,909,,,909,909,,,909,909,,200,,,200,,,200,,200,,200,909',
',909,200,909,909,909,909,909,909,909,200,909,,,,200,200,200,200,200',
'200,,,,200,200,,909,,,,,200,,,200,,200,,,,200,200,204,204,204,,204,',
',,204,204,,,,204,,204,204,204,204,204,204,204,,,,,,204,204,204,204,204',
'204,204,,,204,,,,,,,204,,,204,204,204,204,204,204,204,,204,204,204,',
'204,204,,204,204,911,911,911,911,911,911,911,911,911,911,911,,,911,911',
',,911,911,,204,,,204,,,204,,204,,,911,,911,204,911,911,911,911,911,911',
'911,204,911,,,,204,204,204,204,204,204,,,,204,204,,911,,,,,204,,,204',
'205,205,205,,205,204,204,,205,205,,,,205,,205,205,205,205,205,205,205',
',,,,,205,205,205,205,205,205,205,,,205,,,,,,,205,,,205,205,205,205,205',
'205,205,,205,205,205,,205,205,,205,205,964,964,964,964,964,964,964,964',
'964,964,964,,,964,964,,,964,964,,205,,,205,,,205,,205,,205,964,,964',
'205,964,964,964,964,964,964,964,205,964,,,,205,205,205,205,205,205,',
',,205,205,,964,,,,,205,,,205,206,206,206,,206,205,205,,206,206,,,,206',
',206,206,206,206,206,206,206,,,,,,206,206,206,206,206,206,206,,,206',
',,,,,,206,,,206,206,206,206,206,206,206,,206,206,206,,206,206,,206,206',
'472,472,472,472,472,472,472,472,472,472,472,,,472,472,,,472,472,,206',
',,206,,,206,,206,,,472,,472,206,472,472,472,472,472,472,472,206,472',
',,,206,206,206,206,206,206,,,,206,206,,,,,,,206,,,206,207,207,207,,207',
'206,206,,207,207,,,,207,,207,207,207,207,207,207,207,,,,,,207,207,207',
'207,207,207,207,,,207,,,,,,,207,,,207,207,207,207,207,207,207,,207,207',
'207,,207,207,,207,207,473,473,473,473,473,473,473,473,473,473,473,,',
'473,473,,,473,473,,207,,,207,,,207,,207,,,473,,473,207,473,473,473,473',
'473,473,473,207,473,,,,207,207,207,207,207,207,,,,207,207,,,,,,,207',
',,207,215,215,215,215,215,207,207,,215,215,,,,215,,215,215,215,215,215',
'215,215,,,,,,215,215,215,215,215,215,215,,,215,,,,,,215,215,,215,215',
'215,215,215,215,215,215,,215,215,215,,215,215,,215,215,483,483,483,483',
'483,483,483,,,483,483,,,,,,,483,483,,215,,,215,,,215,,215,,215,483,',
'483,215,483,483,483,483,483,483,483,215,483,,,,215,215,215,215,215,215',
',,,215,215,,,,,,,215,,,215,216,216,216,,216,215,215,,216,216,,,,216',
',216,216,216,216,216,216,216,,,,,,216,216,216,216,216,216,216,,,216',
',,,,,,216,,,216,216,216,216,216,216,216,,216,216,216,,216,216,,216,216',
'488,488,488,488,488,488,488,,,488,488,,,,,,,488,488,,216,,,216,,216',
'216,,216,,,488,,488,216,488,488,488,488,488,488,488,216,488,,,,216,216',
'216,216,216,216,,,,216,216,,,,,,,216,,,216,219,219,219,,219,216,216',
',219,219,,,,219,,219,219,219,219,219,219,219,,,,,,219,219,219,219,219',
'219,219,,,219,,,,,,,219,,,219,219,219,219,219,219,219,,219,219,219,',
'219,219,,219,219,489,489,489,489,489,489,489,,,489,489,,,,,,,489,489',
',219,,,219,,,219,,219,,,489,,489,219,489,489,489,489,489,489,489,219',
'489,,,,219,219,219,219,219,219,,,,219,219,,,,,,,219,,,219,221,221,221',
',221,219,219,,221,221,,,,221,,221,221,221,221,221,221,221,,,,,,221,221',
'221,221,221,221,221,,,221,,,,,,,221,,,221,221,221,221,221,221,221,,221',
'221,221,,221,221,,221,221,490,490,490,490,490,490,490,,,490,490,,,,',
',,490,490,,221,,,221,,,221,,221,,,490,,490,221,490,490,490,490,490,490',
'490,221,490,,,,221,221,221,221,221,221,,,,221,221,,,,,,,221,,,221,222',
'222,222,,222,221,221,,222,222,,,,222,,222,222,222,222,222,222,222,,',
',,,222,222,222,222,222,222,222,,,222,,,,,,,222,,,222,222,222,222,222',
'222,222,,222,222,222,,222,222,,222,222,491,491,491,491,491,491,491,',
',491,491,,,,,,,491,491,,222,,,222,,,222,,222,,,491,,491,222,491,491',
'491,491,491,491,491,222,491,,,,222,222,222,222,222,222,,,,222,222,,',
',,,,222,,,222,223,223,223,,223,222,222,,223,223,,,,223,,223,223,223',
'223,223,223,223,,,,,,223,223,223,223,223,223,223,,,223,,,,,,,223,,,223',
'223,223,223,223,223,223,,223,223,223,,223,223,,223,223,492,492,492,492',
'492,492,492,,,492,492,,,,,,,492,492,,223,,,223,,,223,,223,,,492,,492',
'223,492,492,492,492,492,492,492,223,492,,,,223,223,223,223,223,223,',
',,223,223,,,,,,,223,,,223,224,224,224,,224,223,223,,224,224,,,,224,',
'224,224,224,224,224,224,224,,,,,,224,224,224,224,224,224,224,,,224,',
',,,,,224,,,224,224,224,224,224,224,224,,224,224,224,,224,224,,224,224',
'495,495,495,495,495,495,495,,,495,495,,,,,,,495,495,,224,,,224,,,224',
',224,,,495,,495,224,495,495,495,495,495,495,495,224,495,,,,224,224,224',
'224,224,224,,,,224,224,,,,,,,224,,,224,225,225,225,,225,224,224,,225',
'225,,,,225,,225,225,225,225,225,225,225,,,,,,225,225,225,225,225,225',
'225,,,225,,,,,,,225,,,225,225,225,225,225,225,225,,225,225,225,,225',
'225,,225,225,496,496,496,496,496,496,496,496,,496,496,,,,,,,496,496',
',225,,,225,,,225,,225,,,496,,496,225,496,496,496,496,496,496,496,225',
'496,,,,225,225,225,225,225,225,,,,225,225,,,,,,,225,,,225,226,226,226',
',226,225,225,,226,226,,,,226,,226,226,226,226,226,226,226,,,,,,226,226',
'226,226,226,226,226,,,226,,,,,,,226,,,226,226,226,226,226,226,226,,226',
'226,226,,226,226,,226,226,,,,,,,,,,,,,,,,,,,,,226,,,226,,,226,,226,',
',,,,226,,,,,,,,226,,,,,226,226,226,226,226,226,,,,226,226,,,,,,,226',
',,226,227,227,227,,227,226,226,,227,227,,,,227,,227,227,227,227,227',
'227,227,,,,,,227,227,227,227,227,227,227,,,227,,,,,,,227,,,227,227,227',
'227,227,227,227,,227,227,227,,227,227,,227,227,,,,,,,,,,,,,,,,,,,,,227',
',,227,,,227,,227,,,,,,227,,,,,,,,227,,,,,227,227,227,227,227,227,,,',
'227,227,,,,,,,227,,,227,228,228,228,,228,227,227,,228,228,,,,228,,228',
'228,228,228,228,228,228,,,,,,228,228,228,228,228,228,228,,,228,,,,,',
',228,,,228,228,228,228,228,228,228,,228,228,228,,228,228,,228,228,,',
',,,,,,,,,,,,,,,,,,228,,,228,,,228,,228,,,,,,228,,,,,,,,228,,,,,228,228',
'228,228,228,228,,,,228,228,,,,,,,228,,,228,229,229,229,,229,228,228',
',229,229,,,,229,,229,229,229,229,229,229,229,,,,,,229,229,229,229,229',
'229,229,,,229,,,,,,,229,,,229,229,229,229,229,229,229,,229,229,229,',
'229,229,,229,229,,,,,,,,,,,,,,,,,,,,,229,,,229,,,229,,229,,,,,,229,',
',,,,,,229,,,,,229,229,229,229,229,229,,,,229,229,,,,,,,229,,,229,230',
'230,230,,230,229,229,,230,230,,,,230,,230,230,230,230,230,230,230,,',
',,,230,230,230,230,230,230,230,,,230,,,,,,,230,,,230,230,230,230,230',
'230,230,,230,230,230,,230,230,,230,230,,,,,,,,,,,,,,,,,,,,,230,,,230',
',,230,,230,,,,,,230,,,,,,,,230,,,,,230,230,230,230,230,230,,,,230,230',
',,,,,,230,,,230,231,231,231,,231,230,230,,231,231,,,,231,,231,231,231',
'231,231,231,231,,,,,,231,231,231,231,231,231,231,,,231,,,,,,,231,,,231',
'231,231,231,231,231,231,,231,231,231,,231,231,,231,231,,,,,,,,,,,,,',
',,,,,,,231,,,231,,,231,,231,,,,,,231,,,,,,,,231,,,,,231,231,231,231',
'231,231,,,,231,231,,,,,,,231,,,231,232,232,232,,232,231,231,,232,232',
',,,232,,232,232,232,232,232,232,232,,,,,,232,232,232,232,232,232,232',
',,232,,,,,,,232,,,232,232,232,232,232,232,232,,232,232,232,,232,232',
',232,232,,,,,,,,,,,,,,,,,,,,,232,,,232,,,232,,232,,,,,,232,,,,,,,,232',
',,,,232,232,232,232,232,232,,,,232,232,,,,,,,232,,,232,233,233,233,',
'233,232,232,,233,233,,,,233,,233,233,233,233,233,233,233,,,,,,233,233',
'233,233,233,233,233,,,233,,,,,,,233,,,233,233,233,233,233,233,233,,233',
'233,233,,233,233,,233,233,,,,,,,,,,,,,,,,,,,,,233,,,233,,,233,,233,',
',,,,233,,,,,,,,233,,,,,233,233,233,233,233,233,,,,233,233,,,,,,,233',
',,233,234,234,234,,234,233,233,,234,234,,,,234,,234,234,234,234,234',
'234,234,,,,,,234,234,234,234,234,234,234,,,234,,,,,,,234,,,234,234,234',
'234,234,234,234,,234,234,234,,234,234,,234,234,,,,,,,,,,,,,,,,,,,,,234',
',,234,,,234,,234,,,,,,234,,,,,,,,234,,,,,234,234,234,234,234,234,,,',
'234,234,,,,,,,234,,,234,235,235,235,,235,234,234,,235,235,,,,235,,235',
'235,235,235,235,235,235,,,,,,235,235,235,235,235,235,235,,,235,,,,,',
',235,,,235,235,235,235,235,235,235,,235,235,235,,235,235,,235,235,,',
',,,,,,,,,,,,,,,,,,235,,,235,,,235,,235,,,,,,235,,,,,,,,235,,,,,235,235',
'235,235,235,235,,,,235,235,,,,,,,235,,,235,236,236,236,,236,235,235',
',236,236,,,,236,,236,236,236,236,236,236,236,,,,,,236,236,236,236,236',
'236,236,,,236,,,,,,,236,,,236,236,236,236,236,236,236,,236,236,236,',
'236,236,,236,236,,,,,,,,,,,,,,,,,,,,,236,,,236,,,236,,236,,,,,,236,',
',,,,,,236,,,,,236,236,236,236,236,236,,,,236,236,,,,,,,236,,,236,237',
'237,237,,237,236,236,,237,237,,,,237,,237,237,237,237,237,237,237,,',
',,,237,237,237,237,237,237,237,,,237,,,,,,,237,,,237,237,237,237,237',
'237,237,,237,237,237,,237,237,,237,237,,,,,,,,,,,,,,,,,,,,,237,,,237',
',,237,,237,,,,,,237,,,,,,,,237,,,,,237,237,237,237,237,237,,,,237,237',
',,,,,,237,,,237,238,238,238,,238,237,237,,238,238,,,,238,,238,238,238',
'238,238,238,238,,,,,,238,238,238,238,238,238,238,,,238,,,,,,,238,,,238',
'238,238,238,238,238,238,,238,238,238,,238,238,,238,238,,,,,,,,,,,,,',
',,,,,,,238,,,238,,,238,,238,,,,,,238,,,,,,,,238,,,,,238,238,238,238',
'238,238,,,,238,238,,,,,,,238,,,238,239,239,239,,239,238,238,,239,239',
',,,239,,239,239,239,239,239,239,239,,,,,,239,239,239,239,239,239,239',
',,239,,,,,,,239,,,239,239,239,239,239,239,239,,239,239,239,,239,239',
',239,239,,,,,,,,,,,,,,,,,,,,,239,,,239,,,239,,239,,,,,,239,,,,,,,,239',
',,,,239,239,239,239,239,239,,,,239,239,,,,,,,239,,,239,240,240,240,',
'240,239,239,,240,240,,,,240,,240,240,240,240,240,240,240,,,,,,240,240',
'240,240,240,240,240,,,240,,,,,,,240,,,240,240,240,240,240,240,240,,240',
'240,240,,240,240,,240,240,,,,,,,,,,,,,,,,,,,,,240,,,240,,,240,,240,',
',,,,240,,,,,,,,240,,,,,240,240,240,240,240,240,,,,240,240,,,,,,,240',
',,240,241,241,241,,241,240,240,,241,241,,,,241,,241,241,241,241,241',
'241,241,,,,,,241,241,241,241,241,241,241,,,241,,,,,,,241,,,241,241,241',
'241,241,241,241,,241,241,241,,241,241,,241,241,,,,,,,,,,,,,,,,,,,,,241',
',,241,,,241,,241,,,,,,241,,,,,,,,241,,,,,241,241,241,241,241,241,,,',
'241,241,,,,,,,241,,,241,242,242,242,,242,241,241,,242,242,,,,242,,242',
'242,242,242,242,242,242,,,,,,242,242,242,242,242,242,242,,,242,,,,,',
',242,,,242,242,242,242,242,242,242,,242,242,242,,242,242,,242,242,,',
',,,,,,,,,,,,,,,,,,242,,,242,,,242,,242,,,,,,242,,,,,,,,242,,,,,242,242',
'242,242,242,242,,,,242,242,,,,,,,242,,,242,243,243,243,,243,242,242',
',243,243,,,,243,,243,243,243,243,243,243,243,,,,,,243,243,243,243,243',
'243,243,,,243,,,,,,,243,,,243,243,243,243,243,243,243,,243,243,243,',
'243,243,,243,243,,,,,,,,,,,,,,,,,,,,,243,,,243,,,243,,243,,,,,,243,',
',,,,,,243,,,,,243,243,243,243,243,243,,,,243,243,,,,,,,243,,,243,244',
'244,244,,244,243,243,,244,244,,,,244,,244,244,244,244,244,244,244,,',
',,,244,244,244,244,244,244,244,,,244,,,,,,,244,,,244,244,244,244,244',
'244,244,,244,244,244,,244,244,,244,244,,,,,,,,,,,,,,,,,,,,,244,,,244',
',,244,,244,,,,,,244,,,,,,,,244,,,,,244,244,244,244,244,244,,,,244,244',
',,,,,,244,,,244,245,245,245,,245,244,244,,245,245,,,,245,,245,245,245',
'245,245,245,245,,,,,,245,245,245,245,245,245,245,,,245,,,,,,,245,,,245',
'245,245,245,245,245,245,,245,245,245,,245,245,,245,245,,,,,,,,,,,,,',
',,,,,,,245,,,245,,,245,,245,,,,,,245,,,,,,,,245,,,,,245,245,245,245',
'245,245,,,,245,245,,,,,,,245,,,245,253,253,253,,253,245,245,,253,253',
',,,253,,253,253,253,253,253,253,253,,,,,,253,253,253,253,253,253,253',
',,253,,,,,,,253,,,253,253,253,253,253,253,253,253,253,253,253,,253,253',
',253,253,,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,,253,,253,,253,,253,,,',
',,,,253,,,,,253,253,253,253,253,253,,,,253,253,,,,,,,253,,,253,,253',
',,,253,253,254,254,254,,254,,,,254,254,,,,254,,254,254,254,254,254,254',
'254,,,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254,254,254,254',
'254,254,254,254,254,254,254,,254,254,,254,254,,,,,,,,,,,,,,,,,,,,,254',
',,254,,,254,,254,,254,,254,,254,,,,,,,,254,,,,,254,254,254,254,254,254',
',,,254,254,,,,,,,254,,,254,,254,,,,254,254,262,262,262,,262,,,,262,262',
',,,262,,262,262,262,262,262,262,262,,,,,,262,262,262,262,262,262,262',
',,262,,,,,,,262,,,262,262,262,262,262,262,262,262,262,262,262,,262,262',
',262,262,,,,,,,,,,,,,,,,,,,,,262,,,262,,262,262,,262,,262,,262,,262',
',,,,,,,262,,,,,262,262,262,262,262,262,,,,262,262,,,,,,,262,,,262,,262',
',,,262,262,269,269,269,,269,,,,269,269,,,,269,,269,269,269,269,269,269',
'269,,,,,,269,269,269,269,269,269,269,,,269,,,,,,,269,,,269,269,269,269',
'269,269,269,,269,269,269,,269,269,,269,269,,,,,,,,,,,,,,,,,,,,,269,',
',269,,,269,,269,,,,,,269,,,,,,,,269,,,,,269,269,269,269,269,269,,,,269',
'269,,,,,,,269,,,269,271,271,271,,271,269,269,,271,271,,,,271,,271,271',
'271,271,271,271,271,,,,,,271,271,271,271,271,271,271,,,271,,,,,,,271',
',,271,271,271,271,271,271,271,,271,271,271,,271,271,,271,271,,,,,,,',
',,,,,,,,,,,,,271,,,271,,,271,,271,,,,,,271,,,,,,,,271,,,,,271,271,271',
'271,271,271,,,,271,271,,,,,,,271,,,271,274,274,274,,274,271,271,,274',
'274,,,,274,,274,274,274,274,274,274,274,,,,,,274,274,274,274,274,274',
'274,,,274,,,,,,,274,,,274,274,274,274,274,274,274,,274,274,274,,274',
'274,,274,274,,,,,,,,,,,,,,,,,,,,,274,,,274,,,274,,274,,,,,,274,,,,,',
',,274,,,,,274,274,274,274,274,274,,,,274,274,,,,,,,274,,,274,275,275',
'275,,275,274,274,,275,275,,,,275,,275,275,275,275,275,275,275,,,,,,275',
'275,275,275,275,275,275,,,275,,,,,,,275,,,275,275,275,275,275,275,275',
',275,275,275,,275,275,,275,275,,,,,,,,,,,,,,,,,,,,,275,,,275,,,275,',
'275,,,,,,275,,,,,,,,275,,,,,275,275,275,275,275,275,,,,275,275,,,,,',
',275,,,275,281,281,281,281,281,275,275,,281,281,,,,281,,281,281,281',
'281,281,281,281,,,,,,281,281,281,281,281,281,281,,,281,,,,,,281,281',
',281,281,281,281,281,281,281,281,,281,281,281,,281,281,,281,281,,,,',
',,,,,,,,,,,,,,,,281,,,281,,,281,,281,,281,,,,281,,,,,,,,281,,,,,281',
'281,281,281,281,281,,,,281,281,,,,,,,281,,,281,285,285,285,,285,281',
'281,,285,285,,,,285,,285,285,285,285,285,285,285,,,,,,285,285,285,285',
'285,285,285,,,285,,,,,,,285,,,285,285,285,285,285,285,285,,285,285,285',
',285,285,,623,,623,623,623,623,623,,,,,,,,,623,,,,,,,285,,,285,,,285',
',285,,,,,,,,623,623,,,,,,623,623,623,623,285,285,285,285,285,285,,,',
'285,285,,,,285,,,285,,,285,286,286,286,286,286,285,285,,286,286,,,,286',
'623,286,286,286,286,286,286,286,,,,,,286,286,286,286,286,286,286,,,286',
',,,,,286,286,,286,286,286,286,286,286,286,286,,286,286,286,,286,286',
',286,286,,,,,,,,,,,,,,,,,,,,,286,,,286,,,286,,286,,286,,,,286,,,,,,',
',286,,,,,286,286,286,286,286,286,,,,286,286,,,,,,,286,,,286,301,301',
'301,,301,286,286,,301,301,,,,301,,301,301,301,301,301,301,301,,,,,,301',
'301,301,301,301,301,301,,,301,,,,,,,301,,,301,301,301,301,301,301,301',
',301,301,301,,301,301,,676,,676,676,676,676,676,,,,,,,,,676,,,,,,,301',
',,301,,,301,,301,,,,,,,,676,,,,,,,676,676,676,676,301,301,301,301,301',
'301,,,,301,301,,,,,,,301,,,301,310,310,310,676,310,301,301,,310,310',
',,,310,676,310,310,310,310,310,310,310,,,,,,310,310,310,310,310,310',
'310,,,310,,,,,,,310,,,310,310,310,310,310,310,310,,310,310,310,,310',
'310,,310,310,,,,,,,,,,,,,,,,,,,,,310,,,310,310,,310,,310,,,,,,310,,',
',,,,,310,,,,,310,310,310,310,310,310,,,,310,310,,,,,,,310,,,310,312',
'312,312,312,312,310,310,,312,312,,,,312,,312,312,312,312,312,312,312',
',,,,,312,312,312,312,312,312,312,,,312,,,,,,312,312,,312,312,312,312',
'312,312,312,312,,312,312,312,,312,312,,312,312,,,,,,,,,,,,,,,,,,,,,312',
',,312,,,312,,312,,312,,,,312,,,,,,,,312,,,,,312,312,312,312,312,312',
',,,312,312,,,,,,,312,,,312,341,341,341,,341,312,312,,341,341,,,,341',
',341,341,341,341,341,341,341,,,,,,341,341,341,341,341,341,341,,,341',
',,,,,,341,,,341,341,341,341,341,341,341,,341,341,341,,341,341,,782,',
'782,782,782,782,782,,,,,,,,,782,,,,,,,341,,,341,,,341,,341,,,,,,,,782',
',,,,,,782,782,782,782,341,341,341,341,341,341,,,,341,341,,,,,,,341,',
',341,360,360,360,,360,341,341,,360,360,,,,360,782,360,360,360,360,360',
'360,360,,,,,,360,360,360,360,360,360,360,,,360,,,,,,,360,,,360,360,360',
'360,360,360,360,,360,360,360,,360,360,,360,360,,,,,,,,,,,,,,,,,,,,,360',
',,360,,,360,,360,,,,,,360,,,,,,,,360,,,,,360,360,360,360,360,360,,,',
'360,360,,,,,,,360,,,360,361,361,361,,361,360,360,,361,361,,,,361,,361',
'361,361,361,361,361,361,,,,,,361,361,361,361,361,361,361,,,361,,,,,',
',361,,,361,361,361,361,361,361,361,,361,361,361,,361,361,,361,361,,',
',,,,,,,,,,,,,,,,,,361,,,361,,,361,,361,,,,,,361,,,,,,,,361,,,,,361,361',
'361,361,361,361,,,,361,361,,,,,,,361,,,361,380,380,380,,380,361,361',
',380,380,,,,380,,380,380,380,380,380,380,380,,,,,,380,380,380,380,380',
'380,380,,,380,,,,,,,380,,,380,380,380,380,380,380,380,,380,380,380,',
'380,380,,857,,857,857,857,857,857,,,,,,,,,857,,,,,,,380,,,380,,,380',
',380,,,,,,,,857,,,,,,,857,857,857,857,380,380,380,380,380,380,,,,380',
'380,,,,,,,380,,,380,392,392,392,,392,380,380,,392,392,,,,392,857,392',
'392,392,392,392,392,392,,,,,,392,392,392,392,392,392,392,,,392,,,,,',
',392,,,392,392,392,392,392,392,392,,392,392,392,,392,392,,392,392,,',
',,,,,,,,,,,,,,,,,,392,,,392,,,392,,392,,,,,,392,,,,,,,,392,,,,,392,392',
'392,392,392,392,,,,392,392,,,,,,,392,,,392,431,431,431,,431,392,392',
',431,431,,,,431,,431,431,431,431,431,431,431,,,,,,431,431,431,431,431',
'431,431,,,431,,,,,,,431,,,431,431,431,431,431,431,431,,431,431,431,',
'431,431,,431,431,,,,,,,,,,,,,,,,,,,,,431,,,431,,,431,,431,,,,,,431,',
',,,,,,431,,,,,431,431,431,431,431,431,,,,431,431,,,,,,,431,,,431,447',
'447,447,,447,431,431,,447,447,,,,447,,447,447,447,447,447,447,447,,',
',,,447,447,447,447,447,447,447,,,447,,,,,,,447,,,447,447,447,447,447',
'447,447,447,447,447,447,,447,447,,447,447,,,,,,,,,,,,,,,,,,,,,447,,',
'447,447,,447,,447,,447,,447,,447,,,,,,,,447,,,,,447,447,447,447,447',
'447,,,,447,447,,,,,,,447,,,447,,447,,,,447,447,448,448,448,,448,,,,448',
'448,,,,448,,448,448,448,448,448,448,448,,,,,,448,448,448,448,448,448',
'448,,,448,,,,,,,448,,,448,448,448,448,448,448,448,448,448,448,448,,448',
'448,,448,448,,,,,,,,,,,,,,,,,,,,,448,,,448,448,,448,,448,,448,,448,',
'448,,,,,,,,448,,,,,448,448,448,448,448,448,,,,448,448,,,,,,,448,,,448',
',448,,,,448,448,464,464,464,,464,,,,464,464,,,,464,,464,464,464,464',
'464,464,464,,,,,,464,464,464,464,464,464,464,,,464,,,,,,,464,,,464,464',
'464,464,464,464,464,464,464,464,464,,464,464,,464,464,,,,,,,,,,,,,,',
',,,,,,464,,,464,,,464,,464,,464,,,,464,,,,,,,,464,,,,,464,464,464,464',
'464,464,,,,464,464,,,,,,,464,,,464,,464,,,,464,464,465,465,465,,465',
',,,465,465,,,,465,,465,465,465,465,465,465,465,,,,,,465,465,465,465',
'465,465,465,,,465,,,,,,,465,,,465,465,465,465,465,465,465,465,465,465',
'465,,465,465,,465,465,,,,,,,,,,,,,,,,,,,,,465,,,465,,,465,,465,,465',
',,,465,,,,,,,,465,,,,,465,465,465,465,465,465,,,,465,465,,,,,,,465,',
',465,,465,,,,465,465,467,467,467,,467,,,,467,467,,,,467,,467,467,467',
'467,467,467,467,,,,,,467,467,467,467,467,467,467,,,467,,,,,,,467,,,467',
'467,467,467,467,467,467,,467,467,467,,467,467,,467,467,,,,,,,,,,,,,',
',,,,,,,467,,,467,,,467,,467,,,,,,467,,,,,,,,467,,,,,467,467,467,467',
'467,467,,,,467,467,,,,,,,467,,,467,468,468,468,,468,467,467,,468,468',
',,,468,,468,468,468,468,468,468,468,,,,,,468,468,468,468,468,468,468',
',,468,,,,,,,468,,,468,468,468,468,468,468,468,,468,468,468,,468,468',
',468,468,,,,,,,,,,,,,,,,,,,,,468,,,468,,,468,,468,,,,,,468,,,,,,,,468',
',,,,468,468,468,468,468,468,,,,468,468,,,,,,,468,,,468,469,469,469,',
'469,468,468,,469,469,,,,469,,469,469,469,469,469,469,469,,,,,,469,469',
'469,469,469,469,469,,,469,,,,,,,469,,,469,469,469,469,469,469,469,,469',
'469,469,,469,469,,469,469,,,,,,,,,,,,,,,,,,,,,469,,,469,,,469,,469,',
',,,,469,,,,,,,,469,,,,,469,469,469,469,469,469,,,,469,469,,,,,,,469',
',,469,497,497,497,,497,469,469,,497,497,,,,497,,497,497,497,497,497',
'497,497,,,,,,497,497,497,497,497,497,497,,,497,,,,,,,497,,,497,497,497',
'497,497,497,497,,497,497,497,,497,497,,497,497,,,,,,,,,,,,,,,,,,,,,497',
',,497,,,497,,497,,,,,,497,,,,,,,,497,,,,,497,497,497,497,497,497,,,',
'497,497,,,,,,,497,,,497,511,511,511,,511,497,497,,511,511,,,,511,,511',
'511,511,511,511,511,511,,,,,,511,511,511,511,511,511,511,,,511,,,,,',
',511,,,511,511,511,511,511,511,511,,511,511,511,,511,511,,511,511,,',
',,,,,,,,,,,,,,,,,,511,,,511,,511,511,,511,,,,511,,511,,,,,,,,511,,,',
',511,511,511,511,511,511,,,,511,511,,,,,,,511,,,511,517,517,517,,517',
'511,511,,517,517,,,,517,,517,517,517,517,517,517,517,,,,,,517,517,517',
'517,517,517,517,,,517,,,,,,,517,,,517,517,517,517,517,517,517,517,517',
'517,517,,517,517,,517,517,,,,,,,,,,,,,,,,,,,,,517,,,517,,,517,,517,',
'517,,517,,517,,,,,,,,517,,,,,517,517,517,517,517,517,,,,517,517,,,,',
',,517,,,517,,517,,,,517,517,519,519,519,,519,,,,519,519,,,,519,,519',
'519,519,519,519,519,519,,,,,,519,519,519,519,519,519,519,,,519,,,,,',
',519,,,519,519,519,519,519,519,519,519,519,519,519,,519,519,,519,519',
',,,,,,,,,,,,,,,,,,,,519,,,519,,,519,,519,,,,519,,519,,,,,,,,519,,,,',
'519,519,519,519,519,519,,,,519,519,,,,,,,519,,,519,,519,,,,519,519,521',
'521,521,,521,,,,521,521,,,,521,,521,521,521,521,521,521,521,,,,,,521',
'521,521,521,521,521,521,,,521,,,,,,,521,,,521,521,521,521,521,521,521',
',521,521,521,,521,521,,521,521,,,,,,,,,,,,,,,,,,,,,521,,,521,,,521,',
'521,,,,,,521,,,,,,,,521,,,,,521,521,521,521,521,521,,,,521,521,,,,,',
',521,,,521,527,527,527,527,527,521,521,,527,527,,,,527,,527,527,527',
'527,527,527,527,,,,,,527,527,527,527,527,527,527,,,527,,,,,,527,527',
',527,527,527,527,527,527,527,527,,527,527,527,,527,527,,527,527,,,,',
',,,,,,,,,,,,,,,,527,,,527,,,527,,527,,527,,,,527,,,,,,,,527,,,,,527',
'527,527,527,527,527,,,,527,527,,,,,,527,527,,,527,533,533,533,,533,527',
'527,,533,533,,,,533,,533,533,533,533,533,533,533,,,,,,533,533,533,533',
'533,533,533,,,533,,,,,,,533,,,533,533,533,533,533,533,533,,533,533,533',
',533,533,,892,,892,892,892,892,892,,,,,,,,,892,,,,,,,533,,,533,,,533',
',533,,,,,,,,892,,,,,,,892,892,892,892,533,533,533,533,533,533,,,,533',
'533,,,,,,,533,,,533,535,535,535,,535,533,533,,535,535,,,,535,892,535',
'535,535,535,535,535,535,,,,,,535,535,535,535,535,535,535,,,535,,,,,',
',535,,,535,535,535,535,535,535,535,535,535,535,535,,535,535,,535,535',
',,,,,,,,,,,,,,,,,,,,535,,,535,,,535,,535,,535,,,,535,,,,,,,,535,,,,',
'535,535,535,535,535,535,,,,535,535,,,,,,,535,,,535,,535,,,,535,535,538',
'538,538,,538,,,,538,538,,,,538,,538,538,538,538,538,538,538,,,,,,538',
'538,538,538,538,538,538,,,538,,,,,,,538,,,538,538,538,538,538,538,538',
'538,538,538,538,,538,538,,538,538,,,,,,,,,,,,,,,,,,,,,538,,,538,,,538',
',538,,538,,,,538,,,,,,,,538,,,,,538,538,538,538,538,538,,,,538,538,',
',,,,,538,,,538,,538,,,,538,538,544,544,544,,544,,,,544,544,,,,544,,544',
'544,544,544,544,544,544,,,,,,544,544,544,544,544,544,544,,,544,,,,,',
',544,,,544,544,544,544,544,544,544,,544,544,544,,544,544,,894,,894,894',
'894,894,894,,,,,,,,,894,,,,,,,544,,,544,,,544,,544,,,,,,,,894,,,,,,',
'894,894,894,894,544,544,544,544,544,544,,,,544,544,,,,,,,544,,,544,547',
'547,547,,547,544,544,,547,547,,,,547,894,547,547,547,547,547,547,547',
',,,,,547,547,547,547,547,547,547,,,547,,,,,,,547,,,547,547,547,547,547',
'547,547,,547,547,547,,547,547,,547,547,,,,,,,,,,,,,,,,,,,,,547,,,547',
',,547,,547,,,,,,547,,,,,,,,547,,,,,547,547,547,547,547,547,,,,547,547',
',,,,,,547,,,547,548,548,548,,548,547,547,,548,548,,,,548,,548,548,548',
'548,548,548,548,,,,,,548,548,548,548,548,548,548,,,548,,,,,,,548,,,548',
'548,548,548,548,548,548,,548,548,548,,548,548,,548,548,,,,,,,,,,,,,',
',,,,,,,548,,,548,,,548,,548,,,,,,548,,,,,,,,548,,,,,548,548,548,548',
'548,548,,,,548,548,,,,,,,548,,,548,549,549,549,,549,548,548,,549,549',
',,,549,,549,549,549,549,549,549,549,,,,,,549,549,549,549,549,549,549',
',,549,,,,,,,549,,,549,549,549,549,549,549,549,,549,549,549,,549,549',
',549,549,,,,,,,,,,,,,,,,,,,,,549,,,549,,,549,,549,,,,,,549,,,,,,,,549',
',,,,549,549,549,549,549,549,,,,549,549,,,,,,,549,,,549,553,553,553,',
'553,549,549,,553,553,,,,553,,553,553,553,553,553,553,553,,,,,,553,553',
'553,553,553,553,553,,,553,,,,,,,553,,,553,553,553,553,553,553,553,,553',
'553,553,,553,553,,553,553,,,,,,,,,,,,,,,,,,,,,553,,,553,,,553,,553,',
',,,,553,,,,,,,,553,,,,,553,553,553,553,553,553,,,,553,553,,,,,,,553',
',,553,559,559,559,,559,553,553,,559,559,,,,559,,559,559,559,559,559',
'559,559,,,,,,559,559,559,559,559,559,559,,,559,,,,,,,559,,,559,559,559',
'559,559,559,559,559,559,559,559,,559,559,,559,559,,,,,,,,,,,,,,,,,,',
',,559,,,559,,,559,,559,,559,,559,,559,,,,,,,,559,,,,,559,559,559,559',
'559,559,,,,559,559,,,,,,,559,,,559,,559,,,,559,559,562,562,562,,562',
',,,562,562,,,,562,,562,562,562,562,562,562,562,,,,,,562,562,562,562',
'562,562,562,,,562,,,,,,,562,,,562,562,562,562,562,562,562,562,562,562',
'562,,562,562,,562,562,,,,,,,,,,,,,,,,,,,,,562,,,562,,,562,,562,,,,,',
'562,,,,,,,,562,,,,,562,562,562,562,562,562,,,,562,562,,,,,,,562,,,562',
',562,,,,562,562,567,567,567,567,567,,,,567,567,,,,567,,567,567,567,567',
'567,567,567,,,,,,567,567,567,567,567,567,567,,,567,,,,,,567,567,,567',
'567,567,567,567,567,567,567,,567,567,567,,567,567,,567,567,,,,,,,,,',
',,,,,,,,,,,567,,,567,,,567,,567,,567,,,,567,,,,,,,,567,,,,,567,567,567',
'567,567,567,,,,567,567,,,,,,,567,,,567,568,568,568,568,568,567,567,',
'568,568,,,,568,,568,568,568,568,568,568,568,,,,,,568,568,568,568,568',
'568,568,,,568,,,,,,568,568,,568,568,568,568,568,568,568,568,,568,568',
'568,,568,568,,568,568,,,,,,,,,,,,,,,,,,,,,568,,,568,,,568,,568,,568',
',,,568,,,,,,,,568,,,,,568,568,568,568,568,568,,,,568,568,,,,,,,568,',
',568,574,574,574,,574,568,568,,574,574,,,,574,,574,574,574,574,574,574',
'574,,,,,,574,574,574,574,574,574,574,,,574,,,,,,,574,,,574,574,574,574',
'574,574,574,,574,574,574,,574,574,,962,,962,962,962,962,962,,,,,,,,',
'962,,,,,,,574,,,574,,,574,,574,,,,,,,,962,962,,,,,,962,962,962,962,574',
'574,574,574,574,574,,,,574,574,,,,,,,574,,,574,595,595,595,595,595,574',
'574,,595,595,,,,595,962,595,595,595,595,595,595,595,,,,,,595,595,595',
'595,595,595,595,,,595,,,,,,595,595,,595,595,595,595,595,595,595,595',
',595,595,595,,595,595,,595,595,,,,,,,,,,,,,,,,,,,,,595,,,595,,,595,',
'595,,595,,,,595,,,,,,,,595,,,,,595,595,595,595,595,595,,,,595,595,,',
',,,,595,,,595,599,599,599,599,599,595,595,,599,599,,,,599,,599,599,599',
'599,599,599,599,,,,,,599,599,599,599,599,599,599,,,599,,,,,,599,599',
',599,599,599,599,599,599,599,599,,599,599,599,,599,599,,599,599,,,,',
',,,,,,,,,,,,,,,,599,,,599,,,599,,599,,599,,,,599,,,,,,,,599,,,,,599',
'599,599,599,599,599,,,,599,599,,,,,,,599,,,599,604,604,604,604,604,599',
'599,,604,604,,,,604,,604,604,604,604,604,604,604,,,,,,604,604,604,604',
'604,604,604,,,604,,,,,,604,604,,604,604,604,604,604,604,604,604,,604',
'604,604,,604,604,,604,604,,,,,,,,,,,,,,,,,,,,,604,,,604,,,604,,604,',
'604,,,,604,,,,,,,,604,,,,,604,604,604,604,604,604,,,,604,604,,,,,,,604',
',,604,606,606,606,,606,604,604,,606,606,,,,606,,606,606,606,606,606',
'606,606,,,,,,606,606,606,606,606,606,606,,,606,,,,,,,606,,,606,606,606',
'606,606,606,606,606,606,606,606,,606,606,,606,606,,,,,,,,,,,,,,,,,,',
',,606,,,606,,,606,,606,,606,,,,606,,,,,,,,606,,,,,606,606,606,606,606',
'606,,,,606,606,,,,,,,606,,,606,,606,,,,606,606,609,609,609,,609,,,,609',
'609,,,,609,,609,609,609,609,609,609,609,,,,,,609,609,609,609,609,609',
'609,,,609,,,,,,,609,,,609,609,609,609,609,609,609,609,609,609,609,,609',
'609,,609,609,,,,,,,,,,,,,,,,,,,,,609,,,609,,,609,,609,,609,,,,609,,',
',,,,,609,,,,,609,609,609,609,609,609,,,,609,609,,,,,,,609,,,609,,609',
',,,609,609,615,615,615,,615,,,,615,615,,,,615,,615,615,615,615,615,615',
'615,,,,,,615,615,615,615,615,615,615,,,615,,,,,,,615,,,615,615,615,615',
'615,615,615,615,615,615,615,,615,615,,615,615,,,,,,,,,,,,,,,,,,,,,615',
',,615,,,615,,615,,615,,,,615,,,,,,,,615,,,,,615,615,615,615,615,615',
',,,615,615,,,,,,,615,,,615,,615,,,,615,615,619,619,619,,619,,,,619,619',
',,,619,,619,619,619,619,619,619,619,,,,,,619,619,619,619,619,619,619',
',,619,,,,,,,619,,,619,619,619,619,619,619,619,,619,619,619,,619,619',
',619,619,,,,,,,,,,,,,,,,,,,,,619,,,619,,,619,,619,,,,,,619,,,,,,,,619',
',,,,619,619,619,619,619,619,,,,619,619,,,,,,,619,,,619,621,621,621,',
'621,619,619,,621,621,,,,621,,621,621,621,621,621,621,621,,,,,,621,621',
'621,621,621,621,621,,,621,,,,,,,621,,,621,621,621,621,621,621,621,,621',
'621,621,,621,621,,621,621,,,,,,,,,,,,,,,,,,,,,621,,,621,,,621,,621,',
',,,,621,,,,,,,,621,,,,,621,621,621,621,621,621,,,,621,621,,,,,,,621',
',,621,649,649,649,,649,621,621,,649,649,,,,649,,649,649,649,649,649',
'649,649,,,,,,649,649,649,649,649,649,649,,,649,,,,,,,649,,,649,649,649',
'649,649,649,649,,649,649,649,,649,649,,649,649,,,,,,,,,,,,,,,,,,,,,649',
',,649,,,649,,649,,649,,,,649,,,,,,,,649,,,,,649,649,649,649,649,649',
',,,649,649,,,,,,,649,,,649,652,652,652,,652,649,649,,652,652,,,,652',
',652,652,652,652,652,652,652,,,,,,652,652,652,652,652,652,652,,,652',
',,,,,,652,,,652,652,652,652,652,652,652,,652,652,652,,652,652,,652,652',
',,,,,,,,,,,,,,,,,,,,652,,,652,,,652,,652,,,,,,652,,,,,,,,652,,,,,652',
'652,652,652,652,652,,,,652,652,,,,,,,652,,,652,653,653,653,,653,652',
'652,,653,653,,,,653,,653,653,653,653,653,653,653,,,,,,653,653,653,653',
'653,653,653,,,653,,,,,,,653,,,653,653,653,653,653,653,653,,653,653,653',
',653,653,,653,653,,,,,,,,,,,,,,,,,,,,,653,,,653,,,653,,653,,,,,,653',
',,,,,,,653,,,,,653,653,653,653,653,653,,,,653,653,,,,,,,653,,,653,658',
'658,658,,658,653,653,,658,658,,,,658,,658,658,658,658,658,658,658,,',
',,,658,658,658,658,658,658,658,,,658,,,,,,,658,,,658,658,658,658,658',
'658,658,,658,658,658,,658,658,,658,658,,,,,,,,,,,,,,,,,,,,,658,,,658',
',,658,,658,,,,,,658,,,,,,,,658,,,,,658,658,658,658,658,658,,,,658,658',
',,,,,,658,,,658,661,661,661,,661,658,658,,661,661,,,,661,,661,661,661',
'661,661,661,661,,,,,,661,661,661,661,661,661,661,,,661,,,,,,,661,,,661',
'661,661,661,661,661,661,,661,661,661,,661,661,,661,661,,,,,,,,,,,,,',
',,,,,,,661,,,661,,,661,,661,,,,,,661,,,,,,,,661,,,,,661,661,661,661',
'661,661,,,,661,661,,,,,,,661,,,661,664,664,664,,664,661,661,,664,664',
',,,664,,664,664,664,664,664,664,664,,,,,,664,664,664,664,664,664,664',
',,664,,,,,,,664,,,664,664,664,664,664,664,664,,664,664,664,,664,664',
',664,664,,,,,,,,,,,,,,,,,,,,,664,,,664,,,664,,664,,,,,,664,,,,,,,,664',
',,,,664,664,664,664,664,664,,,,664,664,,,,,,,664,,,664,665,665,665,',
'665,664,664,,665,665,,,,665,,665,665,665,665,665,665,665,,,,,,665,665',
'665,665,665,665,665,,,665,,,,,,,665,,,665,665,665,665,665,665,665,,665',
'665,665,,665,665,,665,665,,,,,,,,,,,,,,,,,,,,,665,,,665,,,665,,665,',
',,,,665,,,,,,,,665,,,,,665,665,665,665,665,665,,,,665,665,,,,,,,665',
',,665,678,678,678,678,678,665,665,,678,678,,,,678,,678,678,678,678,678',
'678,678,,,,,,678,678,678,678,678,678,678,,,678,,,,,,678,678,,678,678',
'678,678,678,678,678,678,,678,678,678,,678,678,,678,678,,,,,,,,,,,,,',
',,,,,,,678,,,678,,,678,,678,,678,,,,678,,,,,,,,678,,,,,678,678,678,678',
'678,678,,,,678,678,,,,,,,678,,,678,685,685,685,685,685,678,678,,685',
'685,,,,685,,685,685,685,685,685,685,685,,,,,,685,685,685,685,685,685',
'685,,,685,,,,,,685,685,,685,685,685,685,685,685,685,685,,685,685,685',
',685,685,,685,685,,,,,,,,,,,,,,,,,,,,,685,,,685,,,685,,685,,685,,,,685',
',,,,,,,685,,,,,685,685,685,685,685,685,,,,685,685,,,,,,,685,,,685,688',
'688,688,,688,685,685,,688,688,,,,688,,688,688,688,688,688,688,688,,',
',,,688,688,688,688,688,688,688,,,688,,,,,,,688,,,688,688,688,688,688',
'688,688,688,688,688,688,,688,688,,688,688,,,,,,,,,,,,,,,,,,,,,688,,',
'688,,,688,,688,,688,,688,,688,,,,,,,,688,,,,,688,688,688,688,688,688',
',,,688,688,,,,,,,688,,,688,,688,,,,688,688,689,689,689,,689,,,,689,689',
',,,689,,689,689,689,689,689,689,689,,,,,,689,689,689,689,689,689,689',
',,689,,,,,,,689,,,689,689,689,689,689,689,689,689,689,689,689,,689,689',
',689,689,,,,,,,,,,,,,,,,,,,,,689,,,689,,,689,,689,,,,689,,689,,,,,,',
',689,,,,,689,689,689,689,689,689,,,,689,689,,,,,,,689,,,689,,689,,,',
'689,689,695,695,695,695,695,,,,695,695,,,,695,,695,695,695,695,695,695',
'695,,,,,,695,695,695,695,695,695,695,,,695,,,,,,695,695,,695,695,695',
'695,695,695,695,695,,695,695,695,,695,695,,695,695,,,,,,,,,,,,,,,,,',
',,,695,,,695,,,695,,695,,695,,,,695,,,,,,,,695,,,,,695,695,695,695,695',
'695,,,,695,695,,,,,,,695,,,695,696,696,696,696,696,695,695,,696,696',
',,,696,,696,696,696,696,696,696,696,,,,,,696,696,696,696,696,696,696',
',,696,,,,,,696,696,,696,696,696,696,696,696,696,696,,696,696,696,,696',
'696,,696,696,,,,,,,,,,,,,,,,,,,,,696,,,696,,,696,,696,,696,,,,696,,',
',,,,,696,,,,,696,696,696,696,696,696,,,,696,696,,,,,,,696,,,696,701',
'701,701,,701,696,696,,701,701,,,,701,,701,701,701,701,701,701,701,,',
',,,701,701,701,701,701,701,701,,,701,,,,,,,701,,,701,701,701,701,701',
'701,701,,701,701,701,,701,701,,701,701,,,,,,,,,,,,,,,,,,,,,701,,,701',
',,701,,701,,,,,,701,,,,,,,,701,,,,,701,701,701,701,701,701,,,,701,701',
',,,,,,701,,,701,704,704,704,,704,701,701,,704,704,,,,704,,704,704,704',
'704,704,704,704,,,,,,704,704,704,704,704,704,704,,,704,,,,,,,704,,,704',
'704,704,704,704,704,704,,704,704,704,,704,704,,704,704,,,,,,,,,,,,,',
',,,,,,,704,,,704,,,704,,704,,,,,,704,,,,,,,,704,,,,,704,704,704,704',
'704,704,,,,704,704,,,,,,,704,,,704,707,707,707,,707,704,704,,707,707',
',,,707,,707,707,707,707,707,707,707,,,,,,707,707,707,707,707,707,707',
',,707,,,,,,,707,,,707,707,707,707,707,707,707,,707,707,707,,707,707',
',995,,995,995,995,995,995,,,,,,,,,995,,,,,,,707,,,707,,,707,,707,,,',
',,,,995,,,,,,,995,995,995,995,707,707,707,707,707,707,,,,707,707,,,',
',,,707,,,707,720,720,720,,720,707,707,,720,720,,,,720,995,720,720,720',
'720,720,720,720,,,,,,720,720,720,720,720,720,720,,,720,,,,,,,720,,,720',
'720,720,720,720,720,720,,720,720,720,,720,720,,,,,,,,,,,,,,,,,,,,,,',
',720,,,720,,,720,,720,,,,,,,,,,,,,,,,,,,720,720,720,720,720,720,,,,720',
'720,,,,,,,720,,,720,726,726,726,,726,720,720,,726,726,,,,726,,726,726',
'726,726,726,726,726,,,,,,726,726,726,726,726,726,726,,,726,,,,,,,726',
',,726,726,726,726,726,726,726,,726,726,726,,726,726,,726,726,,,,,,,',
',,,,,,,,,,,,,726,,,726,,,726,,726,,726,,,,726,,,,,,,,726,,,,,726,726',
'726,726,726,726,,,,726,726,,,,,,,726,,,726,764,764,764,,764,726,726',
',764,764,,,,764,,764,764,764,764,764,764,764,,,,,,764,764,764,764,764',
'764,764,,,764,,,,,,,764,,,764,764,764,764,764,764,764,,764,764,764,',
'764,764,,764,764,,,,,,,,,,,,,,,,,,,,,764,,,764,,,764,,764,,764,,,,764',
',,,,,,,764,,,,,764,764,764,764,764,764,,,,764,764,,,,,,,764,,,764,771',
'771,771,,771,764,764,,771,771,,,,771,,771,771,771,771,771,771,771,,',
',,,771,771,771,771,771,771,771,,,771,,,,,,,771,,,771,771,771,771,771',
'771,771,,771,771,771,,771,771,,771,771,,,,,,,,,,,,,,,,,,,,,771,,,771',
',,771,,771,,,,,,771,,,,,,,,771,,,,,771,771,771,771,771,771,,,,771,771',
',,,,,,771,,,771,776,776,776,776,776,771,771,,776,776,,,,776,,776,776',
'776,776,776,776,776,,,,,,776,776,776,776,776,776,776,,,776,,,,,,776',
'776,,776,776,776,776,776,776,776,776,,776,776,776,,776,776,,776,776',
',,,,,,,,,,,,,,,,,,,,776,,,776,,,776,,776,,776,,,,776,,,,,,,,776,,,,',
'776,776,776,776,776,776,,,,776,776,,,,,,,776,,,776,780,780,780,780,780',
'776,776,,780,780,,,,780,,780,780,780,780,780,780,780,,,,,,780,780,780',
'780,780,780,780,,,780,,,,,,780,780,,780,780,780,780,780,780,780,780',
',780,780,780,,780,780,,780,780,,,,,,,,,,,,,,,,,,,,,780,,,780,,,780,',
'780,,780,,,,780,,,,,,,,780,,,,,780,780,780,780,780,780,,,,780,780,,',
',,,,780,,,780,781,781,781,781,781,780,780,,781,781,,,,781,,781,781,781',
'781,781,781,781,,,,,,781,781,781,781,781,781,781,,,781,,,,,,781,781',
',781,781,781,781,781,781,781,781,,781,781,781,,781,781,,781,781,,,,',
',,,,,,,,,,,,,,,,781,,,781,,,781,,781,,781,,,,781,,,,,,,,781,,,,,781',
'781,781,781,781,781,,,,781,781,,,,,,,781,,,781,784,784,784,,784,781',
'781,,784,784,,,,784,,784,784,784,784,784,784,784,,,,,,784,784,784,784',
'784,784,784,,,784,,,,,,,784,,,784,784,784,784,784,784,784,,784,784,784',
',784,784,,784,784,,,,,,,,,,,,,,,,,,,,,784,,,784,,,784,,784,,,,,,784',
',,,,,,,784,,,,,784,784,784,784,784,784,,,,784,784,,,,,,,784,,,784,798',
'798,798,798,798,784,784,,798,798,,,,798,,798,798,798,798,798,798,798',
',,,,,798,798,798,798,798,798,798,,,798,,,,,,798,798,,798,798,798,798',
'798,798,798,798,,798,798,798,,798,798,,798,798,,,,,,,,,,,,,,,,,,,,,798',
',,798,,,798,,798,,798,,,,798,,,,,,,,798,,,,,798,798,798,798,798,798',
',,,798,798,,,,,,,798,,,798,803,803,803,,803,798,798,,803,803,,,,803',
',803,803,803,803,803,803,803,,,,,,803,803,803,803,803,803,803,,,803',
',,,,,,803,,,803,803,803,803,803,803,803,,803,803,803,,803,803,,803,803',
',,,,,,,,,,,,,,,,,,,,803,,,803,,,803,,803,,,,,,803,,,,,,,,803,,,,,803',
'803,803,803,803,803,,,,803,803,,,,,,,803,,,803,804,804,804,,804,803',
'803,,804,804,,,,804,,804,804,804,804,804,804,804,,,,,,804,804,804,804',
'804,804,804,,,804,,,,,,,804,,,804,804,804,804,804,804,804,,804,804,804',
',804,804,,804,804,,,,,,,,,,,,,,,,,,,,,804,,,804,,,804,,804,,,,,,804',
',,,,,,,804,,,,,804,804,804,804,804,804,,,,804,804,,,,,,,804,,,804,805',
'805,805,,805,804,804,,805,805,,,,805,,805,805,805,805,805,805,805,,',
',,,805,805,805,805,805,805,805,,,805,,,,,,,805,,,805,805,805,805,805',
'805,805,,805,805,805,,805,805,,805,805,,,,,,,,,,,,,,,,,,,,,805,,,805',
',,805,,805,,,,,,805,,,,,,,,805,,,,,805,805,805,805,805,805,,,,805,805',
',,,,,,805,,,805,817,817,817,,817,805,805,,817,817,,,,817,,817,817,817',
'817,817,817,817,,,,,,817,817,817,817,817,817,817,,,817,,,,,,,817,,,817',
'817,817,817,817,817,817,,817,817,817,,817,817,,817,817,,,,,,,,,,,,,',
',,,,,,,817,,,817,,,817,,817,,,,,,817,,,,,,,,817,,,,,817,817,817,817',
'817,817,,,,817,817,,,,,,,817,,,817,818,818,818,,818,817,817,,818,818',
',,,818,,818,818,818,818,818,818,818,,,,,,818,818,818,818,818,818,818',
',,818,,,,,,,818,,,818,818,818,818,818,818,818,,818,818,818,,818,818',
',818,818,,,,,,,,,,,,,,,,,,,,,818,,,818,,,818,,818,,,,,,818,,,,,,,,818',
',,,,818,818,818,818,818,818,,,,818,818,,,,,,,818,,,818,819,819,819,',
'819,818,818,,819,819,,,,819,,819,819,819,819,819,819,819,,,,,,819,819',
'819,819,819,819,819,,,819,,,,,,,819,,,819,819,819,819,819,819,819,,819',
'819,819,,819,819,,819,819,,,,,,,,,,,,,,,,,,,,,819,,,819,,,819,,819,',
',,,,819,,,,,,,,819,,,,,819,819,819,819,819,819,,,,819,819,,,,,,,819',
',,819,830,830,830,,830,819,819,,830,830,,,,830,,830,830,830,830,830',
'830,830,,,,,,830,830,830,830,830,830,830,,,830,,,,,,,830,,,830,830,830',
'830,830,830,830,,830,830,830,,830,830,,830,830,,,,,,,,,,,,,,,,,,,,,830',
',,830,,,830,,830,,830,,,,830,,,,,,,,830,,,,,830,830,830,830,830,830',
',,,830,830,,,,,,,830,,,830,844,844,844,844,844,830,830,,844,844,,,,844',
',844,844,844,844,844,844,844,,,,,,844,844,844,844,844,844,844,,,844',
',,,,,844,844,,844,844,844,844,844,844,844,844,,844,844,844,,844,844',
',844,844,,,,,,,,,,,,,,,,,,,,,844,,,844,,,844,,844,,844,,,,844,,,,,,',
',844,,,,,844,844,844,844,844,844,,,,844,844,,,,,,,844,,,844,870,870',
'870,,870,844,844,,870,870,,,,870,,870,870,870,870,870,870,870,,,,,,870',
'870,870,870,870,870,870,,,870,,,,,,,870,,,870,870,870,870,870,870,870',
',870,870,870,,870,870,,870,870,,,,,,,,,,,,,,,,,,,,,870,,,870,,,870,',
'870,,,,,,870,,,,,,,,870,,,,,870,870,870,870,870,870,,,,870,870,,,,,',
',870,,,870,872,872,872,872,872,870,870,,872,872,,,,872,,872,872,872',
'872,872,872,872,,,,,,872,872,872,872,872,872,872,,,872,,,,,,872,872',
',872,872,872,872,872,872,872,872,,872,872,872,,872,872,,872,872,,,,',
',,,,,,,,,,,,,,,,872,,,872,,,872,,872,,872,,,,872,,,,,,,,872,,,,,872',
'872,872,872,872,872,,,,872,872,,,,,,,872,,,872,873,873,873,873,873,872',
'872,,873,873,,,,873,,873,873,873,873,873,873,873,,,,,,873,873,873,873',
'873,873,873,,,873,,,,,,873,873,,873,873,873,873,873,873,873,873,,873',
'873,873,,873,873,,873,873,,,,,,,,,,,,,,,,,,,,,873,,,873,,,873,,873,',
'873,,,,873,,,,,,,,873,,,,,873,873,873,873,873,873,,,,873,873,,,,,,,873',
',,873,898,898,898,,898,873,873,,898,898,,,,898,,898,898,898,898,898',
'898,898,,,,,,898,898,898,898,898,898,898,,,898,,,,,,,898,,,898,898,898',
'898,898,898,898,,898,898,898,,898,898,,898,898,,,,,,,,,,,,,,,,,,,,,898',
',,898,,,898,,898,,,,,,898,,,,,,,,898,,,,,898,898,898,898,898,898,,,',
'898,898,,,,,,,898,,,898,912,912,912,,912,898,898,,912,912,,,,912,,912',
'912,912,912,912,912,912,,,,,,912,912,912,912,912,912,912,,,912,,,,,',
',912,,,912,912,912,912,912,912,912,,912,912,912,,912,912,,912,912,,',
',,,,,,,,,,,,,,,,,,912,,,912,,,912,,912,,,,,,912,,,,,,,,912,,,,,912,912',
'912,912,912,912,,,,912,912,,,,,,,912,,,912,913,913,913,,913,912,912',
',913,913,,,,913,,913,913,913,913,913,913,913,,,,,,913,913,913,913,913',
'913,913,,,913,,,,,,,913,,,913,913,913,913,913,913,913,,913,913,913,',
'913,913,,913,913,,,,,,,,,,,,,,,,,,,,,913,,,913,,,913,,913,,,,,,913,',
',,,,,,913,,,,,913,913,913,913,913,913,,,,913,913,,,,,,,913,,,913,914',
'914,914,,914,913,913,,914,914,,,,914,,914,914,914,914,914,914,914,,',
',,,914,914,914,914,914,914,914,,,914,,,,,,,914,,,914,914,914,914,914',
'914,914,,914,914,914,,914,914,,914,914,,,,,,,,,,,,,,,,,,,,,914,,,914',
',,914,,914,,,,,,914,,,,,,,,914,,,,,914,914,914,914,914,914,,,,914,914',
',,,,,,914,,,914,920,920,920,,920,914,914,,920,920,,,,920,,920,920,920',
'920,920,920,920,,,,,,920,920,920,920,920,920,920,,,920,,,,,,,920,,,920',
'920,920,920,920,920,920,920,920,920,920,,920,920,,920,920,,,,,,,,,,',
',,,,,,,,,,920,,,920,,,920,,920,,,,920,,920,,,,,,,,920,,,,,920,920,920',
'920,920,920,,,,920,920,,,,,,,920,,,920,,920,,,,920,920,925,925,925,925',
'925,,,,925,925,,,,925,,925,925,925,925,925,925,925,,,,,,925,925,925',
'925,925,925,925,,,925,,,,,,925,925,,925,925,925,925,925,925,925,925',
',925,925,925,,925,925,,925,925,,,,,,,,,,,,,,,,,,,,,925,,,925,,,925,',
'925,,925,,,,925,,,,,,,,925,,,,,925,925,925,925,925,925,,,,925,925,,',
',,,,925,,,925,929,929,929,,929,925,925,,929,929,,,,929,,929,929,929',
'929,929,929,929,,,,,,929,929,929,929,929,929,929,,,929,,,,,,,929,,,929',
'929,929,929,929,929,929,,929,929,929,,929,929,,,,,,,,,,,,,,,,,,,,,,',
',929,,,929,,,929,,929,,,,,,,,,,,,,,,,,,,929,929,929,929,929,929,,,,929',
'929,,,,,,,929,,,929,944,944,944,,944,929,929,,944,944,,,,944,,944,944',
'944,944,944,944,944,,,,,,944,944,944,944,944,944,944,,,944,,,,,,,944',
',,944,944,944,944,944,944,944,,944,944,944,,944,944,,944,944,,,,,,,',
',,,,,,,,,,,,,944,,,944,,,944,,944,,944,,,,944,,,,,,,,944,,,,,944,944',
'944,944,944,944,,,,944,944,,,,,,,944,,,944,945,945,945,945,945,944,944',
',945,945,,,,945,,945,945,945,945,945,945,945,,,,,,945,945,945,945,945',
'945,945,,,945,,,,,,945,945,,945,945,945,945,945,945,945,945,,945,945',
'945,,945,945,,945,945,,,,,,,,,,,,,,,,,,,,,945,,,945,,,945,,945,,945',
',,,945,,,,,,,,945,,,,,945,945,945,945,945,945,,,,945,945,,,,,,,945,',
',945,948,948,948,948,948,945,945,,948,948,,,,948,,948,948,948,948,948',
'948,948,,,,,,948,948,948,948,948,948,948,,,948,,,,,,948,948,,948,948',
'948,948,948,948,948,948,,948,948,948,,948,948,,948,948,,,,,,,,,,,,,',
',,,,,,,948,,,948,,,948,,948,,948,,,,948,,,,,,,,948,,,,,948,948,948,948',
'948,948,,,,948,948,,,,,,,948,,,948,971,971,971,,971,948,948,,971,971',
',,,971,,971,971,971,971,971,971,971,,,,,,971,971,971,971,971,971,971',
',,971,,,,,,,971,,,971,971,971,971,971,971,971,,971,971,971,,971,971',
',971,971,,,,,,,,,,,,,,,,,,,,,971,,,971,,,971,,971,,971,,971,,971,,,',
',,,,971,,,,,971,971,971,971,971,971,,,,971,971,,,,,,,971,,,971,973,973',
'973,973,973,971,971,,973,973,,,,973,,973,973,973,973,973,973,973,,,',
',,973,973,973,973,973,973,973,,,973,,,,,,973,973,,973,973,973,973,973',
'973,973,973,,973,973,973,,973,973,,973,973,,,,,,,,,,,,,,,,,,,,,973,',
',973,,,973,,973,,973,,,,973,,,,,,,,973,,,,,973,973,973,973,973,973,',
',,973,973,,,,,,,973,,,973,986,986,986,986,986,973,973,,986,986,,,,986',
',986,986,986,986,986,986,986,,,,,,986,986,986,986,986,986,986,,,986',
',,,,,986,986,,986,986,986,986,986,986,986,986,,986,986,986,,986,986',
',986,986,,,,,,,,,,,,,,,,,,,,,986,,,986,,,986,,986,,986,,,,986,,,,,,',
',986,,,,,986,986,986,986,986,986,,,,986,986,,,,,,,986,,,986,991,991',
'991,991,991,986,986,,991,991,,,,991,,991,991,991,991,991,991,991,,,',
',,991,991,991,991,991,991,991,,,991,,,,,,991,991,,991,991,991,991,991',
'991,991,991,,991,991,991,,991,991,,991,991,,,,,,,,,,,,,,,,,,,,,991,',
',991,,,991,,991,,991,,,,991,,,,,,,,991,,,,,991,991,991,991,991,991,',
',,991,991,,,,,,,991,,,991,1004,1004,1004,1004,1004,991,991,,1004,1004',
',,,1004,,1004,1004,1004,1004,1004,1004,1004,,,,,,1004,1004,1004,1004',
'1004,1004,1004,,,1004,,,,,,1004,1004,,1004,1004,1004,1004,1004,1004',
'1004,1004,,1004,1004,1004,,1004,1004,,1004,1004,,,,,,,,,,,,,,,,,,,,',
'1004,,,1004,,,1004,,1004,,1004,,,,1004,,,,,,,,1004,,,,,1004,1004,1004',
'1004,1004,1004,,,,1004,1004,,,,,,,1004,,,1004,1008,1008,1008,,1008,1004',
'1004,,1008,1008,,,,1008,,1008,1008,1008,1008,1008,1008,1008,,,,,,1008',
'1008,1008,1008,1008,1008,1008,,,1008,,,,,,,1008,,,1008,1008,1008,1008',
'1008,1008,1008,1008,1008,1008,1008,,1008,1008,,1008,1008,,,,,,,,,,,',
',,,,,,,,,1008,,,1008,,,1008,,1008,,1008,,,,1008,,,,,,,,1008,,,,443,1008',
'1008,1008,1008,1008,1008,443,443,443,1008,1008,,443,443,,443,,1008,',
',1008,,1008,,443,,1008,1008,,,,,,,,443,443,,443,443,443,443,443,,,,',
',,,,,,,,,,,,,,,,,443,443,443,443,443,443,443,443,443,443,443,443,443',
'443,443,,,443,443,443,,443,,,,443,,,,,,443,,443,,443,443,443,443,443',
'443,443,,443,443,443,,,,,,,,,,,,,443,443,,443,,443,,445,443,,443,,,443',
'445,445,445,,,,445,445,,445,,,,,,,,,,,,,,,,,,,,445,445,,445,445,445',
'445,445,,,,,,,,,,,,,,,,,,,,,,445,445,445,445,445,445,445,445,445,445',
'445,445,445,445,445,,,445,445,445,,445,,,,445,,,,,,445,,445,,445,445',
'445,445,445,445,445,,445,,445,,,,,,,,,,,,,445,445,,445,,445,,668,445',
',445,,,445,668,668,668,,,668,668,668,,668,,,,,,,,,668,668,668,,,,,,',
',,668,668,,668,668,668,668,668,,,,,,,,,,,,,,,,,,,,,,668,668,668,668',
'668,668,668,668,668,668,668,668,668,668,668,,,668,668,668,,668,668,',
',668,,668,,668,,668,,668,,668,668,668,668,668,668,668,,668,668,668,',
',,,,,,,,,,,668,668,668,668,,668,,669,668,,668,,,668,669,669,669,,,669',
'669,669,,669,,,,,,,,,,669,669,,,,,,,,,669,669,,669,669,669,669,669,',
',,,,,,,,,,,,,,,,,,,,669,669,669,669,669,669,669,669,669,669,669,669',
'669,669,669,,,669,669,669,,669,669,,,669,,669,,669,,669,,669,,669,669',
'669,669,669,669,669,,669,,669,,,,,,,,,,,,,669,669,669,669,,669,,25,669',
',669,,,669,25,25,25,,,25,25,25,,25,,,,,,,,,25,25,25,,,,,,,,,25,25,,25',
'25,25,25,25,,,,,,,,,,,,,,,,,,,,,,25,25,25,25,25,25,25,25,25,25,25,25',
'25,25,25,,,25,25,25,,,25,,25,25,,25,,25,,25,,25,,25,25,25,25,25,25,25',
',25,25,25,,,,,,,,,,,,,25,25,25,25,26,25,,,25,,25,26,26,26,,,26,26,26',
',26,,,,,,,,,,26,26,,,,,,,,,26,26,,26,26,26,26,26,,,,,,,,,,,,,,,,,,,',
',,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,,,26,26,26,,,26,,26,26',
',26,,26,,26,,26,,26,26,26,26,26,26,26,,26,,26,,,,,,,,,,,,,26,26,26,26',
'51,26,,,26,,26,51,51,51,,,51,51,51,,51,,,,,,,,,,51,51,51,,,,,,,,51,51',
',51,51,51,51,51,,,,,,,,,,,,,,,,,,,,,,51,51,51,51,51,51,51,51,51,51,51',
'51,51,51,51,,,51,51,51,,,51,,,51,,51,,51,,51,,51,,51,51,51,51,51,51',
'51,,51,,51,,,,,,,,,,,,,51,51,51,51,439,51,,51,51,,51,439,439,439,,,439',
'439,439,,439,,,,,,,,,439,439,439,,,,,,,,,439,439,,439,439,439,439,439',
',,,,,,,,,,,,,,,,,,,,,439,439,439,439,439,439,439,439,439,439,439,439',
'439,439,439,,,439,439,439,,,439,,439,439,,439,,439,,439,,439,,439,439',
'439,439,439,439,439,,439,439,439,,,,,,,,,,,,,439,439,439,439,449,439',
',,439,,439,449,449,449,,,449,449,449,,449,,,,,,,,,449,449,449,,,,,,',
',,449,449,,449,449,449,449,449,,,,,,,,,,,,,,,,,,,,,,449,449,449,449',
'449,449,449,449,449,449,449,449,449,449,449,,,449,449,449,,,449,,449',
'449,,449,,449,,449,,449,,449,449,449,449,449,449,449,,449,449,449,,',
',,,,,,,,,,449,449,449,449,499,449,,,449,,449,499,499,499,,,499,499,499',
',499,,,,,,,,,,499,,,,,,,,,,499,499,,499,499,499,499,499,,,,,,,,,,,,500',
',,,,,,500,500,500,,,500,500,500,,500,,,,,499,499,,,,500,,,499,,,,,499',
'499,500,500,,500,500,500,500,500,,,,,,,,,,,,499,,,,,,,,,,,,,499,,499',
',,499,,,500,500,,501,,,,,500,,501,501,501,500,500,501,501,501,,501,',
',,,,,,,,501,,,,,500,,,,,501,501,,501,501,501,501,501,500,,500,,,500',
'202,202,,,202,,,,,,,,,202,202,202,202,202,202,202,202,202,,,202,202',
'501,501,,,202,202,202,202,501,,,,,501,501,,,,,202,202,,202,202,202,202',
'202,202,202,202,202,202,202,,501,202,,,,,,,,,,,,501,,501,,,501,7,7,7',
'7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,,,,7,7,7,7,7,7,7,7,7,7,7,7',
'7,7,7,7,7,7,7,7,7,7,7,7,,7,,,,,,,,,7,7,7,7,7,7,7,7,7,,,7,7,,,,,7,7,7',
'7,,,,,,,,,,,,7,7,,7,7,7,7,7,7,7,7,7,7,7,,,7,7,,,,,,,,,,7,8,8,8,8,8,8',
'8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,,,,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8',
'8,8,8,8,8,8,8,8,,,8,,,,,,,,,8,8,8,8,8,8,8,8,8,,,8,8,,,,,8,8,8,8,,,,',
',,,,,,,8,8,,8,8,8,8,8,8,8,8,8,8,8,,,8,8,,,,,,,,,,8,422,422,422,422,422',
'422,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422',
'422,422,,,,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422',
'422,422,422,422,422,422,422,422,,,422,,,,,,,,,422,422,422,422,422,422',
'422,422,422,,,422,422,,,,,422,422,422,422,,,,,,,,,,,,422,422,,422,422',
'422,422,422,422,422,422,422,422,422,,,422,422,,,,,,,,,,422,426,426,426',
'426,426,426,426,426,426,426,426,426,426,426,426,426,426,426,426,426',
'426,426,426,426,,,,426,426,426,426,426,426,426,426,426,426,426,426,426',
'426,426,426,426,426,426,426,426,426,426,,,426,,,,,,,,,426,426,426,426',
'426,426,426,426,426,,,426,426,,,,,426,426,426,426,,,,,,,,,,,,426,426',
',426,426,426,426,426,426,426,426,426,426,426,,,426,426,,,,,,,,,,426',
'66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66',
'66,,,,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66',
'66,66,66,66,66,,66,,,,,,,66,66,66,66,66,66,66,66,66,,,66,66,,,,,66,66',
'66,66,,,,,,66,,,,,,66,66,,66,66,66,66,66,66,66,66,66,66,66,,,66,80,80',
'80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,,',
',80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80',
'80,80,80,,80,,,,,,,80,80,80,80,80,80,80,80,80,,,80,80,,,,,80,80,80,80',
',,,,,,,,,,,80,80,,80,80,80,80,80,80,80,80,80,80,80,,,80,193,193,193',
'193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193',
'193,193,193,193,,,,193,193,193,193,193,193,193,193,193,193,193,193,193',
'193,193,193,193,193,193,193,193,193,193,193,193,193,,193,,,,,,,193,193',
'193,193,193,193,193,193,193,,,193,193,,,,,193,193,193,193,,,,,,,,,,',
',193,193,,193,193,193,193,193,193,193,193,193,193,193,,,193,795,795',
'795,795,795,795,795,795,795,795,795,795,795,795,795,795,795,795,795',
'795,795,795,795,795,,,,795,795,795,795,795,795,795,795,795,795,795,795',
'795,795,795,795,795,795,795,795,795,795,795,,,795,,,,,,,,,795,795,795',
'795,795,795,795,795,795,,,795,795,,,,,795,795,795,795,,,,,,,,,,,,795',
'795,,795,795,795,795,795,795,795,795,795,795,795,201,201,795,,201,,',
',,,,,,201,201,201,201,201,201,201,201,201,,,201,201,,,,,201,201,201',
'201,,,,,,201,,,,,,201,201,,201,201,201,201,201,201,201,201,201,201,201',
'203,203,201,,203,,,,,,,,,203,203,203,203,203,203,203,203,203,,,203,203',
',,,,203,203,203,203,,,,,,,,,,,,203,203,,203,203,203,203,203,203,203',
'203,203,203,203,249,249,203,,249,,,,,,,,,249,249,249,249,249,249,249',
'249,249,,,249,249,,,,,249,249,249,249,,,,,,,,,,,,249,249,,249,249,249',
'249,249,249,249,249,249,249,249,250,250,249,,250,,,,,,,,,250,250,250',
'250,250,250,250,250,250,,,250,250,,,,,250,250,250,250,,,,,,,,,,,,250',
'250,,250,250,250,250,250,250,250,250,250,250,250,251,251,250,,251,,',
',,,,,,251,251,251,251,251,251,251,251,251,,,251,251,,,,,251,251,251',
'251,,,,,,,,,,,,251,251,,251,251,251,251,251,251,251,251,251,251,251',
'462,462,251,,462,,,,,,,,,462,462,462,462,462,462,462,462,462,,,462,462',
',,,,462,462,462,462,,,,,,462,,,,,,462,462,,462,462,462,462,462,462,462',
'462,462,462,462,463,463,462,,463,,,,,,,,,463,463,463,463,463,463,463',
'463,463,,,463,463,,,,,463,463,463,463,,,,,,,,,,,,463,463,,463,463,463',
'463,463,463,463,463,463,463,463,536,536,463,,536,,,,,,,,,536,536,536',
'536,536,536,536,536,536,,,536,536,,,,,536,536,536,536,,,,,,536,,,,,',
'536,536,,536,536,536,536,536,536,536,536,536,536,536,537,537,536,,537',
',,,,,,,,537,537,537,537,537,537,537,537,537,,,537,537,,,,,537,537,537',
'537,,,,,,,,,,,,537,537,,537,537,537,537,537,537,537,537,537,537,537',
'539,539,537,,539,,,,,,,,,539,539,539,539,539,539,539,539,539,,,539,539',
',,,,539,539,539,539,,,,,,,,,,,,539,539,,539,539,539,539,539,539,539',
'539,539,539,539,550,550,539,,550,,,,,,,,,550,550,550,550,550,550,550',
'550,550,,,550,550,,,,,550,550,550,550,,,,,,550,,,,,,550,550,,550,550',
'550,550,550,550,550,550,550,550,550,551,551,550,,551,,,,,,,,,551,551',
'551,551,551,551,551,551,551,,,551,551,,,,,551,551,551,551,,,,,,,,,,',
',551,551,,551,551,551,551,551,551,551,551,551,551,551,607,607,551,,607',
',,,,,,,,607,607,607,607,607,607,607,607,607,,,607,607,,,,,607,607,607',
'607,,,,,,607,,,,,,607,607,,607,607,607,607,607,607,607,607,607,607,607',
'608,608,607,,608,,,,,,,,,608,608,608,608,608,608,608,608,608,,,608,608',
',,,,608,608,608,608,,,,,,,,,,,,608,608,,608,608,608,608,608,608,608',
'608,608,608,608,614,614,608,,614,,,,,,,,,614,614,614,614,614,614,614',
'614,614,,,614,614,,,,,614,614,614,614,,,,,,,,,,,,614,614,,614,614,614',
'614,614,614,614,614,614,614,614,616,616,614,,616,,,,,,,,,616,616,616',
'616,616,616,616,616,616,,,616,616,,,,,616,616,616,616,,,,,,616,,,,,',
'616,616,,616,616,616,616,616,616,616,616,616,616,616,746,746,616,,746',
',,,,,,,,746,746,746,746,746,746,746,746,746,,,746,746,,,,,746,746,746',
'746,,,,,,,,,,,,746,746,,746,746,746,746,746,746,746,746,746,746,746',
'1009,1009,746,,1009,,,,,,,,,1009,1009,1009,1009,1009,1009,1009,1009',
'1009,,,1009,1009,,,,,1009,1009,1009,1009,,,,,,1009,,,,,,1009,1009,,1009',
'1009,1009,1009,1009,1009,1009,1009,1009,1009,1009,1010,1010,1009,,1010',
',,,,,,,,1010,1010,1010,1010,1010,1010,1010,1010,1010,,,1010,1010,,,',
',1010,1010,1010,1010,,,,,,,,,,,,1010,1010,,1010,1010,1010,1010,1010',
'1010,1010,1010,1010,1010,1010,,,1010' ]
        racc_action_check = arr = ::Array.new(26038, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,    25,   nil,   -46,   nil,   790,   -71, 23991, 24112,   -15,
   nil,   -30,    31,   630,   244,     2,   310,   nil,   129,   260,
  2653,   171,   nil,   354,   -14, 23095, 23222,   391,   529,   667,
   nil,   805,   936,  1067,   nil,    76,   301,   161,   441,  1198,
  1329,  1460,   104,   714,   nil,   nil,   nil,   nil,   nil,   nil,
   nil, 23349,   nil,  1591,  1722,  1860,   -19,   949,  1998,  2129,
   nil,   nil,  2260,  2391,  2522,   nil, 24475,   nil,   nil,   nil,
   nil,   nil,   194,   nil,   nil,   nil,   nil,   nil,   110,   132,
 24585,   nil,   nil,   nil,   515,  2653,   nil,   nil,  2791,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   337,   nil,
  2929,   nil,   nil,   nil,  3060,  3191,  3322,  3453,  3584,  3715,
   nil,   513,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil, 24695,   253,   nil,  3846,  3977,  4108,  4239,
  4377, 24864, 23864, 24923,  4515,  4646,  4777,  4908,   nil,   831,
   -76,   336,   -63,   281,   342,  5039,  5170,   nil,   nil,  5301,
   343,  5432,  5563,  5694,  5825,  5956,  6087,  6218,  6349,  6480,
  6611,  6742,  6873,  7004,  7135,  7266,  7397,  7528,  7659,  7790,
  7921,  8052,  8183,  8314,  8445,  8576,   nil,   nil,   nil, 24982,
 25041, 25100,   359,  8707,  8845,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  8983,   nil,  2791,   nil,   345,   359,   nil,  9121,
   466,  9252,   nil,   nil,  9383,  9514,   nil,   nil,   146,   970,
   465,  9645,   483,   501,   480,  9776,  9907,    17,   899,   556,
    39,   nil,   532,   517,   -11,   nil,   nil,   nil,   571,   558,
   536, 10038,   nil,   430,   601,   616,   931,   nil,   618,   nil,
 10169,   nil, 10300,    31,   nil,   568,   -89,   -47,   601,   585,
   292,   626,   nil,   nil,   -21,  1080,   nil,   nil,   nil,   600,
   593,   607,   622,   nil,   624,   630,   nil,   nil,   nil,   707,
   nil, 10431,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   821,
   nil,   nil,   nil,   717,   nil,   nil,   718,   602,    -7,     0,
 10562, 10693,   349,   350,   645,    -2,  1030,   722,     0,   753,
   nil,   nil,   391,   724,   nil,  1064,   nil,    68,   nil,   nil,
 10824,   148,   307,   323,   444,   450,   532,   575,   580,   nil,
   588,   nil, 10955,   nil,   285,   nil,   391,   nil,   419,   666,
   529,   nil,   667,   -33,   nil,   556,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   682, 24233,   nil,   nil,   nil, 24354,   683,   nil,   668,
   nil, 11086,   669,   nil,  3191,   705,   708,   568,   623, 23476,
   nil,   nil,   nil, 22575,   713, 22705,   nil, 11217, 11355, 23603,
   nil,   nil,   nil,  3322,   nil,   667,   nil,   nil,   391,   nil,
   nil,   nil, 25159, 25218, 11493, 11631,   -51, 11769, 11900, 12031,
    44,   nil,  4777,  4908,   260,   418,   739,   748,   749,   753,
  2516,  2929,  1461,  5039,  1591,  1998,  2129,  2260,  5170,  5301,
  5432,  5563,  5694,   669,   829,  5825,  5956, 12162,   -34, 23730,
 23785, 23864,    -7,   nil,   696,   nil,   nil,   695,   715,   nil,
   nil, 12293,   166,   167,   752,   nil,   nil, 12424,   nil, 12562,
   nil, 12700,   nil,   167,   nil,   nil,   nil, 12831,   754,   720,
   nil,   nil,   722, 12962,   761, 13093, 25277, 25336, 13231, 25395,
   170,   771,   nil,   nil, 13369,   738,   nil, 13500, 13631, 13762,
 25454, 25513,  3453, 13893,   860,   861,   782,   nil,   nil, 14024,
   nil,   nil, 14162,   nil,   nil,   nil,   nil, 14300, 14431,   795,
   nil,  2404,   nil,   nil, 14562,   471,   nil,   nil,   582,  2535,
   nil,   826,   nil,   nil,  1161,   832,   nil,   802,   nil,   966,
   nil,   769,   686,   nil,   nil, 14693,   885,   nil,   nil, 14824,
   203,   204,   890,   901, 14955,   nil, 15086, 25572, 25631, 15224,
    16,   nil,  1224,   nil, 25690, 15362, 25749,   nil,   nil, 15500,
   580, 15631,   nil,  9789,   nil,   nil,   nil,    34,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   244,   nil,
   nil,   nil,   784,   nil,   nil,   nil,   nil,   nil,   787, 15762,
   649,    98, 15893, 16024,   834,   nil,   nil,   nil, 16155,   839,
   nil, 16286,   841,   nil, 16417, 16548,   202,   283, 22835, 22965,
   844,   849,   529,   nil,  1860,   nil, 10051,   nil, 16679,   nil,
   nil,   nil,   nil,   nil,   nil, 16810,   nil,   855, 16941, 17079,
  1722,   822,   nil,   nil,   859, 17217, 17348,   nil,   824,   nil,
   865, 17479,   nil,   nil, 17610,  1000,   -25, 17741,   835,   nil,
   871,   207,   229,   883,   252,   260,   884,   885,   889,   853,
 17872,  3584,   915,   917,    66,   977, 18003,   nil,   nil,   419,
   nil,   885,   989,   nil,   nil,   nil,   874,   880,  1292,   891,
   nil,   nil,   897,   899,   nil,   900, 25808,   nil,   nil,   938,
  1097,   907,  1214,   697,   nil,  1020,   nil,   nil,   nil,   nil,
   nil,  1026,   nil,  1027, 18134,   963,    29,    40,    80,   121,
   964, 18265,  1722,   nil,   970,   968, 18396,   609,   nil,   212,
 18527, 18658, 10444,   623, 18789,   nil,   937,   940,   nil,   941,
   946,   950,   nil,   943,   nil, 24805,   990,   831, 18920,   nil,
   nil,   nil,   955, 19051, 19182, 19313,   nil,  3715,   nil,  3846,
   nil,   nil,  3977,   nil,  4108,   nil,  4239, 19444, 19575, 19706,
   297,   299,   nil,   963,   986,   970,  1085,   985,   nil,   977,
 19837,   nil,   994,  1099,   nil,   nil,   nil,   983,   232,   nil,
   nil,   nil,  1102,   nil, 19968,   985,  1026,   nil,   nil,   nil,
   nil,   nil,  1219,   nil,  1350,   nil,   nil, 10837,   nil,  1481,
   nil,   nil,  1033,   nil,   nil,   691,  1345,  1000,  1120,   nil,
 20099,  1122, 20230, 20361,   nil,   nil,    45,    50,  1355,   229,
   nil,  1128,   nil,   nil,  1129,  1130,  1019,   nil,   nil,   558,
   nil,   nil, 12975,   nil, 13382,   nil,  1612,   nil, 20492,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  1033,  1018,   nil,  4377,
   nil,  4515, 20623, 20754, 20885,   849,   nil,  1040,   nil,   nil,
 21016,  1028,   nil,   nil,   nil, 21154,   nil,   nil,    72, 21285,
   nil,  1030,  1031,  1033,  1036,  1038,  1581,  1039,  1607,   nil,
    76,   nil,  1157,  1158, 21416, 21547,   nil,   nil, 21678,   nil,
   nil,  1079,   nil,  1045,   nil,  1046,  1047,  1048,  1060,   nil,
  1061,   nil, 14575,   nil,  4646,   431,   nil,   nil,   nil,   nil,
   nil, 21809,   nil, 21940,    80,  1423,  1136,    84,   nil,   nil,
  2019,   nil,   nil,   nil,  1988,  1065, 22071,   nil,   nil,   nil,
   527, 22202,  1185,   nil,   nil, 17754,   nil,  2150,   nil,  2281,
   nil,  2950,   nil,   nil, 22333,   nil,  1226,  1191, 22464, 25867,
 25926,    88,  1077,  1081,   740,   nil,   nil,   nil,  1201,   nil,
  1085,  1086,  1096,  1097,  1215,   nil,   nil,  1133,    96,   110,
   176,   211,   nil,   nil,   nil,  3081,   nil,   nil,   nil,   nil,
   nil,   129,  1100,   nil ]

racc_action_default = [
    -3,  -592,    -1,  -580,    -4,    -6,  -592,  -592,  -592,  -592,
   -25,  -592,  -592,  -592,  -283,  -592,   -37,   -40,  -592,  -592,
   -45,   -47,   -48,   -49,  -261,  -261,  -261,  -295,  -333,  -334,
   -67,   -10,   -71,   -79,   -81,  -592,  -478,  -592,  -592,  -592,
  -592,  -592,  -582,  -237,  -276,  -277,  -278,  -279,  -280,  -281,
  -282,  -570,  -285,  -592,  -591,  -560,  -303,  -591,  -592,  -592,
  -308,  -311,  -580,  -592,  -592,  -325,  -592,  -335,  -336,  -421,
  -422,  -423,  -424,  -425,  -591,  -428,  -591,  -591,  -591,  -591,
  -591,  -455,  -461,  -462,  -592,  -467,  -468,  -469,  -470,  -471,
  -472,  -473,  -474,  -475,  -476,  -477,  -480,  -481,  -592,    -2,
  -581,  -587,  -588,  -589,  -592,  -592,  -592,  -592,  -592,    -3,
   -13,  -592,  -108,  -109,  -110,  -111,  -112,  -113,  -114,  -117,
  -118,  -119,  -120,  -121,  -122,  -123,  -124,  -125,  -126,  -127,
  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,
  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,
  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,
  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,
  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,
  -188,  -189,  -190,  -592,   -18,  -115,   -10,  -592,  -592,  -591,
  -591,  -592,  -592,  -592,  -592,  -592,  -592,  -592,   -43,  -592,
  -478,  -592,  -283,  -592,  -592,   -10,  -592,   -44,  -227,  -592,
  -592,  -592,  -592,  -592,  -592,  -592,  -592,  -592,  -592,  -592,
  -592,  -592,  -592,  -592,  -592,  -592,  -592,  -592,  -592,  -592,
  -592,  -592,  -592,  -592,  -592,  -592,  -234,  -390,  -392,  -592,
  -592,  -592,   -54,  -591,  -592,  -302,  -396,  -404,  -406,   -62,
  -402,   -63,  -592,   -64,  -238,  -254,  -268,  -268,  -258,  -592,
  -269,  -592,  -591,  -562,  -592,  -592,   -65,   -66,  -580,   -11,
   -67,   -10,  -592,  -592,   -72,   -75,   -10,  -478,  -592,  -592,
  -283,  -295,  -298,  -582,  -592,  -333,  -334,  -337,  -403,  -592,
   -77,  -592,   -83,  -290,  -463,  -464,  -592,  -212,  -213,  -228,
  -592,  -583,   -10,  -582,  -239,  -582,  -584,  -584,  -592,  -592,
  -584,  -592,  -304,  -305,  -592,  -592,  -354,  -355,  -362,  -591,
  -522,  -557,  -557,  -372,  -591,  -591,  -389,  -487,  -488,  -490,
  -491,  -495,  -496,  -521,  -523,  -524,  -525,  -526,  -527,  -592,
  -544,  -549,  -550,  -552,  -553,  -554,  -592,   -46,  -592,  -592,
  -592,  -592,  -580,  -592,  -581,  -478,  -592,  -592,  -283,  -592,
  -529,  -530,  -104,  -592,  -106,  -592,  -283,  -592,  -322,  -478,
  -592,  -108,  -109,  -146,  -147,  -163,  -168,  -175,  -178,  -328,
  -592,  -558,  -592,  -426,  -592,  -441,  -592,  -443,  -592,  -592,
  -592,  -433,  -592,  -592,  -439,  -592,  -454,  -456,  -457,  -458,
  -459,  -465,  -466,  1044,    -5,  -590,   -19,   -20,   -21,   -22,
   -23,  -592,  -592,   -15,   -16,   -17,  -592,  -592,   -26,   -35,
   -36,  -592,  -592,   -27,  -193,  -592,  -592,  -571,  -572,  -261,
  -399,  -573,  -574,  -571,  -261,  -572,  -401,  -576,  -577,  -261,
  -571,  -572,   -33,  -201,   -34,  -592,   -38,   -39,  -191,  -269,
   -41,   -42,  -592,  -592,  -591,  -591,  -290,  -592,  -592,  -592,
  -592,  -301,  -202,  -203,  -204,  -205,  -206,  -207,  -208,  -209,
  -214,  -215,  -216,  -217,  -218,  -219,  -220,  -221,  -222,  -223,
  -224,  -225,  -226,  -229,  -230,  -231,  -232,  -592,  -591,  -261,
  -261,  -261,  -591,   -55,  -582,  -249,  -250,  -268,  -268,  -262,
  -263,  -592,  -591,  -591,  -592,  -297,  -255,  -592,  -256,  -592,
  -266,  -592,  -270,  -592,  -565,  -567,    -9,  -581,  -592,   -68,
  -288,   -84,   -73,  -592,  -592,  -591,  -592,  -592,  -591,  -592,
  -290,  -592,  -463,  -464,  -592,   -80,   -85,  -592,  -592,  -592,
  -592,  -592,  -233,  -592,  -413,  -592,  -592,  -240,  -241,  -586,
  -585,  -243,  -586,  -293,  -294,  -561,  -351,   -10,   -10,  -592,
  -353,  -592,  -374,  -385,  -592,  -592,  -370,  -371,  -592,  -380,
  -382,  -592,  -387,  -489,  -494,  -592,  -522,  -592,  -531,  -592,
  -533,  -535,  -542,  -551,  -555,   -10,  -338,  -339,  -340,   -10,
  -592,  -592,  -592,  -592,   -10,  -408,  -591,  -592,  -592,  -591,
  -290,  -317,  -104,  -105,  -592,  -591,  -592,  -320,  -482,  -592,
  -592,  -592,  -326,  -520,  -330,  -578,  -579,  -582,  -427,  -442,
  -445,  -446,  -448,  -429,  -444,  -430,  -431,  -432,  -592,  -435,
  -437,  -438,  -592,  -460,    -7,   -14,  -116,   -24,  -275,  -592,
  -291,  -292,  -592,  -592,   -58,  -247,  -248,  -397,  -592,   -60,
  -400,  -592,   -56,  -398,  -592,  -592,  -571,  -572,  -571,  -572,
  -592,  -592,  -191,  -300,  -592,  -365,  -582,  -367,   -10,   -50,
  -393,   -51,  -394,   -52,  -395,   -10,  -245,  -592,  -251,  -253,
   -45,  -592,  -260,  -264,  -592,   -10,   -10,  -296,  -268,  -267,
  -271,  -592,  -563,  -564,  -592,   -12,   -68,  -592,   -76,   -82,
  -592,  -571,  -572,  -591,  -575,  -289,  -592,  -592,  -591,   -78,
  -592,  -200,  -210,  -211,  -592,  -591,  -591,  -286,  -287,  -584,
  -244,  -592,  -592,  -352,  -363,  -373,  -591,  -591,  -364,  -557,
  -497,  -556,  -591,  -591,  -545,  -591,  -592,  -290,  -528,  -592,
  -592,  -540,  -592,  -591,  -341,  -591,  -309,  -342,  -343,  -344,
  -312,  -592,  -315,  -592,  -592,  -592,  -571,  -572,  -575,  -289,
  -592,  -592,  -104,  -107,  -575,  -592,   -10,  -592,  -484,  -592,
   -10,   -10,  -520,  -592,  -493,  -498,  -557,  -557,  -503,  -505,
  -505,  -505,  -519,  -522,  -547,  -592,  -592,  -592,   -10,  -434,
  -436,  -440,  -273,  -592,  -592,  -592,   -30,  -196,   -31,  -197,
   -59,   -32,  -198,   -61,  -199,   -57,  -192,  -592,  -592,  -592,
  -292,  -291,  -235,  -345,  -592,  -582,  -592,  -592,  -246,  -268,
  -592,  -265,  -592,  -592,  -257,  -272,  -566,   -74,  -291,  -292,
   -86,  -299,  -591,  -360,   -10,  -414,  -591,  -415,  -416,  -242,
  -356,  -357,  -592,  -383,  -592,  -386,  -369,  -592,  -377,  -592,
  -379,  -388,  -289,  -532,  -534,  -538,  -592,  -543,  -592,  -358,
  -592,  -592,   -10,   -10,  -314,  -316,  -592,  -291,   -96,  -592,
  -291,  -592,  -483,  -323,  -592,  -592,  -582,  -486,  -492,  -592,
  -501,  -502,  -592,  -512,  -592,  -515,  -592,  -517,  -592,  -331,
  -559,  -447,  -450,  -451,  -452,  -453,  -592,  -274,   -28,  -194,
   -29,  -195,  -592,  -592,  -592,  -592,  -366,  -592,  -391,   -53,
  -252,  -268,  -405,  -407,    -8,   -10,  -420,  -361,  -592,  -592,
  -418,  -591,  -591,  -591,  -591,  -536,  -592,  -541,  -592,  -306,
  -592,  -307,  -592,  -592,  -592,   -10,  -318,  -321,   -10,  -327,
  -329,  -592,  -499,  -557,  -504,  -505,  -505,  -505,  -505,  -548,
  -505,  -546,  -520,  -449,  -236,  -582,  -347,  -349,  -350,  -368,
  -259,  -592,  -419,   -10,  -478,  -592,  -592,  -283,  -417,  -384,
  -592,  -375,  -378,  -381,  -592,  -539,   -10,  -310,  -313,  -271,
  -591,   -10,  -592,  -485,  -500,  -592,  -508,  -592,  -510,  -592,
  -513,  -592,  -516,  -518,   -10,  -346,  -592,  -413,  -591,  -592,
  -592,  -290,  -591,  -537,  -591,  -409,  -410,  -411,  -592,  -324,
  -505,  -505,  -505,  -505,  -592,  -348,  -412,  -592,  -571,  -572,
  -575,  -289,  -376,  -359,  -319,  -592,  -506,  -509,  -511,  -514,
  -332,  -291,  -505,  -507 ]

clist = [
'13,326,318,336,603,725,555,310,781,389,110,195,576,577,297,297,430,457',
'209,209,518,734,284,407,454,118,118,209,209,209,99,13,288,288,12,377',
'503,5,267,267,267,252,259,261,792,297,297,545,595,599,744,100,842,209',
'209,868,702,300,209,209,587,613,209,366,375,12,320,558,561,280,394,565',
'282,756,760,358,359,959,966,362,115,115,871,824,629,2,864,678,736,363',
'639,685,968,396,398,1,743,405,414,702,13,695,696,924,209,209,209,209',
'13,13,217,194,371,422,497,663,914,504,103,686,692,416,417,418,419,694',
'699,509,699,263,276,277,391,24,12,319,407,5,322,115,791,323,12,12,369',
'420,5,435,436,617,390,24,24,115,624,312,360,872,867,361,24,24,24,873',
'24,680,682,684,730,1025,771,991,439,444,449,776,621,103,959,948,266',
'266,266,968,380,780,24,24,623,795,962,24,24,965,421,24,13,209,209,209',
'209,324,566,792,209,209,209,209,742,248,498,512,513,629,1015,13,209',
'764,846,928,499,500,501,393,400,638,702,403,901,797,12,798,917,24,886',
'952,740,24,24,24,24,24,24,761,955,,,,,12,256,260,,209,209,265,265,265',
'541,,,518,209,,508,267,115,297,523,569,,336,937,267,864,448,,,556,708',
'557,13,315,297,,288,13,283,428,433,719,546,,951,,452,456,699,699,791',
'749,288,773,,,526,,734,,532,,,13,,,12,1033,1016,,280,12,,528,297,280',
'744,527,534,800,24,24,24,24,24,,,,24,24,24,24,584,985,,,,12,1004,24',
'24,432,622,946,,15,506,510,,432,,209,209,297,744,514,,,,,,,,,,932,,',
'600,601,,375,,,792,663,15,24,24,,602,1013,,209,103,,24,,,,,,,,,,,507',
'266,,956,,957,670,671,24,266,,370,,24,856,,,,,645,,315,315,646,,,,439',
'444,,,,810,739,118,,,813,118,24,815,,,,,834,427,837,15,,654,702,1026',
',,659,15,15,209,209,662,890,891,687,881,283,744,,884,885,457,103,,791',
'849,265,265,710,,,717,787,,,265,,618,24,24,115,,,,115,,,,,,,,713,14',
',718,209,1020,,,297,679,681,683,,256,713,,546,260,24,297,13,698,699',
',,,288,546,209,448,283,209,14,290,290,283,,288,847,,,,,15,,,209,765',
',297,770,,455,,12,,775,705,,945,13,13,15,729,368,376,,738,,,,713,,699',
',834,,,,,713,,,,,796,,,13,,24,24,13,,12,12,,13,,209,,14,209,448,,,,',
'209,14,14,973,209,825,209,336,,448,,,,,12,986,1017,,12,994,15,777,,12',
',15,,992,,24,,787,,,573,,,209,209,580,582,,,209,,24,,,,209,656,15,,24',
',660,24,,,970,656,,,13,,,448,,,,13,24,448,,297,,,315,315,,13,13,546',
'1024,829,24,24,297,,14,,,288,,,840,,12,,,757,757,,,12,288,,,14,,656',
'656,656,24,12,12,,24,,,778,,24,899,24,,588,24,806,808,,,,24,811,,,24',
'953,24,456,787,,787,,787,,,315,,,315,,,,,209,,,,,13,,,,13,13,,,,24,24',
',879,14,,24,,290,14,,,24,13,,,,,,209,209,,,,290,12,24,,,12,12,,,24,448',
'14,,,731,732,,787,,24,24,,,12,,315,,,315,,,,,,315,13,,,,,376,,753,,',
'741,755,,741,,787,763,787,,787,,787,,,115,,209,,13,13,,,,,12,432,,15',
',,,,,940,376,,,,882,,883,908,910,,887,787,,,788,,24,,12,12,,24,,297',
',24,24,,,876,,,,15,15,,,13,,,,975,1005,24,,,826,,36,24,24,656,314,827',
'660,327,656,13,,,13,15,,832,833,15,,,1027,,15,12,395,,397,397,401,404',
'397,36,287,287,,,,13,,,,24,,12,713,588,12,921,751,,13,,,,,13,,,757,',
',,,365,379,,379,24,13,24,24,12,209,,,,,,,,,,455,,12,,,,,12,,,,,,,15',
',,14,36,,12,15,,290,,,36,36,,,,15,15,,290,,906,,853,855,24,,,788,858',
'860,,861,,,,,,,,208,,14,14,,24,,,24,376,448,,314,314,,,,,,,,,,784,,',
',927,,,14,,,24,14,313,,,,14,357,357,,,357,,24,,,,,24,,,,942,943,15,',
'36,,15,15,,24,,505,,24,588,,588,,,,,,,36,15,,,,,,395,357,357,357,357',
',,,,,741,,,788,,788,,788,,,,,,972,,,,,14,,,,,,,14,,,,,15,,,990,,14,14',
',,,,,,,,,,290,,36,,,,287,36,,,,15,15,290,1007,,,,,,,315,287,,,,788,1014',
',,,,1018,36,,,979,981,982,983,784,,935,588,,,460,461,,,,,,,,,470,,,788',
',788,379,788,15,788,,,978,14,,,,14,14,,,,,,,,,,15,,,15,,,905,14,,,,',
',737,,788,,379,,,,,,745,,,655,,15,588,,588,,1032,,,655,,,,218,15,,,',
',15,,264,264,264,314,314,14,,,,,,15,307,308,309,784,,789,784,,784,,784',
',,,,264,264,588,,,,14,14,,,675,655,655,655,675,,,,,,,,,,675,675,,,,',
',,,,,,,,,,,357,357,,,,,314,,,314,,,,,,,,,14,,784,,977,,,,,,,,,321,627',
',893,895,897,,14,,,14,,,,,,,36,,,,,784,287,784,,784,,784,,,,,,287,14',
',,,,,,,,,,314,,14,314,,,,14,,314,,36,36,,,,784,,379,,14,,,,,264,434',
'264,264,,,789,453,458,,,,,,36,,,,36,,,,218,36,472,473,474,475,476,477',
'478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494',
'495,496,313,,,,,,,264,264,,,,,,,,264,,,,,,429,264,,264,,931,264,264',
'459,,933,655,934,,,,655,,,,724,,,843,848,,36,996,998,1000,1002,,1003',
'36,,,,,,,,,552,36,36,,,958,,960,,843,,843,,287,,,,,,,,,,,,,287,,,,520',
',522,,,524,525,,,,,,,,357,,779,,,,1036,1037,1038,1039,,,,,,,,,,,,,,',
',,,,1043,789,,,,,,,,,36,,,,36,36,,,,1012,,,,,,,926,,,,930,,36,,1021',
',1022,,1023,,,,,,,,,,,264,,,,,,,,,,,,,,,,,,,,,,,,,1042,,,,36,,,,264',
'264,,453,672,434,,,,,,,,,,,,,,,,,,,36,36,,,,,,,,674,,,,,648,,,,357,',
',,,690,,,,,,264,,264,,264,,,,,,,,,,,,,,264,,,264,,,36,,,,974,,721,722',
'723,,,,,,,843,,,264,,36,264,,36,,,,,,,,,,314,,,,,,843,,691,,,,,,700',
'36,321,,703,,,,,,,,,,36,,,357,264,36,,264,,,,,,264,,,,,36,,,,,,,,,,700',
',,321,,,,,,,,,,,,,,,,264,,,807,809,,,,,812,,,814,,,672,816,,,,,,,,,',
',,,,,,,,,,,,,264,264,,,,,,,,,,,,264,,,264,,,,,,,,,,,,,,,,802,,,,,,264',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,700,321,,,,264,,,,,,,,835,,,836,,,,',
',,,,264,,,,,,,,,,,,,845,,,,,,264,909,911,,,,,,,,,,,,807,809,812,,,,',
',,,,,,264,,,,,459,,,,,,,,,,,,,,,,,,,,888,,,,,,,,,,,,,,,,,,,907,,,,,',
',,,,,,,,,,,,,,,,,,264,,,459,,,,,,,,,,,911,909,964,,,,,,264,,,,,,,,,',
',,,,,,,,,,,,,,264,,,,,,,,,,,,,,,,,,,,,,,,,961,,264,,,,,,,,,,,,,,,,,',
',,321,,,,,,,,,,,,,,,,,264,,,,,,,989,,,,,,,,,,,,,,,,,,,,,,,,,,,989' ]
        racc_goto_table = arr = ::Array.new(2363, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'21,111,22,114,83,10,8,52,87,48,14,14,117,117,53,53,25,17,21,21,65,113',
'42,48,25,51,51,21,21,21,4,21,21,21,20,47,35,7,59,59,59,34,34,34,151',
'53,53,44,80,80,155,6,11,21,21,81,162,43,21,21,156,46,21,21,21,20,59',
'58,58,39,135,58,40,82,82,16,16,159,107,16,49,49,11,105,139,2,157,36',
'121,4,139,36,108,136,136,1,121,136,5,162,21,36,36,12,21,21,21,21,21',
'21,19,15,18,28,54,64,55,62,86,63,60,16,16,16,16,66,60,67,60,38,38,38',
'75,37,20,76,48,7,77,49,121,79,20,20,84,7,7,22,22,85,88,37,37,49,89,90',
'91,92,158,93,37,37,37,94,37,64,64,64,60,107,95,96,33,33,33,97,98,86',
'159,99,57,57,57,108,100,101,37,37,102,103,104,37,37,106,2,37,21,21,21',
'21,21,109,110,151,21,21,21,21,112,122,123,125,126,139,127,21,21,128',
'129,130,33,33,33,134,137,138,162,140,141,142,20,143,105,37,145,148,149',
'37,37,37,37,37,37,83,153,,,,,20,61,61,,21,21,30,30,30,52,,,65,21,,59',
'59,49,53,135,111,,114,158,59,157,49,,,52,44,52,21,30,53,,21,21,9,19',
'19,44,42,,105,,19,19,60,60,121,156,21,46,,,4,,113,,43,,,21,,,20,81,11',
',39,20,,40,53,39,155,6,40,139,37,37,37,37,37,,,,37,37,37,37,21,158,',
',,20,87,37,37,57,47,82,,24,38,38,,57,,21,21,53,155,38,,,,,,,,,,121,',
',16,16,,21,,,151,64,24,37,37,,4,158,,21,86,,37,,,,,,,,,,,57,57,,121',
',121,22,22,37,57,,24,,37,117,,,,,14,,30,30,14,,,,33,33,,,,35,116,51',
',,35,51,37,35,,,,,65,9,44,24,,34,162,10,,,34,24,24,21,21,34,117,117',
'52,8,9,155,,8,8,17,86,,121,58,30,30,22,,,22,116,,,30,,86,37,37,49,,',
',49,,,,,,,,33,23,,33,21,121,,,53,34,34,34,,61,33,,42,61,37,53,21,59',
'60,,,,21,42,21,49,9,21,23,23,23,9,,21,25,,,,,24,,,21,22,,53,22,,24,',
'20,,22,7,,80,21,21,24,59,23,23,,21,,,,33,,60,,65,,,,,33,,,,,52,,,21',
',37,37,21,,20,20,,21,,21,,23,21,49,,,,,21,23,23,80,21,111,21,114,,49',
',,,,20,80,83,,20,117,24,16,,20,,24,,8,,37,,116,,,119,,,21,21,119,119',
',,21,,37,,,,21,61,24,,37,,61,37,,,65,61,,,21,,,49,,,,21,37,49,,53,,',
'30,30,,21,21,42,8,59,37,37,53,,23,,,21,,,42,,20,,,86,86,,,20,21,,,23',
',61,61,61,37,20,20,,37,,,86,,37,48,37,,154,37,19,19,,,,37,19,,,37,116',
'37,19,116,,116,,116,,,30,,,30,,,,,21,,,,,21,,,,21,21,,,,37,37,,16,23',
',37,,23,23,,,37,21,,,,,,21,21,,,,23,20,37,,,20,20,,,37,49,23,,,9,9,',
'116,,37,37,,,20,,30,,,30,,,,,,30,21,,,,,23,,9,,,118,9,,118,,116,9,116',
',116,,116,,,49,,21,,21,21,,,,,20,57,,24,,,,,,16,23,,,,86,,86,19,19,',
'86,116,,,118,,37,,20,20,,37,,53,,37,37,,,57,,,,24,24,,,21,,,,21,52,37',
',,9,,45,37,37,61,56,9,61,56,61,21,,,21,24,,9,9,24,,,22,,24,20,56,,56',
'56,56,56,56,45,45,45,,,,21,,,,37,,20,33,154,20,57,154,,21,,,,,21,,,86',
',,,,45,45,,45,37,21,37,37,20,21,,,,,,,,,,24,,20,,,,,20,,,,,,,24,,,23',
'45,,20,24,,23,,,45,45,,,,24,24,,23,,9,,119,119,37,,,118,119,119,,119',
',,,,,,,27,,23,23,,37,,,37,23,49,,56,56,,,,,,,,,,147,,,,9,,,23,,,37,23',
'27,,,,23,27,27,,,27,,37,,,,,37,,,,9,9,24,,45,,24,24,,37,,56,,37,154',
',154,,,,,,,45,24,,,,,,56,27,27,27,27,,,,,,118,,,118,,118,,118,,,,,,9',
',,,,23,,,,,,,23,,,,,24,,,9,,23,23,,,,,,,,,,,23,,45,,,,45,45,,,,24,24',
'23,9,,,,,,,30,45,,,,118,9,,,,,9,45,,,119,119,119,119,147,,154,154,,',
'27,27,,,,,,,,,27,,,118,,118,45,118,24,118,,,24,23,,,,23,23,,,,,,,,,',
'24,,,24,,,23,23,,,,,,120,,118,,45,,,,,,120,,,56,,24,154,,154,,119,,',
'56,,,,29,24,,,,,24,,29,29,29,56,56,23,,,,,,24,29,29,29,147,,120,147',
',147,,147,,,,,29,29,154,,,,23,23,,,56,56,56,56,56,,,,,,,,,,56,56,,,',
',,,,,,,,,,,,27,27,,,,,56,,,56,,,,,,,,,23,,147,,23,,,,,,,,,26,27,,152',
'152,152,,23,,,23,,,,,,,45,,,,,147,45,147,,147,,147,,,,,,45,23,,,,,,',
',,,,56,,23,56,,,,23,,56,,45,45,,,,147,,45,,23,,,,,29,29,29,29,,,120',
'29,29,,,,,,45,,,,45,,,,29,45,29,29,29,29,29,29,29,29,29,29,29,29,29',
'29,29,29,29,29,29,29,29,29,29,29,29,27,,,,,,,29,29,,,,,,,,29,,,,,,26',
'29,,29,,120,29,29,26,,120,56,120,,,,56,,,,27,,,56,56,,45,152,152,152',
'152,,152,45,,,,,,,,,29,45,45,,,120,,120,,56,,56,,45,,,,,,,,,,,,,45,',
',,26,,26,,,26,26,,,,,,,,27,,27,,,,152,152,152,152,,,,,,,,,,,,,,,,,,',
'152,120,,,,,,,,,45,,,,45,45,,,,120,,,,,,,56,,,,56,,45,,120,,120,,120',
',,,,,,,,,,29,,,,,,,,,,,,,,,,,,,,,,,,,120,,,,45,,,,29,29,,29,29,29,,',
',,,,,,,,,,,,,,,,45,45,,,,,,,,29,,,,,26,,,,27,,,,,29,,,,,,29,,29,,29',
',,,,,,,,,,,,,29,,,29,,,45,,,,45,,29,29,29,,,,,,,56,,,29,,45,29,,45,',
',,,,,,,,56,,,,,,56,,26,,,,,,26,45,26,,26,,,,,,,,,,45,,,27,29,45,,29',
',,,,,29,,,,,45,,,,,,,,,,26,,,26,,,,,,,,,,,,,,,,29,,,29,29,,,,,29,,,29',
',,29,29,,,,,,,,,,,,,,,,,,,,,,,29,29,,,,,,,,,,,,29,,,29,,,,,,,,,,,,,',
',,26,,,,,,29,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,26,26,,,,29,,,,,,,,26,',
',26,,,,,,,,,29,,,,,,,,,,,,,26,,,,,,29,29,29,,,,,,,,,,,,29,29,29,,,,',
',,,,,,29,,,,,26,,,,,,,,,,,,,,,,,,,,26,,,,,,,,,,,,,,,,,,,26,,,,,,,,,',
',,,,,,,,,,,,,,29,,,26,,,,,,,,,,,29,29,29,,,,,,29,,,,,,,,,,,,,,,,,,,',
',,,,29,,,,,,,,,,,,,,,,,,,,,,,,,26,,29,,,,,,,,,,,,,,,,,,,,26,,,,,,,,',
',,,,,,,,29,,,,,,,26,,,,,,,,,,,,,,,,,,,,,,,,,,,26' ]
        racc_goto_check = arr = ::Array.new(2363, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,    95,    85,   nil,    27,    -2,    48,    37,  -306,   256,
  -549,  -673,  -739,   nil,     3,   103,    17,  -188,    49,    91,
    34,     0,   -52,   508,   354,  -181,  1391,  1055,     3,  1320,
   228,   nil,   nil,   -29,    17,  -216,  -411,   133,   102,    38,
    41,   nil,   -10,    24,  -254,   936,  -312,   -29,   -57,    73,
   nil,    18,   -35,   -18,  -132,  -706,   886,   153,  -249,    11,
  -391,   226,  -136,  -385,  -334,  -247,  -386,  -127,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    66,    80,    82,   nil,    84,
  -310,  -698,  -527,  -359,    81,  -228,   115,  -615,    84,  -236,
   103,    96,  -599,    98,  -597,  -441,  -775,  -442,  -202,  -704,
   119,  -437,  -201,  -435,  -709,  -593,  -722,  -837,  -823,   144,
  -122,   -56,  -371,  -550,   -54,   nil,  -136,  -319,   279,   320,
   741,  -483,   188,   -37,   nil,   -46,   -46,  -776,  -388,  -508,
  -627,   nil,   nil,   nil,   151,    -4,    17,   146,  -175,  -310,
   148,  -569,  -402,  -401,   nil,  -548,   nil,   473,  -654,  -339,
   nil,  -579,   660,  -648,   392,  -529,  -289,  -664,  -594,  -817,
   nil,   nil,  -463 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,     4,   364,   279,   nil,   554,
   nil,   869,   nil,   278,   nil,   nil,   nil,    10,    11,    17,
   214,   306,   nil,   212,   213,   nil,   270,    16,   nil,    20,
    21,    22,    23,   716,   nil,   nil,   nil,   294,   nil,    30,
   nil,    32,    35,    34,   nil,   210,   374,   nil,   117,   442,
   116,    70,   823,    43,   nil,   nil,   572,   316,   nil,   317,
   268,   440,   nil,   nil,   657,   516,   nil,   nil,   254,    44,
    45,    46,    47,    48,    49,    50,   nil,   255,    56,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   596,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   343,   nil,
   nil,   nil,   329,   328,   735,   331,   332,   nil,   333,   nil,
   334,   335,   nil,   nil,   446,   nil,   nil,   nil,   nil,   nil,
   nil,    69,    71,    72,    73,   nil,   nil,   nil,   nil,   634,
   nil,   nil,   nil,   nil,   406,   783,   339,   341,   785,   342,
   786,   954,   nil,   790,   348,   350,   nil,   590,   591,   794,
   353,   356,   273 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 141, :_reduce_none,
  2, 142, :_reduce_2,
  0, 143, :_reduce_3,
  1, 143, :_reduce_4,
  3, 143, :_reduce_5,
  1, 145, :_reduce_none,
  4, 145, :_reduce_7,
  4, 148, :_reduce_8,
  2, 149, :_reduce_9,
  0, 153, :_reduce_10,
  1, 153, :_reduce_11,
  3, 153, :_reduce_12,
  0, 168, :_reduce_13,
  4, 147, :_reduce_14,
  3, 147, :_reduce_15,
  3, 147, :_reduce_none,
  3, 147, :_reduce_17,
  2, 147, :_reduce_18,
  3, 147, :_reduce_19,
  3, 147, :_reduce_20,
  3, 147, :_reduce_21,
  3, 147, :_reduce_22,
  3, 147, :_reduce_23,
  4, 147, :_reduce_none,
  1, 147, :_reduce_none,
  3, 147, :_reduce_26,
  3, 147, :_reduce_27,
  6, 147, :_reduce_none,
  6, 147, :_reduce_none,
  5, 147, :_reduce_30,
  5, 147, :_reduce_none,
  5, 147, :_reduce_none,
  3, 147, :_reduce_none,
  3, 147, :_reduce_34,
  3, 147, :_reduce_35,
  3, 147, :_reduce_36,
  1, 147, :_reduce_none,
  3, 157, :_reduce_38,
  3, 157, :_reduce_39,
  1, 167, :_reduce_none,
  3, 167, :_reduce_41,
  3, 167, :_reduce_42,
  2, 167, :_reduce_43,
  2, 167, :_reduce_44,
  1, 167, :_reduce_none,
  1, 156, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 171, :_reduce_none,
  4, 171, :_reduce_none,
  4, 171, :_reduce_none,
  4, 171, :_reduce_none,
  4, 175, :_reduce_53,
  2, 170, :_reduce_54,
  3, 170, :_reduce_55,
  4, 170, :_reduce_56,
  5, 170, :_reduce_none,
  4, 170, :_reduce_58,
  5, 170, :_reduce_none,
  4, 170, :_reduce_60,
  5, 170, :_reduce_none,
  2, 170, :_reduce_62,
  2, 170, :_reduce_63,
  2, 170, :_reduce_64,
  2, 170, :_reduce_65,
  2, 170, :_reduce_66,
  1, 158, :_reduce_67,
  3, 158, :_reduce_68,
  1, 180, :_reduce_69,
  3, 180, :_reduce_70,
  1, 179, :_reduce_71,
  2, 179, :_reduce_72,
  3, 179, :_reduce_73,
  5, 179, :_reduce_74,
  2, 179, :_reduce_75,
  4, 179, :_reduce_76,
  2, 179, :_reduce_77,
  4, 179, :_reduce_78,
  1, 179, :_reduce_79,
  3, 179, :_reduce_80,
  1, 182, :_reduce_81,
  3, 182, :_reduce_82,
  2, 181, :_reduce_83,
  3, 181, :_reduce_84,
  1, 184, :_reduce_85,
  3, 184, :_reduce_86,
  1, 183, :_reduce_87,
  4, 183, :_reduce_88,
  3, 183, :_reduce_89,
  3, 183, :_reduce_none,
  3, 183, :_reduce_none,
  3, 183, :_reduce_none,
  2, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 164, :_reduce_95,
  4, 164, :_reduce_96,
  4, 164, :_reduce_97,
  3, 164, :_reduce_98,
  3, 164, :_reduce_99,
  3, 164, :_reduce_100,
  3, 164, :_reduce_101,
  2, 164, :_reduce_102,
  1, 164, :_reduce_none,
  1, 186, :_reduce_none,
  2, 187, :_reduce_105,
  1, 187, :_reduce_106,
  3, 187, :_reduce_107,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_111,
  1, 188, :_reduce_112,
  1, 154, :_reduce_113,
  1, 154, :_reduce_none,
  1, 155, :_reduce_115,
  3, 155, :_reduce_116,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  3, 169, :_reduce_191,
  5, 169, :_reduce_192,
  3, 169, :_reduce_193,
  6, 169, :_reduce_194,
  6, 169, :_reduce_195,
  5, 169, :_reduce_196,
  5, 169, :_reduce_none,
  5, 169, :_reduce_none,
  5, 169, :_reduce_none,
  4, 169, :_reduce_none,
  3, 169, :_reduce_none,
  3, 169, :_reduce_202,
  3, 169, :_reduce_203,
  3, 169, :_reduce_204,
  3, 169, :_reduce_205,
  3, 169, :_reduce_206,
  3, 169, :_reduce_207,
  3, 169, :_reduce_208,
  3, 169, :_reduce_209,
  4, 169, :_reduce_210,
  4, 169, :_reduce_211,
  2, 169, :_reduce_212,
  2, 169, :_reduce_213,
  3, 169, :_reduce_214,
  3, 169, :_reduce_215,
  3, 169, :_reduce_216,
  3, 169, :_reduce_217,
  3, 169, :_reduce_218,
  3, 169, :_reduce_219,
  3, 169, :_reduce_220,
  3, 169, :_reduce_221,
  3, 169, :_reduce_222,
  3, 169, :_reduce_223,
  3, 169, :_reduce_224,
  3, 169, :_reduce_225,
  3, 169, :_reduce_226,
  2, 169, :_reduce_227,
  2, 169, :_reduce_228,
  3, 169, :_reduce_229,
  3, 169, :_reduce_230,
  3, 169, :_reduce_231,
  3, 169, :_reduce_232,
  3, 169, :_reduce_233,
  0, 194, :_reduce_234,
  0, 195, :_reduce_235,
  7, 169, :_reduce_236,
  1, 169, :_reduce_none,
  1, 166, :_reduce_none,
  1, 162, :_reduce_239,
  2, 162, :_reduce_240,
  2, 162, :_reduce_241,
  4, 162, :_reduce_242,
  2, 162, :_reduce_243,
  3, 162, :_reduce_244,
  3, 201, :_reduce_245,
  2, 203, :_reduce_none,
  1, 204, :_reduce_247,
  1, 204, :_reduce_none,
  1, 202, :_reduce_249,
  1, 202, :_reduce_none,
  2, 202, :_reduce_251,
  4, 202, :_reduce_252,
  2, 202, :_reduce_253,
  1, 178, :_reduce_254,
  2, 178, :_reduce_255,
  2, 178, :_reduce_256,
  4, 178, :_reduce_257,
  1, 178, :_reduce_258,
  4, 206, :_reduce_none,
  1, 206, :_reduce_none,
  0, 208, :_reduce_261,
  2, 174, :_reduce_262,
  1, 207, :_reduce_none,
  2, 207, :_reduce_264,
  3, 207, :_reduce_265,
  2, 200, :_reduce_266,
  2, 205, :_reduce_267,
  0, 205, :_reduce_268,
  1, 197, :_reduce_269,
  2, 197, :_reduce_270,
  3, 197, :_reduce_271,
  4, 197, :_reduce_272,
  3, 165, :_reduce_273,
  4, 165, :_reduce_274,
  2, 165, :_reduce_275,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  0, 230, :_reduce_285,
  4, 193, :_reduce_286,
  4, 193, :_reduce_287,
  3, 193, :_reduce_288,
  3, 193, :_reduce_289,
  2, 193, :_reduce_290,
  4, 193, :_reduce_291,
  4, 193, :_reduce_292,
  3, 193, :_reduce_293,
  3, 193, :_reduce_294,
  1, 193, :_reduce_295,
  4, 193, :_reduce_296,
  3, 193, :_reduce_297,
  1, 193, :_reduce_298,
  5, 193, :_reduce_299,
  4, 193, :_reduce_300,
  3, 193, :_reduce_301,
  2, 193, :_reduce_302,
  1, 193, :_reduce_none,
  2, 193, :_reduce_304,
  2, 193, :_reduce_305,
  6, 193, :_reduce_306,
  6, 193, :_reduce_307,
  0, 231, :_reduce_308,
  0, 232, :_reduce_309,
  7, 193, :_reduce_310,
  0, 233, :_reduce_311,
  0, 234, :_reduce_312,
  7, 193, :_reduce_313,
  5, 193, :_reduce_314,
  4, 193, :_reduce_315,
  5, 193, :_reduce_316,
  0, 235, :_reduce_317,
  0, 236, :_reduce_318,
  9, 193, :_reduce_319,
  0, 237, :_reduce_320,
  6, 193, :_reduce_321,
  0, 238, :_reduce_322,
  0, 239, :_reduce_323,
  8, 193, :_reduce_324,
  0, 240, :_reduce_325,
  0, 241, :_reduce_326,
  6, 193, :_reduce_327,
  0, 242, :_reduce_328,
  6, 193, :_reduce_329,
  0, 243, :_reduce_330,
  0, 244, :_reduce_331,
  9, 193, :_reduce_332,
  1, 193, :_reduce_333,
  1, 193, :_reduce_334,
  1, 193, :_reduce_335,
  1, 193, :_reduce_none,
  1, 161, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  2, 220, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 245, :_reduce_345,
  4, 245, :_reduce_346,
  1, 246, :_reduce_347,
  3, 246, :_reduce_348,
  1, 247, :_reduce_349,
  1, 247, :_reduce_none,
  2, 219, :_reduce_351,
  3, 249, :_reduce_352,
  2, 249, :_reduce_353,
  1, 249, :_reduce_354,
  1, 249, :_reduce_none,
  3, 250, :_reduce_356,
  3, 250, :_reduce_357,
  1, 221, :_reduce_358,
  5, 221, :_reduce_359,
  1, 151, :_reduce_none,
  2, 151, :_reduce_361,
  1, 252, :_reduce_362,
  3, 252, :_reduce_363,
  3, 253, :_reduce_364,
  1, 176, :_reduce_none,
  3, 176, :_reduce_366,
  1, 176, :_reduce_367,
  4, 176, :_reduce_368,
  4, 254, :_reduce_369,
  2, 254, :_reduce_370,
  2, 254, :_reduce_371,
  1, 254, :_reduce_372,
  2, 259, :_reduce_373,
  1, 259, :_reduce_374,
  6, 251, :_reduce_375,
  8, 251, :_reduce_376,
  4, 251, :_reduce_377,
  6, 251, :_reduce_378,
  4, 251, :_reduce_379,
  2, 251, :_reduce_380,
  6, 251, :_reduce_381,
  2, 251, :_reduce_382,
  4, 251, :_reduce_383,
  6, 251, :_reduce_384,
  2, 251, :_reduce_385,
  4, 251, :_reduce_386,
  2, 251, :_reduce_387,
  4, 251, :_reduce_388,
  1, 251, :_reduce_389,
  0, 263, :_reduce_390,
  5, 262, :_reduce_391,
  2, 172, :_reduce_392,
  4, 172, :_reduce_none,
  4, 172, :_reduce_none,
  4, 172, :_reduce_none,
  2, 218, :_reduce_396,
  4, 218, :_reduce_397,
  4, 218, :_reduce_398,
  3, 218, :_reduce_399,
  4, 218, :_reduce_400,
  3, 218, :_reduce_401,
  2, 218, :_reduce_402,
  1, 218, :_reduce_403,
  0, 265, :_reduce_404,
  5, 217, :_reduce_405,
  0, 266, :_reduce_406,
  5, 217, :_reduce_407,
  0, 268, :_reduce_408,
  6, 223, :_reduce_409,
  1, 267, :_reduce_410,
  1, 267, :_reduce_none,
  6, 150, :_reduce_412,
  0, 150, :_reduce_413,
  1, 269, :_reduce_414,
  1, 269, :_reduce_none,
  1, 269, :_reduce_none,
  2, 270, :_reduce_417,
  1, 270, :_reduce_418,
  2, 152, :_reduce_419,
  1, 152, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 210, :_reduce_424,
  1, 273, :_reduce_none,
  2, 273, :_reduce_426,
  3, 274, :_reduce_427,
  1, 274, :_reduce_428,
  3, 211, :_reduce_429,
  3, 212, :_reduce_430,
  3, 213, :_reduce_431,
  3, 213, :_reduce_432,
  1, 277, :_reduce_433,
  3, 277, :_reduce_434,
  1, 278, :_reduce_435,
  2, 278, :_reduce_436,
  3, 214, :_reduce_437,
  3, 214, :_reduce_438,
  1, 280, :_reduce_439,
  3, 280, :_reduce_440,
  1, 275, :_reduce_441,
  2, 275, :_reduce_442,
  1, 276, :_reduce_443,
  2, 276, :_reduce_444,
  1, 279, :_reduce_445,
  0, 282, :_reduce_446,
  3, 279, :_reduce_447,
  0, 283, :_reduce_448,
  4, 279, :_reduce_449,
  1, 281, :_reduce_450,
  1, 281, :_reduce_451,
  1, 281, :_reduce_452,
  1, 281, :_reduce_none,
  2, 191, :_reduce_454,
  1, 191, :_reduce_455,
  1, 284, :_reduce_none,
  1, 284, :_reduce_none,
  1, 284, :_reduce_none,
  1, 284, :_reduce_none,
  3, 272, :_reduce_460,
  1, 271, :_reduce_461,
  1, 271, :_reduce_462,
  2, 271, :_reduce_463,
  2, 271, :_reduce_464,
  2, 271, :_reduce_465,
  2, 271, :_reduce_466,
  1, 185, :_reduce_467,
  1, 185, :_reduce_468,
  1, 185, :_reduce_469,
  1, 185, :_reduce_470,
  1, 185, :_reduce_471,
  1, 185, :_reduce_472,
  1, 185, :_reduce_473,
  1, 185, :_reduce_474,
  1, 185, :_reduce_475,
  1, 185, :_reduce_476,
  1, 185, :_reduce_477,
  1, 215, :_reduce_478,
  1, 160, :_reduce_479,
  1, 163, :_reduce_480,
  1, 163, :_reduce_none,
  1, 225, :_reduce_482,
  3, 225, :_reduce_483,
  2, 225, :_reduce_484,
  4, 227, :_reduce_485,
  2, 227, :_reduce_486,
  1, 286, :_reduce_none,
  1, 286, :_reduce_none,
  2, 256, :_reduce_489,
  1, 256, :_reduce_490,
  1, 287, :_reduce_491,
  2, 288, :_reduce_492,
  1, 288, :_reduce_493,
  2, 289, :_reduce_494,
  1, 289, :_reduce_495,
  1, 255, :_reduce_496,
  3, 255, :_reduce_497,
  1, 290, :_reduce_498,
  3, 290, :_reduce_499,
  4, 291, :_reduce_500,
  2, 291, :_reduce_501,
  2, 291, :_reduce_502,
  1, 291, :_reduce_503,
  2, 292, :_reduce_504,
  0, 292, :_reduce_505,
  6, 285, :_reduce_506,
  8, 285, :_reduce_507,
  4, 285, :_reduce_508,
  6, 285, :_reduce_509,
  4, 285, :_reduce_510,
  6, 285, :_reduce_511,
  2, 285, :_reduce_512,
  4, 285, :_reduce_513,
  6, 285, :_reduce_514,
  2, 285, :_reduce_515,
  4, 285, :_reduce_516,
  2, 285, :_reduce_517,
  4, 285, :_reduce_518,
  1, 285, :_reduce_519,
  0, 285, :_reduce_520,
  1, 294, :_reduce_none,
  1, 294, :_reduce_522,
  1, 248, :_reduce_523,
  1, 248, :_reduce_524,
  1, 248, :_reduce_525,
  1, 248, :_reduce_526,
  1, 295, :_reduce_527,
  3, 295, :_reduce_528,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 297, :_reduce_531,
  3, 297, :_reduce_532,
  1, 298, :_reduce_533,
  3, 298, :_reduce_534,
  1, 296, :_reduce_none,
  4, 296, :_reduce_536,
  6, 296, :_reduce_537,
  3, 296, :_reduce_538,
  5, 296, :_reduce_539,
  2, 296, :_reduce_540,
  4, 296, :_reduce_541,
  1, 296, :_reduce_542,
  3, 296, :_reduce_543,
  1, 260, :_reduce_544,
  3, 260, :_reduce_545,
  3, 299, :_reduce_546,
  1, 293, :_reduce_547,
  3, 293, :_reduce_548,
  1, 300, :_reduce_none,
  1, 300, :_reduce_none,
  2, 261, :_reduce_551,
  1, 261, :_reduce_552,
  1, 301, :_reduce_none,
  1, 301, :_reduce_none,
  2, 258, :_reduce_555,
  2, 257, :_reduce_556,
  0, 257, :_reduce_557,
  1, 228, :_reduce_558,
  4, 228, :_reduce_559,
  0, 216, :_reduce_560,
  2, 216, :_reduce_561,
  1, 199, :_reduce_562,
  3, 199, :_reduce_563,
  3, 302, :_reduce_564,
  2, 302, :_reduce_565,
  4, 302, :_reduce_566,
  2, 302, :_reduce_567,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 173, :_reduce_none,
  1, 173, :_reduce_none,
  1, 173, :_reduce_none,
  1, 173, :_reduce_none,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  0, 144, :_reduce_none,
  1, 144, :_reduce_none,
  0, 192, :_reduce_none,
  1, 192, :_reduce_none,
  0, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 146, :_reduce_none,
  2, 146, :_reduce_none,
  0, 196, :_reduce_591 ]

racc_reduce_n = 592

racc_shift_n = 1044

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :tIDENTIFIER => 50,
  :tFID => 51,
  :tGVAR => 52,
  :tIVAR => 53,
  :tCONSTANT => 54,
  :tLABEL => 55,
  :tCVAR => 56,
  :tNTH_REF => 57,
  :tBACK_REF => 58,
  :tSTRING_CONTENT => 59,
  :tINTEGER => 60,
  :tFLOAT => 61,
  :tREGEXP_END => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tPOW => 65,
  :tCMP => 66,
  :tEQ => 67,
  :tEQQ => 68,
  :tNEQ => 69,
  :tGEQ => 70,
  :tLEQ => 71,
  :tANDOP => 72,
  :tOROP => 73,
  :tMATCH => 74,
  :tNMATCH => 75,
  :tJSDOT => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tRBRACK => 92,
  :tLBRACE => 93,
  :tLBRACE_ARG => 94,
  :tSTAR => 95,
  :tSTAR2 => 96,
  :tAMPER => 97,
  :tAMPER2 => 98,
  :tTILDE => 99,
  :tPERCENT => 100,
  :tDIVIDE => 101,
  :tPLUS => 102,
  :tMINUS => 103,
  :tLT => 104,
  :tGT => 105,
  :tPIPE => 106,
  :tBANG => 107,
  :tCARET => 108,
  :tLCURLY => 109,
  :tRCURLY => 110,
  :tBACK_REF2 => 111,
  :tSYMBEG => 112,
  :tSTRING_BEG => 113,
  :tXSTRING_BEG => 114,
  :tREGEXP_BEG => 115,
  :tWORDS_BEG => 116,
  :tAWORDS_BEG => 117,
  :tSTRING_DBEG => 118,
  :tSTRING_DVAR => 119,
  :tSTRING_END => 120,
  :tSTRING => 121,
  :tSYMBOL => 122,
  :tNL => 123,
  :tEH => 124,
  :tCOLON => 125,
  :tCOMMA => 126,
  :tSPACE => 127,
  :tSEMI => 128,
  :tLAMBDA => 129,
  :tLAMBEG => 130,
  :tLBRACK2 => 131,
  :tLBRACK => 132,
  :tJSLBRACK => 133,
  :tDSTAR => 134,
  :tLABEL_END => 135,
  :tEQL => 136,
  :tLOWEST => 137,
  "-@NUM" => 138,
  "+@NUM" => 139 }

racc_nt_base = 140

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tJSDOT",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tAWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tLBRACK2",
  "tLBRACK",
  "tJSLBRACK",
  "tDSTAR",
  "tLABEL_END",
  "tEQL",
  "tLOWEST",
  "\"-@NUM\"",
  "\"+@NUM\"",
  "$start",
  "program",
  "top_compstmt",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "aref_args",
  "backref",
  "lhs",
  "mrhs",
  "arg_value",
  "expr",
  "@1",
  "arg",
  "command",
  "block_command",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_var",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_entry",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "symbol",
  "opt_nl",
  "primary",
  "@2",
  "@3",
  "none",
  "args",
  "trailer",
  "assocs",
  "block_arg",
  "paren_args",
  "opt_call_args",
  "rparen",
  "opt_paren_args",
  "opt_block_arg",
  "call_args2",
  "open_args",
  "@4",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "awords",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@5",
  "@6",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "block_param",
  "f_block_optarg",
  "f_block_opt",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "f_arg",
  "f_rest_arg",
  "do_block",
  "@20",
  "operation3",
  "@21",
  "@22",
  "cases",
  "@23",
  "exc_list",
  "exc_var",
  "numeric",
  "dsym",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "@24",
  "@25",
  "sym",
  "f_args",
  "kwrest_mark",
  "f_label",
  "f_kw",
  "f_block_kw",
  "f_kwarg",
  "args_tail",
  "opt_args_tail",
  "f_optarg",
  "f_norm_arg",
  "f_arg_item",
  "f_margs",
  "f_marg",
  "f_marg_list",
  "f_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
                      result = new_compstmt val[0]
                    
    result
end

def _reduce_3(val, _values, result)
                      result = new_block
                    
    result
end

def _reduce_4(val, _values, result)
                      result = new_block val[0]
                    
    result
end

def _reduce_5(val, _values, result)
                      val[0] << val[2]
                      result = val[0]
                    
    result
end

# reduce 6 omitted

def _reduce_7(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_8(val, _values, result)
                      result = new_body(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_9(val, _values, result)
                      result = new_compstmt val[0]
                    
    result
end

def _reduce_10(val, _values, result)
                      result = new_block
                    
    result
end

def _reduce_11(val, _values, result)
                      result = new_block val[0]
                    
    result
end

def _reduce_12(val, _values, result)
                      val[0] << val[2]
                      result = val[0]
                    
    result
end

def _reduce_13(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_14(val, _values, result)
                      result = new_alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_15(val, _values, result)
                      result = s(:valias, value(val[1]).to_sym, value(val[2]).to_sym)
                    
    result
end

# reduce 16 omitted

def _reduce_17(val, _values, result)
                      result = s(:valias, value(val[1]).to_sym, value(val[2]).to_sym)
                    
    result
end

def _reduce_18(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_19(val, _values, result)
                      result = new_if(val[1], val[2], val[0], nil)
                    
    result
end

def _reduce_20(val, _values, result)
                      result = new_if(val[1], val[2], nil, val[0])
                    
    result
end

def _reduce_21(val, _values, result)
                      result = new_while(val[1], val[2], val[0])
                    
    result
end

def _reduce_22(val, _values, result)
                      result = new_until(val[1], val[2], val[0])
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_rescue_mod(val[1], val[0], val[2])
                    
    result
end

# reduce 24 omitted

# reduce 25 omitted

def _reduce_26(val, _values, result)
                      result = s(:masgn, val[0], s(:to_ary, val[2]))
                    
    result
end

def _reduce_27(val, _values, result)
                      result = new_op_asgn val[1], val[0], val[2]
                    
    result
end

# reduce 28 omitted

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = s(:op_asgn2, val[0], op_to_setter(val[2]), value(val[3]).to_sym, val[4])
                    
    result
end

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

def _reduce_34(val, _values, result)
                      result = new_assign val[0], val[1], s(:svalue, val[2])
                    
    result
end

def _reduce_35(val, _values, result)
                      result = s(:masgn, val[0], s(:to_ary, val[2]))
                    
    result
end

def _reduce_36(val, _values, result)
                      result = s(:masgn, val[0], val[2])
                    
    result
end

# reduce 37 omitted

def _reduce_38(val, _values, result)
                      result = new_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = new_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = s(:and, val[0], val[2])
                    
    result
end

def _reduce_42(val, _values, result)
                      result = s(:or, val[0], val[2])
                    
    result
end

def _reduce_43(val, _values, result)
                      result = new_unary_call(['!', []], val[1])
                    
    result
end

def _reduce_44(val, _values, result)
                      result = new_unary_call(val[0], val[1])
                    
    result
end

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      result = new_iter(val[1], val[2])
                    
    result
end

def _reduce_54(val, _values, result)
                      result = new_call(nil, val[0], val[1])
                    
    result
end

def _reduce_55(val, _values, result)
                      result = new_call(nil, val[0], val[1]) << val[2]
                    
    result
end

def _reduce_56(val, _values, result)
                      result = new_js_call(val[0], val[2], val[3])
                    
    result
end

# reduce 57 omitted

def _reduce_58(val, _values, result)
                      result = new_call(val[0], val[2], val[3])
                    
    result
end

# reduce 59 omitted

def _reduce_60(val, _values, result)
                    result = new_call(val[0], val[2], val[3])
                  
    result
end

# reduce 61 omitted

def _reduce_62(val, _values, result)
                      result = new_super(val[0], val[1])
                    
    result
end

def _reduce_63(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_64(val, _values, result)
                      result = new_return(val[0], val[1])
                    
    result
end

def _reduce_65(val, _values, result)
                      result = new_break(val[0], val[1])
                    
    result
end

def _reduce_66(val, _values, result)
                      result = new_next(val[0], val[1])
                    
    result
end

def _reduce_67(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_68(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_69(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_70(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_71(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_72(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_73(val, _values, result)
                      result = val[0] << s(:splat, val[2])
                    
    result
end

def _reduce_74(val, _values, result)
                     result = (val[0] << s(:splat, val[2])).concat(val[4].children)
                   
    result
end

def _reduce_75(val, _values, result)
                      result = val[0] << s(:splat)
                    
    result
end

def _reduce_76(val, _values, result)
                      result = (val[0] << s(:splat)).concat(val[3].children)
                    
    result
end

def _reduce_77(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_78(val, _values, result)
                      result = s(:array, s(:splat, val[1])).concat(val[3].children)
                    
    result
end

def _reduce_79(val, _values, result)
                      result = s(:array, s(:splat))
                    
    result
end

def _reduce_80(val, _values, result)
                      result = s(:array, s(:splat)).concat(val[2].children)
                    
    result
end

def _reduce_81(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_82(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_83(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_84(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_86(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_87(val, _values, result)
                      result = new_assignable val[0]
                    
    result
end

def _reduce_88(val, _values, result)
                      args = val[2] ? val[2] : []
                      result = s(:attrasgn, val[0], :[]=, s(:arglist, *args))
                    
    result
end

def _reduce_89(val, _values, result)
                      result = new_call val[0], val[2], []
                    
    result
end

# reduce 90 omitted

# reduce 91 omitted

# reduce 92 omitted

# reduce 93 omitted

# reduce 94 omitted

def _reduce_95(val, _values, result)
                      result = new_assignable val[0]
                    
    result
end

def _reduce_96(val, _values, result)
                      result = new_js_attrasgn(val[0], val[2])
                    
    result
end

def _reduce_97(val, _values, result)
                      result = new_attrasgn(val[0], :[]=, val[2])
                    
    result
end

def _reduce_98(val, _values, result)
                      result = new_attrasgn(val[0], op_to_setter(val[2]))
                    
    result
end

def _reduce_99(val, _values, result)
                      result = new_attrasgn(val[0], op_to_setter(val[2]))
                    
    result
end

def _reduce_100(val, _values, result)
                      result = new_attrasgn(val[0], op_to_setter(val[2]))
                    
    result
end

def _reduce_101(val, _values, result)
                      result = new_colon2(val[0], val[1], val[2])
                    
    result
end

def _reduce_102(val, _values, result)
                      result = new_colon3(val[0], val[1])
                    
    result
end

# reduce 103 omitted

# reduce 104 omitted

def _reduce_105(val, _values, result)
                      result = new_colon3(val[0], val[1])
                    
    result
end

def _reduce_106(val, _values, result)
                      result = new_const(val[0])
                    
    result
end

def _reduce_107(val, _values, result)
                      result = new_colon2(val[0], val[1], val[2])
                    
    result
end

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

def _reduce_111(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_112(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_113(val, _values, result)
                      result = new_sym(val[0])
                    
    result
end

# reduce 114 omitted

def _reduce_115(val, _values, result)
                      result = s(:undef, val[0])
                    
    result
end

def _reduce_116(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

def _reduce_191(val, _values, result)
                      result = new_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_192(val, _values, result)
                      result = new_assign val[0], val[1], s(:rescue_mod, val[2], val[4])
                    
    result
end

def _reduce_193(val, _values, result)
                      result = new_op_asgn val[1], val[0], val[2]
                    
    result
end

def _reduce_194(val, _values, result)
                      result = new_op_asgn1(val[0], val[2], val[4], val[5])
                    
    result
end

def _reduce_195(val, _values, result)
                      raise ".JS[...] #{val[4]} is not supported"
                    
    result
end

def _reduce_196(val, _values, result)
                      result = s(:op_asgn2, val[0], op_to_setter(val[2]), value(val[3]).to_sym, val[4])
                    
    result
end

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

def _reduce_202(val, _values, result)
                      result = new_irange(val[0], val[1], val[2])
                    
    result
end

def _reduce_203(val, _values, result)
                      result = new_erange(val[0], val[1], val[2])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_206(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_207(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_208(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_call new_binary_call(new_int(val[1]), val[2], val[3]), [:"-@", []], []
                    
    result
end

def _reduce_211(val, _values, result)
                      result = new_call new_binary_call(new_float(val[1]), val[2], val[3]), [:"-@", []], []
                    
    result
end

def _reduce_212(val, _values, result)
                      result = new_call val[1], [:"+@", []], []
                      if [:int, :float].include? val[1].type
                        result = val[1]
                      end
                    
    result
end

def _reduce_213(val, _values, result)
                      result = new_call val[1], [:"-@", []], []
                      if val[1].type == :int
                        val[1][1] = -val[1][1]
                        result = val[1]
                      elsif val[1].type == :float
                        val[1][1] = -val[1][1].to_f
                        result = val[1]
                      end
                    
    result
end

def _reduce_214(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_unary_call(val[0], val[1])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = new_unary_call(val[0], val[1])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_230(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = new_and(val[0], val[1], val[2])
                    
    result
end

def _reduce_232(val, _values, result)
                      result = new_or(val[0], val[1], val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_234(val, _values, result)
 lexer.cond_push 1 
    result
end

def _reduce_235(val, _values, result)
 lexer.cond_pop 
    result
end

def _reduce_236(val, _values, result)
                      result = new_if(val[1], val[0], val[3], val[6])
                    
    result
end

# reduce 237 omitted

# reduce 238 omitted

def _reduce_239(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_240(val, _values, result)
                      result = [val[0]]
                    
    result
end

def _reduce_241(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_242(val, _values, result)
                      val[0] << s(:hash, *val[2])
                      result = val[0]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = [s(:hash, *val[0])]
                    
    result
end

def _reduce_244(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_245(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 246 omitted

def _reduce_247(val, _values, result)
                      result = []
                    
    result
end

# reduce 248 omitted

def _reduce_249(val, _values, result)
                      result = []
                    
    result
end

# reduce 250 omitted

def _reduce_251(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_252(val, _values, result)
                      result = val[0]
                      result << new_hash(nil, val[2], nil)
                    
    result
end

def _reduce_253(val, _values, result)
                      result = [new_hash(nil, val[0], nil)]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = [val[0]]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = val[0]
                      add_block_pass val[0], val[1]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = [new_hash(nil, val[0], nil)]
                      add_block_pass result, val[1]
                    
    result
end

def _reduce_257(val, _values, result)
                      result = val[0]
                      result << new_hash(nil, val[2], nil)
                      result << val[3] if val[3]
                    
    result
end

def _reduce_258(val, _values, result)
                      result = []
                      add_block_pass result, val[0]
                    
    result
end

# reduce 259 omitted

# reduce 260 omitted

def _reduce_261(val, _values, result)
                      lexer.cmdarg_push 1
                    
    result
end

def _reduce_262(val, _values, result)
                      lexer.cmdarg_pop
                      result = val[1]
                    
    result
end

# reduce 263 omitted

def _reduce_264(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_265(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_266(val, _values, result)
                      result = new_block_pass(val[0], val[1])
                    
    result
end

def _reduce_267(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_268(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_269(val, _values, result)
                      result = [val[0]]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = [new_splat(val[0], val[1])]
                    
    result
end

def _reduce_271(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_272(val, _values, result)
                      result  = val[0] << new_splat(val[2], val[3])
                    
    result
end

def _reduce_273(val, _values, result)
                      val[0] << val[2]
                      result = s(:array, *val[0])
                    
    result
end

def _reduce_274(val, _values, result)
                      val[0] << s(:splat, val[3])
                      result = s(:array, *val[0])
                    
    result
end

def _reduce_275(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

# reduce 281 omitted

# reduce 282 omitted

# reduce 283 omitted

# reduce 284 omitted

def _reduce_285(val, _values, result)
                      result = lexer.line
                    
    result
end

def _reduce_286(val, _values, result)
                      result = s(:begin, val[2])
                    
    result
end

def _reduce_287(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_288(val, _values, result)
                      result = new_paren(val[0], val[1], val[2])
                    
    result
end

def _reduce_289(val, _values, result)
                      result = new_colon2(val[0], val[1], val[2])
                    
    result
end

def _reduce_290(val, _values, result)
                      result = new_colon3(val[0], val[1])
                    
    result
end

def _reduce_291(val, _values, result)
                      result = new_call val[0], [:[], []], val[2]
                    
    result
end

def _reduce_292(val, _values, result)
                      result = new_js_call val[0], [:[], []], val[2]
                    
    result
end

def _reduce_293(val, _values, result)
                      result = new_array(val[0], val[1], val[2])
                    
    result
end

def _reduce_294(val, _values, result)
                      result = new_hash(val[0], val[1], val[2])
                    
    result
end

def _reduce_295(val, _values, result)
                      result = new_return(val[0])
                    
    result
end

def _reduce_296(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_297(val, _values, result)
                      result = s(:yield)
                    
    result
end

def _reduce_298(val, _values, result)
                      result = s(:yield)
                    
    result
end

def _reduce_299(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_300(val, _values, result)
                      result = new_unary_call(['!', []], val[2])
                    
    result
end

def _reduce_301(val, _values, result)
                      result = new_unary_call(['!', []], new_nil(val[0]))
                    
    result
end

def _reduce_302(val, _values, result)
                      result = new_call(nil, val[0], [])
                      result << val[1]
                    
    result
end

# reduce 303 omitted

def _reduce_304(val, _values, result)
                      result = new_method_call_with_block(val[0], val[1])
                    
    result
end

def _reduce_305(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_306(val, _values, result)
                      result = new_if(val[0], val[1], val[3], val[4])
                    
    result
end

def _reduce_307(val, _values, result)
                      result = new_if(val[0], val[1], val[4], val[3])
                    
    result
end

def _reduce_308(val, _values, result)
                      lexer.cond_push 1
                      result = lexer.line
                    
    result
end

def _reduce_309(val, _values, result)
                      lexer.cond_pop
                    
    result
end

def _reduce_310(val, _values, result)
                      result = s(:while, val[2], val[5])
                    
    result
end

def _reduce_311(val, _values, result)
                      lexer.cond_push 1
                      result = lexer.line
                    
    result
end

def _reduce_312(val, _values, result)
                      lexer.cond_pop
                    
    result
end

def _reduce_313(val, _values, result)
                      result = s(:until, val[2], val[5])
                    
    result
end

def _reduce_314(val, _values, result)
                      result = s(:case, val[1], *val[3])
                    
    result
end

def _reduce_315(val, _values, result)
                      result = s(:case, nil, *val[2])
                    
    result
end

def _reduce_316(val, _values, result)
                      result = s(:case, nil, val[3])
                    
    result
end

def _reduce_317(val, _values, result)
                      lexer.cond_push 1
                      result = lexer.line
                    
    result
end

def _reduce_318(val, _values, result)
                      lexer.cond_pop
                    
    result
end

def _reduce_319(val, _values, result)
                      result = s(:for, val[4], val[1], val[7])
                    
    result
end

def _reduce_320(val, _values, result)
                      # ...
                    
    result
end

def _reduce_321(val, _values, result)
                      result = new_class val[0], val[1], val[2], val[4], val[5]
                    
    result
end

def _reduce_322(val, _values, result)
                      result = lexer.line
                    
    result
end

def _reduce_323(val, _values, result)
                      # ...
                    
    result
end

def _reduce_324(val, _values, result)
                      result = new_sclass(val[0], val[3], val[6], val[7])
                    
    result
end

def _reduce_325(val, _values, result)
                      result = lexer.line
                    
    result
end

def _reduce_326(val, _values, result)
                      # ...
                    
    result
end

def _reduce_327(val, _values, result)
                      result = new_module(val[0], val[2], val[4], val[5])
                    
    result
end

def _reduce_328(val, _values, result)
                      push_scope
                    
    result
end

def _reduce_329(val, _values, result)
                      result = new_def(val[0], nil, val[1], val[3], val[4], val[5])
                      pop_scope
                    
    result
end

def _reduce_330(val, _values, result)
                       lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_331(val, _values, result)
                      push_scope
                      lexer.lex_state = :expr_endfn
                    
    result
end

def _reduce_332(val, _values, result)
                      result = new_def(val[0], val[1], val[4], val[6], val[7], val[8])
                      pop_scope
                    
    result
end

def _reduce_333(val, _values, result)
                      result = new_break(val[0])
                    
    result
end

def _reduce_334(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_335(val, _values, result)
                      result = s(:redo)
                    
    result
end

# reduce 336 omitted

# reduce 337 omitted

# reduce 338 omitted

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

def _reduce_345(val, _values, result)
                      result = []
                    
    result
end

def _reduce_346(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_347(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_348(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_349(val, _values, result)
                      result = new_shadowarg(val[0])
                    
    result
end

# reduce 350 omitted

def _reduce_351(val, _values, result)
                      result = new_call nil, [:lambda, []], []
                      result << new_iter(val[0], val[1])
                    
    result
end

def _reduce_352(val, _values, result)
                      result = new_block_args(*val[1])
                    
    result
end

def _reduce_353(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_354(val, _values, result)
                      result = new_block_args(*val[0])
                    
    result
end

# reduce 355 omitted

def _reduce_356(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_357(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_358(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_359(val, _values, result)
                      result = new_if(val[0], val[1], val[3], val[4])
                    
    result
end

# reduce 360 omitted

def _reduce_361(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_362(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_363(val, _values, result)
                      val[0] << val[2]
                      result = val[0]
                    
    result
end

def _reduce_364(val, _values, result)
                      result = new_assign(new_assignable(new_ident(
                                  val[0])), val[1], val[2])
                    
    result
end

# reduce 365 omitted

def _reduce_366(val, _values, result)
                      result = new_block_args(nil, [val[1]])
                    
    result
end

def _reduce_367(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_368(val, _values, result)
                      val[1] << val[2]
                      result = new_block_args(*val[1])
                    
    result
end

def _reduce_369(val, _values, result)
                      result = [val[0], val[2], val[3]]
                    
    result
end

def _reduce_370(val, _values, result)
                      result = [val[0], nil, val[1]]
                    
    result
end

def _reduce_371(val, _values, result)
                      result = [nil, val[0], val[1]]
                    
    result
end

def _reduce_372(val, _values, result)
                      result = [nil, nil, val[0]]
                    
    result
end

def _reduce_373(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_374(val, _values, result)
                      nil
                    
    result
end

def _reduce_375(val, _values, result)
                      optarg = new_optarg(val[2])
                      restarg = new_restarg(val[4])
                      result = [val[0] + optarg + restarg, val[5]]
                    
    result
end

def _reduce_376(val, _values, result)
                      optarg = new_optarg(val[2])
                      restarg = new_restarg(val[4])
                      result = [val[0] + optarg + restarg + val[6], val[7]]
                    
    result
end

def _reduce_377(val, _values, result)
                      optarg = new_optarg(val[2])
                      result = [val[0] + optarg, val[3]]
                    
    result
end

def _reduce_378(val, _values, result)
                      optarg = new_optarg(val[2])
                      result = [val[0] + optarg + val[4], val[5]]
                    
    result
end

def _reduce_379(val, _values, result)
                      restarg = new_restarg(val[2])
                      result = [val[0] + restarg, val[3]]
                    
    result
end

def _reduce_380(val, _values, result)
                      result = [val[0], nil]
                    
    result
end

def _reduce_381(val, _values, result)
                      restarg = new_restarg(val[2])
                      result = [val[0] + restarg + val[4], val[5]]
                    
    result
end

def _reduce_382(val, _values, result)
                      result = [val[0], val[1]]
                    
    result
end

def _reduce_383(val, _values, result)
                      optarg = new_optarg(val[0])
                      restarg = new_restarg(val[2])
                      result = [optarg + restarg, val[3]]
                    
    result
end

def _reduce_384(val, _values, result)
                      optarg = new_optarg(val[0])
                      restarg = new_restarg(val[2])
                      result = [optarg + restarg + val[4], val[5]]
                    
    result
end

def _reduce_385(val, _values, result)
                      optarg= new_optarg(val[0])
                      result = [optarg, val[1]]
                    
    result
end

def _reduce_386(val, _values, result)
                      optarg = new_optarg(val[0])
                      result = [optarg + val[2], val[3]]
                    
    result
end

def _reduce_387(val, _values, result)
                      restarg = new_restarg(val[0])
                      result = [restarg, val[1]]
                    
    result
end

def _reduce_388(val, _values, result)
                      restarg = new_restarg(val[0])
                      result = [restarg + val[2], val[3]]
                    
    result
end

def _reduce_389(val, _values, result)
                      result = [nil, val[0]]
                    
    result
end

def _reduce_390(val, _values, result)
                      push_scope :block
                      result = lexer.line
                    
    result
end

def _reduce_391(val, _values, result)
                      result = new_iter val[2], val[3]
                      pop_scope
                    
    result
end

def _reduce_392(val, _values, result)
                      val[0] << val[1]
                      result = val[0]
                    
    result
end

# reduce 393 omitted

# reduce 394 omitted

# reduce 395 omitted

def _reduce_396(val, _values, result)
                      result = new_call(nil, val[0], val[1])
                    
    result
end

def _reduce_397(val, _values, result)
                      result = new_call(val[0], val[2], val[3])
                    
    result
end

def _reduce_398(val, _values, result)
                      result = new_js_call(val[0], val[2], val[3])
                    
    result
end

def _reduce_399(val, _values, result)
                      result = new_call(val[0], [:call, []], val[2])
                    
    result
end

def _reduce_400(val, _values, result)
                      result = new_call(val[0], val[2], val[3])
                    
    result
end

def _reduce_401(val, _values, result)
                      result = new_call(val[0], val[2])
                    
    result
end

def _reduce_402(val, _values, result)
                      result = new_super(val[0], val[1])
                    
    result
end

def _reduce_403(val, _values, result)
                      result = new_super(val[0], nil)
                    
    result
end

def _reduce_404(val, _values, result)
                      push_scope :block
                      result = lexer.line
                    
    result
end

def _reduce_405(val, _values, result)
                      result = new_iter val[2], val[3]
                      pop_scope
                    
    result
end

def _reduce_406(val, _values, result)
                      push_scope :block
                      result = lexer.line
                    
    result
end

def _reduce_407(val, _values, result)
                      result = new_iter val[2], val[3]
                      pop_scope
                    
    result
end

def _reduce_408(val, _values, result)
                      result = lexer.line
                    
    result
end

def _reduce_409(val, _values, result)
                      part = s(:when, s(:array, *val[2]), val[4])
                      result = [part]
                      result.push(*val[5]) if val[5]
                    
    result
end

def _reduce_410(val, _values, result)
                      result = [val[0]]
                    
    result
end

# reduce 411 omitted

def _reduce_412(val, _values, result)
                      exc = val[1] || s(:array)
                      exc << new_assign(val[2], val[2], s(:gvar, '$!'.intern)) if val[2]
                      result = [s(:resbody, exc, val[4])]
                      result.concat val[5] if val[5]
                    
    result
end

def _reduce_413(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_414(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 415 omitted

# reduce 416 omitted

def _reduce_417(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_418(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_419(val, _values, result)
                      result = val[1].nil? ? s(:nil) : val[1]
                    
    result
end

# reduce 420 omitted

# reduce 421 omitted

# reduce 422 omitted

# reduce 423 omitted

def _reduce_424(val, _values, result)
                      result = new_str val[0]
                    
    result
end

# reduce 425 omitted

def _reduce_426(val, _values, result)
                    result = str_append val[0], val[1]
                  
    result
end

def _reduce_427(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_428(val, _values, result)
                      result = s(:str, value(val[0]))
                    
    result
end

def _reduce_429(val, _values, result)
                      result = new_xstr(val[0], val[1], val[2])
                    
    result
end

def _reduce_430(val, _values, result)
                      result = new_regexp val[1], val[2]
                    
    result
end

def _reduce_431(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_432(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_433(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_434(val, _values, result)
                      part = val[1]
                      part = s(:dstr, "", val[1]) if part.type == :evstr
                      result = val[0] << part
                    
    result
end

def _reduce_435(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_436(val, _values, result)
                      result = val[0].concat([val[1]])
                    
    result
end

def _reduce_437(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_438(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_439(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_440(val, _values, result)
                      result = val[0] << s(:str, value(val[1]))
                    
    result
end

def _reduce_441(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_442(val, _values, result)
                      result = str_append val[0], val[1]
                    
    result
end

def _reduce_443(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_444(val, _values, result)
                      result = str_append val[0], val[1]
                    
    result
end

def _reduce_445(val, _values, result)
                      result = new_str_content(val[0])
                    
    result
end

def _reduce_446(val, _values, result)
                      result = lexer.strterm
                      lexer.strterm = nil
                    
    result
end

def _reduce_447(val, _values, result)
                      lexer.strterm = val[1]
                      result = new_evstr(val[2])
                    
    result
end

def _reduce_448(val, _values, result)
                      lexer.cond_push 0
                      lexer.cmdarg_push 0
                      result = lexer.strterm
                      lexer.strterm = nil
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_449(val, _values, result)
                      lexer.strterm = val[1]
                      lexer.cond_lexpop
                      lexer.cmdarg_lexpop
                      result = new_evstr(val[2])
                    
    result
end

def _reduce_450(val, _values, result)
                      result = new_gvar(val[0])
                    
    result
end

def _reduce_451(val, _values, result)
                      result = new_ivar(val[0])
                    
    result
end

def _reduce_452(val, _values, result)
                      result = new_cvar(val[0])
                    
    result
end

# reduce 453 omitted

def _reduce_454(val, _values, result)
                      result = new_sym(val[1])
                      lexer.lex_state = :expr_end
                    
    result
end

def _reduce_455(val, _values, result)
                      result = new_sym(val[0])
                    
    result
end

# reduce 456 omitted

# reduce 457 omitted

# reduce 458 omitted

# reduce 459 omitted

def _reduce_460(val, _values, result)
                      result = new_dsym val[1]
                    
    result
end

def _reduce_461(val, _values, result)
                      result = new_int(val[0])
                    
    result
end

def _reduce_462(val, _values, result)
                      result = new_float(val[0])
                    
    result
end

def _reduce_463(val, _values, result)
                    result = negate_num(new_int(val[1]))
                  
    result
end

def _reduce_464(val, _values, result)
                    result = negate_num(new_float(val[1]))
                  
    result
end

def _reduce_465(val, _values, result)
                    result = new_int(val[1])
                  
    result
end

def _reduce_466(val, _values, result)
                    result = new_float(val[1])
                  
    result
end

def _reduce_467(val, _values, result)
                      result = new_ident(val[0])
                    
    result
end

def _reduce_468(val, _values, result)
                      result = new_ivar(val[0])
                    
    result
end

def _reduce_469(val, _values, result)
                      result = new_gvar(val[0])
                    
    result
end

def _reduce_470(val, _values, result)
                      result = new_const(val[0])
                    
    result
end

def _reduce_471(val, _values, result)
                      result = new_cvar(val[0])
                    
    result
end

def _reduce_472(val, _values, result)
                      result = new_nil(val[0])
                    
    result
end

def _reduce_473(val, _values, result)
                      result = new_self(val[0])
                    
    result
end

def _reduce_474(val, _values, result)
                      result = new_true(val[0])
                    
    result
end

def _reduce_475(val, _values, result)
                      result = new_false(val[0])
                    
    result
end

def _reduce_476(val, _values, result)
                      result = new___FILE__(val[0])
                    
    result
end

def _reduce_477(val, _values, result)
                      result = new___LINE__(val[0])
                    
    result
end

def _reduce_478(val, _values, result)
                      result = new_var_ref(val[0])
                    
    result
end

def _reduce_479(val, _values, result)
                      result = new_assignable val[0]
                    
    result
end

def _reduce_480(val, _values, result)
                      result = s(:nth_ref, value(val[0]))
                    
    result
end

# reduce 481 omitted

def _reduce_482(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_483(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_484(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_485(val, _values, result)
                      result = val[1]
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_486(val, _values, result)
                      result = val[0]
                      lexer.lex_state = :expr_beg
                    
    result
end

# reduce 487 omitted

# reduce 488 omitted

def _reduce_489(val, _values, result)
                      result = new_kwrestarg(val[1])
                    
    result
end

def _reduce_490(val, _values, result)
                      result = new_kwrestarg()
                    
    result
end

def _reduce_491(val, _values, result)
                      result = new_sym(val[0])
                    
    result
end

def _reduce_492(val, _values, result)
                      result = new_kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_493(val, _values, result)
                      result = new_kwarg(val[0])
                    
    result
end

def _reduce_494(val, _values, result)
                      result = new_kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_495(val, _values, result)
                      result = new_kwarg(val[0])
                    
    result
end

def _reduce_496(val, _values, result)
                      result = [val[0]]
                    
    result
end

def _reduce_497(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_498(val, _values, result)
                      result = [val[0]]
                    
    result
end

def _reduce_499(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_500(val, _values, result)
                      result = new_args_tail(val[0], val[2], val[3])
                    
    result
end

def _reduce_501(val, _values, result)
                      result = new_args_tail(val[0], nil, val[1])
                    
    result
end

def _reduce_502(val, _values, result)
                      result = new_args_tail(nil, val[0], val[1])
                    
    result
end

def _reduce_503(val, _values, result)
                      result = new_args_tail(nil, nil, val[0])
                    
    result
end

def _reduce_504(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_505(val, _values, result)
                      result = new_args_tail(nil, nil, nil)
                    
    result
end

def _reduce_506(val, _values, result)
                      optarg = new_optarg(val[2])
                      restarg = new_restarg(val[4])
                      result = new_args(val[0] + optarg + restarg, val[5])
                    
    result
end

def _reduce_507(val, _values, result)
                      optarg = new_optarg(val[2])
                      restarg = new_restarg(val[4])
                      result = new_args(val[0] + optarg + restarg + val[6], val[7])
                    
    result
end

def _reduce_508(val, _values, result)
                      optarg = new_optarg(val[2])
                      result = new_args(val[0] + optarg, val[3])
                    
    result
end

def _reduce_509(val, _values, result)
                      optarg = new_optarg(val[2])
                      result = new_args(val[0] + optarg + val[4], val[5])
                    
    result
end

def _reduce_510(val, _values, result)
                      restarg = new_restarg(val[2])
                      result = new_args(val[0] + restarg, val[3])
                    
    result
end

def _reduce_511(val, _values, result)
                      restarg = new_restarg(val[2])
                      result = new_args(val[0] + restarg + val[4], val[5])
                    
    result
end

def _reduce_512(val, _values, result)
                      result = new_args(val[0], val[1])
                    
    result
end

def _reduce_513(val, _values, result)
                      optarg = new_optarg(val[0])
                      restarg = new_restarg(val[2])
                      result = new_args(optarg + restarg, val[3])
                    
    result
end

def _reduce_514(val, _values, result)
                      optarg = new_optarg(val[0])
                      restarg = new_restarg(val[2])
                      result = new_args(optarg + restarg + val[4], val[5])
                    
    result
end

def _reduce_515(val, _values, result)
                      optarg = new_optarg(val[0])
                      result = new_args(optarg, val[1])
                    
    result
end

def _reduce_516(val, _values, result)
                      optarg = new_optarg(val[0])
                      result = new_args(optarg + val[2], val[3])
                    
    result
end

def _reduce_517(val, _values, result)
                      optarg = new_restarg(val[0])
                      result = new_args(optarg, val[1])
                    
    result
end

def _reduce_518(val, _values, result)
                      restarg = new_restarg(val[0])
                      result = new_args(restarg + val[2], val[3])
                    
    result
end

def _reduce_519(val, _values, result)
                      result = new_args(nil, val[0])
                    
    result
end

def _reduce_520(val, _values, result)
                      result = new_args(nil, nil)
                    
    result
end

# reduce 521 omitted

def _reduce_522(val, _values, result)
                      result = value(val[0]).to_sym
                      scope.add_local result
                    
    result
end

def _reduce_523(val, _values, result)
                      raise 'formal argument cannot be a constant'
                    
    result
end

def _reduce_524(val, _values, result)
                      raise 'formal argument cannot be an instance variable'
                    
    result
end

def _reduce_525(val, _values, result)
                      raise 'formal argument cannot be a class variable'
                    
    result
end

def _reduce_526(val, _values, result)
                      raise 'formal argument cannot be a global variable'
                    
    result
end

def _reduce_527(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_528(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 529 omitted

# reduce 530 omitted

def _reduce_531(val, _values, result)
                      result = s(:arg, val[0])
                    
    result
end

def _reduce_532(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_533(val, _values, result)
                      result = s(:mlhs, val[0])
                    
    result
end

def _reduce_534(val, _values, result)
                      val[0] << val[2]
                      result = val[0]
                    
    result
end

# reduce 535 omitted

def _reduce_536(val, _values, result)
                      result = val[0].push(s(:restarg, val[3]))
                    
    result
end

def _reduce_537(val, _values, result)
                      result = val[0].push(s(:restarg, val[3])).concat(val[5][1..-1])
                    
    result
end

def _reduce_538(val, _values, result)
                      result = val[0].push(s(:restarg))
                    
    result
end

def _reduce_539(val, _values, result)
                      result = val[0].push(s(:restarg)).concat(val[4][1..-1])
                    
    result
end

def _reduce_540(val, _values, result)
                      result = s(:mlhs, s(:restarg, val[1]))
                    
    result
end

def _reduce_541(val, _values, result)
                      val[3].insert(1, s(:restarg, val[1]))
                      result = val[3]
                    
    result
end

def _reduce_542(val, _values, result)
                      result = s(:mlhs, s(:restarg))
                    
    result
end

def _reduce_543(val, _values, result)
                      val[2].insert(1, s(:restarg))
                      result = val[2]
                    
    result
end

def _reduce_544(val, _values, result)
                      result = [val[0]]
                    
    result
end

def _reduce_545(val, _values, result)
                      val[0] << val[2]
                      result = val[0]
                    
    result
end

def _reduce_546(val, _values, result)
                      result = new_assign(new_assignable(new_ident(val[0])), val[1], val[2])
                    
    result
end

def _reduce_547(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_548(val, _values, result)
                      result = val[0]
                      val[0] << val[2]
                    
    result
end

# reduce 549 omitted

# reduce 550 omitted

def _reduce_551(val, _values, result)
                      result = "*#{value(val[1])}".to_sym
                    
    result
end

def _reduce_552(val, _values, result)
                      result = :"*"
                    
    result
end

# reduce 553 omitted

# reduce 554 omitted

def _reduce_555(val, _values, result)
                      result = "&#{value(val[1])}".to_sym
                    
    result
end

def _reduce_556(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_557(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_558(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_559(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_560(val, _values, result)
                      result = []
                    
    result
end

def _reduce_561(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_562(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_563(val, _values, result)
                      result = val[0].concat(val[2])
                    
    result
end

def _reduce_564(val, _values, result)
                      result = [val[0], val[2]]
                    
    result
end

def _reduce_565(val, _values, result)
                      result = [new_sym(val[0]), val[1]]
                    
    result
end

def _reduce_566(val, _values, result)
                      result = [s(:sym, source(val[1]).to_sym), val[3]]
                    
    result
end

def _reduce_567(val, _values, result)
                      result = [new_kwsplat(val[1])]
                    
    result
end

# reduce 568 omitted

# reduce 569 omitted

# reduce 570 omitted

# reduce 571 omitted

# reduce 572 omitted

# reduce 573 omitted

# reduce 574 omitted

# reduce 575 omitted

# reduce 576 omitted

# reduce 577 omitted

# reduce 578 omitted

# reduce 579 omitted

# reduce 580 omitted

# reduce 581 omitted

# reduce 582 omitted

# reduce 583 omitted

# reduce 584 omitted

# reduce 585 omitted

# reduce 586 omitted

# reduce 587 omitted

# reduce 588 omitted

# reduce 589 omitted

# reduce 590 omitted

def _reduce_591(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Opal
