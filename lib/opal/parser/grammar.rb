#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'
module Opal
  class Parser < Racc::Parser


##### State transition tables begin ###

clist = [
'64,65,66,8,52,598,258,568,58,59,258,258,598,62,98,60,61,63,28,29,67',
'68,-95,-477,-103,109,642,27,26,25,91,90,92,93,560,468,18,559,677,677',
'-102,-87,7,42,6,9,95,94,85,51,87,86,88,-98,89,96,97,598,82,83,196,39',
'40,-94,-100,-70,677,206,207,620,253,676,676,-95,-97,253,560,102,197',
'562,206,207,101,37,598,-103,31,641,598,53,257,55,-95,33,257,257,-103',
'41,74,676,-102,-82,206,207,-99,19,75,-87,-98,567,80,74,76,77,78,79,102',
'198,597,75,81,101,-100,102,-87,597,-94,57,101,-94,54,64,65,66,673,52',
'38,84,205,58,59,-97,-93,-87,62,-101,60,61,63,28,29,67,68,-87,311,-89',
'835,247,27,26,25,91,90,92,93,-94,-91,18,102,-569,597,938,619,101,42',
'-94,-88,95,94,85,51,87,86,88,546,89,96,97,-99,82,83,102,39,40,-93,102',
'101,597,302,102,101,597,303,-95,101,-95,-90,-103,-95,-103,-570,-102',
'-103,-102,211,311,-102,215,216,-98,53,-98,55,-101,-98,-465,630,400,41',
'755,755,-89,-465,-100,-102,-100,19,560,-100,677,562,80,74,76,77,78,79',
'-92,206,207,75,81,-97,-91,-97,755,-88,-97,57,403,-93,54,64,65,66,-569',
'52,38,84,102,58,59,676,414,101,62,-90,60,61,63,28,29,67,68,-92,632,631',
'628,801,27,26,25,91,90,92,93,-93,-89,220,-99,-570,-99,699,630,-99,42',
'-93,427,95,94,85,51,87,86,88,467,89,96,97,-91,82,83,-88,39,40,228,102',
'102,754,754,204,101,101,-89,-101,102,-101,469,-96,-101,101,-569,-90',
'-89,630,211,206,207,215,-570,-92,53,102,55,754,-91,225,101,-88,41,227',
'226,632,631,604,-91,605,219,-88,813,-94,795,80,74,76,77,78,79,-90,470',
'-103,75,81,814,-468,907,-92,-477,-90,57,216,-468,54,64,65,66,-92,52',
'38,84,-475,58,59,632,631,628,62,-475,60,61,63,28,29,67,68,560,-567,503',
'562,-98,27,26,25,91,90,92,93,-87,516,220,249,250,518,-100,665,-96,42',
'-95,251,95,94,85,51,87,86,88,274,89,96,97,630,82,83,520,39,40,228,232',
'237,238,239,234,236,244,245,240,241,-468,-468,221,222,908,102,242,243',
'-468,211,101,630,215,-567,635,53,228,55,-69,271,225,269,231,41,227,226',
'223,224,235,233,229,219,230,-567,304,305,80,272,76,77,78,79,632,631',
'633,75,81,225,246,546,-238,227,226,57,-97,-468,54,-468,275,341,-474',
'528,38,84,64,65,66,-474,52,338,632,631,58,59,838,311,605,62,998,60,61',
'63,28,29,67,68,412,413,529,-93,530,27,26,25,91,90,92,93,424,-102,220',
'356,355,426,425,665,539,42,541,542,95,94,85,51,87,86,88,274,89,96,97',
'630,82,83,262,39,40,228,232,237,238,239,234,236,244,245,240,241,339',
'311,221,222,-473,253,242,243,341,211,630,-473,215,206,207,53,543,55',
'338,271,225,269,231,41,227,226,223,224,235,233,229,219,230,206,207,547',
'80,272,76,77,78,79,632,631,637,75,81,-470,246,652,356,355,-471,57,-470',
'548,54,228,275,-471,-472,311,38,84,64,65,66,-472,52,632,631,643,58,59',
'356,355,311,62,563,60,61,63,28,29,67,68,564,339,520,-89,571,27,26,25',
'91,90,92,93,625,-98,220,203,201,102,653,626,574,42,101,202,95,94,85',
'51,87,86,88,274,89,96,97,575,82,83,578,39,40,102,579,228,800,586,101',
'348,346,345,586,347,348,346,345,102,347,581,-91,583,101,211,865,838',
'215,865,838,53,-100,55,199,271,200,269,225,41,593,594,227,226,223,224',
'416,219,-88,610,611,612,80,272,76,77,78,79,-97,636,640,75,81,-335,-335',
'644,647,-264,649,57,650,-335,54,651,275,253,664,228,38,84,64,65,66,8',
'52,748,228,228,58,59,930,228,311,62,688,60,61,63,28,29,67,68,104,105',
'106,107,108,27,26,25,91,90,92,93,689,692,18,701,-335,-82,-335,702,7',
'42,704,9,95,94,85,51,87,86,88,552,89,96,97,715,82,83,721,39,40,722,586',
'311,348,346,345,586,347,348,346,345,341,347,897,898,724,729,899,96,97',
'37,338,743,281,228,744,53,746,55,961,33,348,346,345,41,347,750,203,463',
'589,605,758,19,797,350,464,592,80,74,76,77,78,79,356,355,225,75,81,-265',
'227,226,223,224,503,57,503,503,54,64,65,66,816,52,38,84,817,58,59,824',
'518,520,62,715,60,61,63,295,296,67,68,339,832,466,253,465,291,292,298',
'91,90,92,93,253,833,220,538,535,253,715,228,228,293,838,536,95,94,85',
'51,87,86,88,843,89,96,97,845,82,83,846,331,847,348,346,345,341,347,849',
'538,549,104,105,106,107,108,338,550,586,578,348,346,345,289,347,852',
'286,854,849,53,858,55,534,285,537,861,838,869,870,350,326,104,105,106',
'107,108,353,352,356,355,80,74,76,77,78,79,589,872,873,75,81,-569,875',
'592,466,884,465,57,578,887,54,64,65,66,889,52,299,84,891,58,59,893,895',
'-266,62,339,60,61,63,295,296,67,68,910,911,311,913,914,291,292,298,91',
'90,92,93,915,916,220,538,607,917,715,919,-264,293,923,608,95,94,85,51',
'87,86,88,-570,89,96,97,932,82,83,933,331,935,348,346,345,341,347,941',
'943,944,538,616,311,957,-267,338,963,586,614,348,346,345,289,347,849',
'215,972,849,53,849,55,606,976,609,932,979,980,985,350,578,570,987,989',
'991,993,353,352,356,355,80,74,76,77,78,79,589,993,1003,75,81,932,1011',
'860,301,721,615,57,537,849,54,64,65,66,932,52,299,84,1026,58,59,1027',
'993,993,62,339,60,61,63,295,296,67,68,993,1032,1033,993,,291,292,298',
'91,90,92,93,,,220,538,616,,,,,42,,742,95,94,85,51,87,86,88,,89,96,97',
',82,83,,39,40,,586,,348,346,345,586,347,348,346,345,341,347,961,,348',
'346,345,,347,211,338,,215,,,53,,55,615,,537,,,41,,,-288,-288,589,,,219',
',350,-288,,80,74,76,77,78,79,356,355,,75,81,,,,,,,57,,,54,64,65,66,',
'52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,339,,-288,,-288,291,292',
'298,91,90,92,93,,,220,538,616,,,,,42,,742,95,94,85,51,87,86,88,,89,96',
'97,,82,83,,39,40,,586,,348,346,345,586,347,348,346,345,341,347,,,,,',
',,211,338,,215,,,53,,55,615,,537,,,41,,,-290,-290,589,,,219,,350,-290',
',80,74,76,77,78,79,356,355,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,',
'58,59,,,,62,,60,61,63,295,296,67,68,339,,-290,,-290,291,292,298,91,90',
'92,93,,,220,538,1001,,,,,42,,1002,95,94,85,51,87,86,88,,89,96,97,,82',
'83,,39,40,,228,,,,,586,,348,346,345,341,347,,,,,,242,243,211,338,,215',
',,53,,55,1000,,609,225,,41,,227,226,223,224,,,219,,350,,,80,74,76,77',
'78,79,356,355,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,',
'60,61,63,28,29,67,68,339,,,,,27,26,25,91,90,92,93,,,18,,586,,348,346',
'345,42,347,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228,586,,348',
'346,345,586,347,348,346,345,341,347,589,,,,242,243,,211,338,,215,,,53',
',55,,,225,,231,41,227,226,223,224,589,,229,19,230,350,,,80,74,76,77',
'78,79,356,355,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,',
'60,61,63,28,29,67,68,339,,,,,27,26,25,91,90,92,93,,,220,,,,,,,42,,,95',
'94,85,51,87,86,88,274,89,96,97,,82,83,,39,40,228,232,237,238,239,234',
'236,244,245,240,241,-287,-287,221,222,,,242,243,-287,211,,,215,-570',
',53,,55,,271,225,,231,41,227,226,223,224,235,233,229,219,230,,,,80,272',
'76,77,78,79,,,,75,81,,246,818,,,,57,,-287,54,-287,275,,,,38,84,64,65',
'66,,52,,,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90',
'92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,274,89,96,97,,82,83,,39',
'40,228,232,237,238,239,234,236,244,245,240,241,,,221,222,,,242,243,',
'211,,,215,,,53,,55,,,225,,231,41,227,226,223,224,235,233,229,219,230',
',,,80,272,76,77,78,79,,,,75,81,,246,,,,,57,,,54,,275,,,,38,84,64,65',
'66,,52,,,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93',
',,18,,586,,348,346,345,42,347,,95,94,85,51,87,86,88,,89,96,97,,82,83',
',39,40,228,,,,,,586,,348,346,345,341,347,589,,,,242,243,,211,338,,215',
',,53,,55,,,225,,231,41,227,226,223,224,,,229,19,230,350,,,80,74,76,77',
'78,79,356,355,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,',
'60,61,63,28,29,67,68,339,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228,,,,,,586,,348,346,345',
'341,347,,,,,242,243,,211,338,,215,,,53,,55,,,225,,231,41,227,226,223',
'224,,,229,19,230,350,,,80,74,76,77,78,79,356,355,,75,81,,,,,,,57,,,54',
'64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,339,,,,,27,26',
'25,91,90,92,93,,,18,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83',
',39,40,228,,,,,,586,,348,346,345,341,347,,,,,242,243,,211,338,,215,',
',53,,55,,,225,,231,41,227,226,223,224,,,229,19,230,350,,,80,74,76,77',
'78,79,356,355,,75,81,102,,,,,101,57,,,54,64,65,66,,52,38,84,,58,59,',
',,62,,60,61,63,295,296,67,68,339,,,,,291,292,298,91,90,92,93,,,220,',
',,,,,293,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,331,,348,346,345,341',
'347,,,,,,,,,338,,,,,,,368,,,31,,,53,,55,,33,,,,,,350,,,,,,,353,352,356',
'355,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,299,84,,58',
'59,,,,62,339,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220',
',,,,,,293,,,95,94,85,51,87,86,373,,89,96,97,228,82,83,,331,,348,346',
'345,341,347,,,,,,,242,243,338,,,,379,,,374,,,215,,225,53,231,55,227',
'226,223,224,,,,350,,,,,,,353,352,356,355,80,74,76,77,78,79,,,,75,81',
',,,,,,57,,,54,-566,-566,-566,,-566,299,84,,-566,-566,,,,-566,339,-566',
'-566,-566,-566,-566,-566,-566,,-566,,,,-566,-566,-566,-566,-566,-566',
'-566,,,-566,,,,,,,-566,,,-566,-566,-566,-566,-566,-566,-566,-566,-566',
'-566,-566,,-566,-566,,-566,-566,228,232,237,238,239,234,236,244,245',
'240,241,,,221,222,,,242,243,,-566,,,-566,-566,,-566,,-566,,-566,225',
'-566,231,-566,227,226,223,224,235,233,229,-566,230,-566,,,-566,-566',
'-566,-566,-566,-566,,,,-566,-566,,246,,,,,-566,,,-566,,-566,,,,-566',
'-566,-567,-567,-567,,-567,,,,-567,-567,,,,-567,,-567,-567,-567,-567',
'-567,-567,-567,,-567,,,,-567,-567,-567,-567,-567,-567,-567,,,-567,,',
',,,,-567,,,-567,-567,-567,-567,-567,-567,-567,-567,-567,-567,-567,,-567',
'-567,,-567,-567,228,232,237,238,239,234,236,244,245,240,241,,,221,222',
',,242,243,,-567,,,-567,-567,,-567,,-567,,-567,225,-567,231,-567,227',
'226,223,224,235,233,229,-567,230,-567,,,-567,-567,-567,-567,-567,-567',
',,,-567,-567,,246,,,,,-567,,,-567,,-567,,,,-567,-567,64,65,66,8,52,',
',,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,',
',,,,7,42,6,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228,,,,,,586',
',348,346,345,341,347,,,,,242,243,,37,338,,31,,,53,,55,,33,225,,231,41',
'227,226,223,224,,,,19,,350,,,80,74,76,77,78,79,356,355,,75,81,,,,,,416',
'57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,339,,',
',,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97',
',82,83,,39,40,,,,,,,586,,348,346,345,341,347,,,,,,,,211,338,,215,,,53',
',55,,,,,,41,,,,,,,,19,,350,,,80,74,76,77,78,79,356,355,,75,81,,,,,,',
'57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,339,,',
',,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97',
',82,83,,39,40,228,232,237,238,239,234,236,244,245,240,241,,,221,222',
',,242,243,,211,,,215,,,53,,55,,,225,,231,41,227,226,223,224,235,233',
'229,19,230,,,,80,74,76,77,78,79,,,,75,81,,246,,,,,57,,,54,64,65,66,',
'52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93',
',,18,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228,232',
'237,238,239,234,236,244,245,240,241,,,221,222,,,242,243,,211,,,215,',
',53,,55,,,225,,231,41,227,226,223,224,235,233,229,19,230,,,,80,74,76',
'77,78,79,,,,75,81,,246,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,',
'60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94',
'85,51,87,86,88,,89,96,97,,82,83,,39,40,228,232,237,238,239,234,236,244',
'245,240,241,,,221,222,,,242,243,,211,,,215,,,53,,55,,,225,,231,41,227',
'226,223,224,235,233,229,19,230,,,,80,74,76,77,78,79,,,,75,81,,246,,',
',,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,',
',,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96',
'97,,82,83,,39,40,228,232,237,238,239,234,236,244,245,240,241,,,221,222',
',,242,243,,37,,,31,,,53,,55,,33,225,,231,41,227,226,223,224,235,233',
'229,19,230,,,,80,74,76,77,78,79,,,,75,81,,246,,,,,57,,,54,64,65,66,8',
'52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93',
',,18,,,,,,7,42,6,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228',
'232,237,238,239,234,236,244,245,240,241,,,221,222,,,242,243,,37,,,31',
',,53,,55,,33,225,,231,41,227,226,223,224,235,233,229,19,230,,,,80,74',
'76,77,78,79,,,,75,81,,246,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,',
'62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9',
'95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228,232,237,238,239,234',
'236,244,245,240,241,,,221,222,,,242,243,,37,,,31,,,53,,55,,33,225,,231',
'41,227,226,223,224,235,233,229,19,230,,,,80,74,76,77,78,79,,,,75,81',
',246,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,28,29,67',
'68,,,,,,27,26,25,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,',
'89,96,97,,82,83,,39,40,228,232,237,238,239,234,236,244,245,240,241,',
',221,222,,,242,243,,211,,,215,,,53,,55,,432,225,,231,41,227,226,223',
'224,235,233,229,219,230,,,,80,74,76,77,78,79,,,,75,81,,246,,,,,57,,',
'54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26',
'25,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83',
',39,40,228,232,237,238,239,234,236,244,245,240,241,,,221,222,,,242,243',
',211,,,215,,,53,,55,,,225,,231,41,227,226,223,224,235,233,229,219,230',
',,,80,74,76,77,78,79,,,,75,81,,246,,,,,57,,,54,64,65,66,,52,38,84,,58',
'59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,220,,,,,',
',42,,,95,94,85,51,87,86,88,274,89,96,97,,82,83,,39,40,228,232,237,238',
'239,234,236,244,245,240,241,,,221,222,,,242,243,,211,,,215,,,53,,55',
',271,225,,231,41,227,226,223,224,235,233,229,219,230,,,,80,272,76,77',
'78,79,,,,75,81,,246,,,,,57,,,54,,275,,,,38,84,64,65,66,,52,,,,58,59',
',,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,220,,,,,,,42',
',,95,94,85,51,87,86,88,274,89,96,97,,82,83,,39,40,228,232,237,238,239',
'234,236,244,245,240,241,,,221,222,,,242,243,,211,,,215,,,53,,55,,271',
'225,,231,41,227,226,223,224,235,233,229,219,230,,,,80,272,76,77,78,79',
',,,75,81,,246,,,,,57,,,54,,275,,,,38,84,64,65,66,,52,,,,58,59,,,,62',
',60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,220,,,,,,,42,,,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228,232,237,238,239,234,236',
'244,245,240,241,,,221,222,,,242,243,,211,,,215,,,53,,55,,,225,,231,41',
'227,226,223,224,235,233,229,219,230,,,,80,74,76,77,78,79,,,,75,81,,246',
',,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,',
',,,27,26,25,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96',
'97,,82,83,,39,40,228,232,237,238,239,234,236,244,245,240,241,,,-590',
'-590,,,242,243,,211,,,215,,,53,,55,,432,225,,231,41,227,226,223,224',
'235,233,229,219,230,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65',
'66,,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90',
'92,93,,,18,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228',
'232,237,238,239,234,236,244,245,240,241,,,-590,-590,,,242,243,,211,',
',215,,,53,,55,,,225,,231,41,227,226,223,224,235,233,229,19,230,,,,80',
'74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62',
',60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94',
'85,51,87,86,88,,89,96,97,,82,83,,39,40,228,-590,-590,-590,-590,234,236',
',,-590,-590,,,,,,,242,243,,211,,,215,,,53,,55,,,225,,231,41,227,226',
'223,224,235,233,229,19,230,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,',
'54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26',
'25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82',
'83,,39,40,228,-590,-590,-590,-590,234,236,,,-590,-590,,,,,,,242,243',
',37,,,31,,,53,,55,,33,225,,231,41,227,226,223,224,235,233,229,19,230',
',,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59',
',,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42',
',,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228,-590,-590,-590,-590',
'234,236,,,-590,-590,,,,,,,242,243,,211,,,215,,472,53,,55,,,225,,231',
'41,227,226,223,224,235,233,229,19,230,,,,80,74,76,77,78,79,,,,75,81',
',,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68',
',,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,',
'89,96,97,,82,83,,39,40,228,-590,-590,-590,-590,234,236,,,-590,-590,',
',,,,,242,243,,211,,,215,,,53,,55,,,225,,231,41,227,226,223,224,235,233',
'229,219,230,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52',
'38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92',
'93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228',
'-590,-590,-590,-590,234,236,,,-590,-590,,,,,,,242,243,,211,,,215,,,53',
',55,,,225,,231,41,227,226,223,224,235,233,229,219,230,,,,80,74,76,77',
'78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61',
'63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94',
'85,51,87,86,88,,89,96,97,,82,83,,39,40,228,-590,-590,-590,-590,234,236',
',,-590,-590,,,,,,,242,243,,211,,,215,,,53,,55,,,225,,231,41,227,226',
'223,224,235,233,229,219,230,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,',
',54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291',
'292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97',
',82,83,,39,40,228,232,237,238,239,234,236,,,240,241,,,,,,,242,243,,211',
',,215,,,53,,55,,,225,,231,41,227,226,223,224,235,233,229,219,230,,,',
'80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,',
',,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,',
',,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228,232,237,238',
'239,234,236,244,,240,241,,,,,,,242,243,,211,,,215,,,53,,55,,,225,,231',
'41,227,226,223,224,235,233,229,219,230,,,,80,74,76,77,78,79,,,,75,81',
',,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68',
',,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,',
'89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41',
',,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52',
'38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92',
'93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,',
',,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60',
'61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,',
'215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,',
',57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,',
',,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,',
',,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52',
'38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92',
'93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,',
',,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60',
'61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,',
'215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,',
',57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,',
',,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,',
',,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52',
'38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92',
'93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,',
',,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60',
'61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,',
'215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,',
',57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,',
',,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,',
',,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52',
'38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92',
'93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,',
',,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60',
'61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,',
'215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,',
',57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,',
',,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,',
',,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52',
'38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92',
'93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,',
',,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60',
'61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,',
'215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,',
',57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,',
',,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,',
',,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52',
'38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92',
'93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,',
',,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60',
'61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,',
'215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,',
',57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,',
',,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,',
',,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52',
'38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92',
'93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,',
',,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60',
'61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,',
'215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,',
',57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,',
'27,26,25,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,274,89,96',
'97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,271,,269,,41',
',,,,,,,219,,,,,80,272,76,77,78,79,,,,75,81,,,,,,,57,,,54,,275,,,,38',
'84,64,65,66,,52,,,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91',
'90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,274,89,96,97,,82,83,',
'39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,271,,269,,41,,,,,,,,219',
',,,,80,272,76,77,78,79,,,,75,81,,,,,,,57,,,54,,275,,,,38,84,64,65,66',
',52,,,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,',
',220,,,,,,,42,,,95,94,85,51,87,86,88,274,89,96,97,,82,83,,39,40,,,,',
',,,,,,,,,,,,,,,,211,,,215,,514,53,,55,,271,,269,,41,,,,,,,,219,,,,,80',
'272,76,77,78,79,,,,75,81,,,,,,,57,,,54,,275,,,,38,84,64,65,66,,52,,',
',58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,',
'220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,',
',,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78',
'79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63',
'295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85',
'51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,',
'53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,',
'54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291',
'292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97',
',82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,',
'219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84',
',58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,',
'220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,',
',,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78',
'79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63',
'28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51',
'87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,281,,,53,',
'55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54',
'64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292',
'298,91,90,92,93,,,220,,,,,,,293,,,95,94,85,51,87,86,88,,89,96,97,,82',
'83,,789,,348,346,345,341,347,,,,,,,,,338,,,,,,,289,,,215,,,53,,55,,',
',,,,,350,778,,,,,,353,352,356,355,80,74,76,77,78,79,,,,75,81,,,,532',
',,57,,,54,64,65,66,8,52,299,84,,58,59,,,,62,339,60,61,63,28,29,67,68',
',,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,281,,,53,,55,,33,,,,41',
',,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52',
'38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92',
'93,,,220,,,,,,,293,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,331,,348',
'346,345,341,347,,,,,,,,,338,,,,,,,289,,,286,,,53,,55,,,,,,,,350,,,,',
',,353,352,356,355,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66',
'311,52,299,84,,58,59,,,,62,339,60,61,63,295,296,67,68,,,,,,291,292,298',
'91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,',
'39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,552,,53,,55,,,,,,41,,,,,,,,219,',
',,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58',
'59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7',
'42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,',
',,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75',
'81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67',
'68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,293,,,95,94,85,51,87,86',
'88,,89,96,97,,82,83,,789,,348,346,345,341,347,,,,,,,,,338,,,,,,,585',
',,215,,,53,,55,,,,,,,,350,,,,,,,353,352,356,355,80,74,76,77,78,79,,',
',75,81,,,,,,,57,,,54,64,65,66,,52,299,84,,58,59,,,,62,339,60,61,63,28',
'29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,85,51,87,86',
'88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,',
',,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66',
',52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92',
'93,,,18,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,',
',,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,19,,,,,80,74,76,77',
'78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61',
'63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,293,,,95,94',
'85,51,87,86,373,,89,96,97,,82,83,,331,,348,346,345,341,347,,,,,,,,,338',
',,,,,,374,,,215,,,53,,55,,,,,,,,350,,,,,,,353,352,356,355,80,74,76,77',
'78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,299,84,,58,59,,,,62,339,60',
'61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,85',
'51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,',
'53,,55,,,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54',
'64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292',
'298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82',
'83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219',
',,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,-571,-571,-571,,-571,38',
'84,,-571,-571,,,,-571,,-571,-571,-571,-571,-571,-571,-571,,,,,,-571',
'-571,-571,-571,-571,-571,-571,,,-571,,,,,,,-571,,,-571,-571,-571,-571',
'-571,-571,-571,-571,-571,-571,-571,,-571,-571,,-571,-571,,,,,,,,,,,',
',,,,,,,,,-571,,,-571,-571,,-571,,-571,,-571,,-571,,-571,,,,,,,,-571',
',,,,-571,-571,-571,-571,-571,-571,,,,-571,-571,,,,,,,-571,,,-571,,-571',
',,,-571,-571,-572,-572,-572,,-572,,,,-572,-572,,,,-572,,-572,-572,-572',
'-572,-572,-572,-572,,,,,,-572,-572,-572,-572,-572,-572,-572,,,-572,',
',,,,,-572,,,-572,-572,-572,-572,-572,-572,-572,-572,-572,-572,-572,',
'-572,-572,,-572,-572,,,,,,,,,,,,,,,,,,,,,-572,,,-572,-572,,-572,,-572',
',-572,,-572,,-572,,,,,,,,-572,,,,,-572,-572,-572,-572,-572,-572,,,,-572',
'-572,,,,,,,-572,,,-572,,-572,,,,-572,-572,64,65,66,,52,,,,58,59,,,,62',
',60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,220,,,,,,,42,,,95',
'94,85,51,87,86,88,274,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211',
',,215,,,53,,55,,271,,,,41,,,,,,,,219,,,,,80,272,76,77,78,79,,,,75,81',
',,,,,,57,,,54,,275,,,,38,84,64,65,66,,52,,,,58,59,,,,62,,60,61,63,28',
'29,67,68,,,,,,27,26,25,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86',
'88,274,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55',
',271,,,,41,,,,,,,,219,,,,,80,272,76,77,78,79,,,,75,81,,,,,,,57,,,54',
',275,,,,38,84,64,65,66,,52,,,,58,59,,,,62,,60,61,63,295,296,67,68,,',
',,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,',
',,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52',
'38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92',
'93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,',
',,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60',
'61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,',
'215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,',
',57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,',
',,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,',
',,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52',
'38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92',
'93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,274,89,96,97,,82,83,,39,40',
',,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,696,,269,,41,,,,,,,,219,,,,',
'80,272,76,77,78,79,,,,75,81,,,,,,,57,,,54,,275,,,,38,84,64,65,66,,52',
',,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93',
',,220,,,,,,,42,,,95,94,85,51,87,86,88,274,89,96,97,,82,83,,39,40,,,',
',,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,269,,41,,,,,,,,219,,,,,80,272',
'76,77,78,79,,,,75,81,,,,,,,57,,,54,,275,,,,38,84,64,65,66,,52,,,,58',
'59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220',
',,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,',
',,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79',
',,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,28',
'29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87',
'86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,',
'33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,416,57,,,54,64',
'65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298',
'91,90,92,93,,,220,,,,,,,293,,,95,94,85,51,87,86,88,,89,96,97,,82,83',
',789,,348,346,345,341,347,,,,,,,,,338,,,,,,,289,,,286,,,53,,55,,,,,',
',,350,,,,,,,353,352,356,355,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54',
'64,65,66,,52,299,84,,58,59,,,,62,339,60,61,63,28,29,67,68,,,,,,27,26',
'25,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,274,89,96,97,,82',
'83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,271,,,,41,,,,,,,,219',
',,,,80,272,76,77,78,79,,,,75,81,,,,,,,57,,,54,,275,,,,38,84,64,65,66',
',52,,,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,',
',220,,,,,,,42,,,95,94,85,51,87,86,88,274,89,96,97,,82,83,,39,40,,,,',
',,,,,,,,,,,,,,,,211,,,215,,,53,,55,,271,,,,41,,,,,,,,219,,,,,80,272',
'76,77,78,79,,,,75,81,,,,,,,57,,,54,,275,,,,38,84,64,65,66,,52,,,,58',
'59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220',
',,,,,,293,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,789,,348,346,345',
'341,347,,,,,,,,,338,,,,,,,289,,,286,,,53,,55,,,,,,,,350,,,,,,,353,352',
'356,355,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,299,84',
',58,59,,,,62,339,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93',
',,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,',
',,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77',
'78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61',
'63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94',
'85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215',
',,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57',
',,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291',
'292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97',
',82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,',
'219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84',
',58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,',
',,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,',
',,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,',
'75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296',
'67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86',
'88,274,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55',
',696,,269,,41,,,,,,,,219,,,,,80,272,76,77,78,79,,,,75,81,,,,,,,57,,',
'54,,275,,,,38,84,64,65,66,,52,,,,58,59,,,,62,,60,61,63,295,296,67,68',
',,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,274',
'89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41',
',,,,,,,219,,,,,80,272,76,77,78,79,,,,75,81,,,,,,,57,,,54,,275,,,,38',
'84,64,65,66,8,52,,,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25',
'91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83',
',39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,',
'80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59',
',,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42',
',9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,',
'37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81',
',,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68',
',,,,,291,292,298,91,90,92,93,,,220,,,,,,,293,,,95,94,85,51,87,86,88',
',89,96,97,,82,83,,789,,348,346,345,341,347,,,,,,,,,338,,,,,,,585,,,215',
',,53,,55,,,,,,,,350,778,,,,,,353,352,356,355,80,74,76,77,78,79,,,,75',
'81,,,,,,,57,,,54,64,65,66,8,52,299,84,,58,59,,,,62,339,60,61,63,28,29',
'67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86',
'88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33',
',,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66',
'8,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92',
'93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,',
',,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60',
'61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94',
'85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,',
',53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57',
',,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26',
'25,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,274,89,96,97,,82',
'83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,271,,,,41,,,,,,,,219',
',,,,80,272,76,77,78,79,,,,75,81,,,,,,,57,,,54,,275,,,,38,84,64,65,66',
',52,,,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,',
',220,,,,,,,42,,,95,94,85,51,87,86,88,274,89,96,97,,82,83,,39,40,,,,',
',,,,,,,,,,,,,,,,211,,,215,,,53,,55,,271,,,,41,,,,,,,,219,,,,,80,272',
'76,77,78,79,,,,75,81,,,,,,,57,,,54,,275,,,,38,84,64,65,66,,52,,,,58',
'59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,220,,,,,',
',42,,,95,94,85,51,87,86,88,274,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,',
',,,,,,211,,,215,,,53,,55,,271,,,,41,,,,,,,,219,,,,,80,272,76,77,78,79',
',,,75,81,,,,,,,57,,,54,,275,,,,38,84,64,65,66,,52,,,,58,59,,,,62,,60',
'61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,85',
'51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,',
'53,,55,,,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54',
'64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25',
'91,90,92,93,,,18,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39',
'40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,19,,,,,80,74',
'76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,',
'60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,',
',95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211',
',,215,,,53,,55,,799,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81',
',,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68',
',,,,,27,26,25,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,',
',,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52',
'38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,',
',220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,',
',,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78',
'79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63',
'28,29,67,68,,,,,,27,26,25,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87',
'86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55',
',,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65',
'66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91',
'90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39',
'40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80',
'74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62',
',60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,220,,,,,,,42,,,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,',
'215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,',
',57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,',
',,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,',
',,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52',
'38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,',
',18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,',
',,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78',
'79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63',
'28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51',
'87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55',
',33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64',
'65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298',
'91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,274,89,96,97,,82,83',
',39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,696,,269,,41,,,,,,,,219',
',,,,80,272,76,77,78,79,,,,75,81,,,,,,,57,,,54,,275,,,,38,84,64,65,66',
',52,,,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92',
'93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,274,89,96,97,,82,83,,39,40',
',,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,269,,41,,,,,,,,219,,,,,80',
'272,76,77,78,79,,,,75,81,,,,,,,57,,,54,,275,,,,38,84,64,65,66,8,52,',
',,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,',
',,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,',
',,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79',
',,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,28',
'29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87',
'86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,',
'33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65',
'66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91',
'90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39',
'40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80',
'74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62',
',60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42',
',,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211',
',,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,',
',,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,',
',,,,291,292,298,91,90,92,93,,,220,,,,,,,293,,,95,94,85,51,87,86,88,',
'89,96,97,,82,83,,789,,348,346,345,341,347,,,,,,,,,338,,,,,,,289,,,286',
',,53,,55,,,,,,,,350,,,,,,,353,352,356,355,80,74,76,77,78,79,,,,75,81',
',,,,,,57,,,54,64,65,66,,52,299,84,,58,59,,,,62,339,60,61,63,295,296',
'67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,293,,,95,94,85,51,87',
'86,88,,89,96,97,,82,83,,,,,,,,,,,,,,,,,,,,,,,,289,,,286,,,53,,55,,,',
',,,,,,,,,,,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52',
'299,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92',
'93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,',
',,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,432,,,,41,,,,,,,,219,,,,,80,74',
'76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,',
'60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,',
',95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211',
',,215,,,53,,55,,271,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81',
',,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68',
',,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,85,51,87,86,88,,89,96',
'97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,',
',,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38',
'84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18',
',,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,',
',,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79',
',,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,28',
'29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87',
'86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,',
'33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65',
'66,8,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90',
'92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40',
',,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60',
'61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95',
'94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,',
'215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,',
',57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,',
',27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96',
'97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,',
',,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84',
',58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,',
'220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,',
',,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78',
'79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63',
'28,29,67,68,,,,,,27,26,25,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87',
'86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55',
',,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65',
'66,,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90',
'92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40',
',,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74',
'76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,',
'60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,',
',95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211',
',,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,',
',,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,',
',,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,',
',,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52',
'38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92',
'93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,',
',,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76',
'77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60',
'61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94',
'85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,',
',53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57',
',,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26',
'25,91,90,92,93,,,18,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83',
',39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,19,,,,',
'80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59',
',,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42',
',9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,',
'37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81',
',,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68',
',,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89',
'96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,',
',,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38',
'84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93',
',,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,',
',,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77',
'78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61',
'63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94',
'85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215',
',,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57',
',,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291',
'292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97',
',82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,',
'219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84',
',58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,',
'220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,',
',,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78',
'79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63',
'295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85',
'51,87,86,88,274,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215',
',,53,,55,,,,269,,41,,,,,,,,219,,,,,80,272,76,77,78,79,,,,75,81,,,,,',
',57,,,54,,275,,,,38,84,64,65,66,8,52,,,,58,59,,,,62,,60,61,63,28,29',
'67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86',
'88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33',
',,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66',
',52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90',
'92,93,,,220,,,,,,,293,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,,,,,',
',,,,,,,,,,,,,,,,,968,,,215,,,53,,55,,,,,,,,,,,,,,,,,,,80,74,76,77,78',
'79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,299,84,,58,59,,,,62,,60,61,63',
'295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85',
'51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,',
'53,,55,,696,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57',
',,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27',
'26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,',
'82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19',
',,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58',
'59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7',
'42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,',
',,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75',
'81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,28,29,67',
'68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88',
',89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,',
'41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8',
'52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93',
',,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,',
',,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77',
'78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61',
'63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85',
'51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53',
',55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54',
'64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25',
'91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83',
',39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,',
'80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,',
',,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,220,,,,,,,42',
',,95,94,85,51,87,86,88,274,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,',
',,211,,,215,,,53,,55,,271,,,,41,,,,,,,,219,,,,-573,80,272,76,77,78,79',
'-573,-573,-573,75,81,,-573,-573,,-573,,57,,,54,,275,,-573,,38,84,,,',
',,,,-573,-573,,-573,-573,-573,-573,-573,,,,,,,,,,,,,,,,,,,,,,-573,-573',
'-573,-573,-573,-573,-573,-573,-573,-573,-573,-573,-573,-573,-573,,,-573',
'-573,-573,,658,,,,-573,,,,,,-573,,-573,,-573,-573,-573,-573,-573,-573',
'-573,,-573,-573,-573,,,,,,,,,,,,,-573,-573,,-90,,-573,,-287,-573,,-573',
',,-99,-287,-287,-287,,,,-287,-287,,-287,,,,,,,,,,,,,,,,,,,,-287,-287',
',-287,-287,-287,-287,-287,,,,,,,,,,,,,,,,,,,,,,-287,-287,-287,-287,-287',
'-287,-287,-287,-287,-287,-287,-287,-287,-287,-287,,,-287,-287,-287,',
'661,,,,-287,,,,,,-287,,-287,,-287,-287,-287,-287,-287,-287,-287,,-287',
',-287,,,,,,,,,,,,,-287,-287,,-92,,-287,,-573,-287,,-287,,,-101,-573',
'-573,-573,,,-573,-573,-573,,-573,,,,,,,,,-573,-573,-573,,,,,,,,,-573',
'-573,,-573,-573,-573,-573,-573,,,,,,,,,,,,,,,,,,,,,,-573,-573,-573,-573',
'-573,-573,-573,-573,-573,-573,-573,-573,-573,-573,-573,,,-573,-573,-573',
',815,-573,,,-573,,-573,,-573,,-573,,-573,,-573,-573,-573,-573,-573,-573',
'-573,,-573,-573,-573,,,,,,,,,,,,,-573,-573,-573,-573,,-573,,-287,-573',
',-573,,,-99,-287,-287,-287,,,-287,-287,-287,,-287,,,,,,,,,,-287,-287',
',,,,,,,,-287,-287,,-287,-287,-287,-287,-287,,,,,,,,,,,,,,,,,,,,,,-287',
'-287,-287,-287,-287,-287,-287,-287,-287,-287,-287,-287,-287,-287,-287',
',,-287,-287,-287,,661,-287,,,-287,,-287,,-287,,-287,,-287,,-287,-287',
'-287,-287,-287,-287,-287,,-287,,-287,,,,,,,,,,,,,-287,-287,-287,-287',
',-287,,-401,-287,,-287,,,-101,-401,-401,-401,,,-401,-401,-401,,-401',
',,,,,,,,-401,-401,-401,,,,,,,,,-401,-401,,-401,-401,-401,-401,-401,',
',,,,,,,,,,,,,,,,,,,,-401,-401,-401,-401,-401,-401,-401,-401,-401,-401',
'-401,-401,-401,-401,-401,,,-401,-401,-401,,,-401,,253,-401,,-401,,-401',
',-401,,-401,,-401,-401,-401,-401,-401,-401,-401,,-401,-401,-401,,,,',
',,,,,,,,-401,-401,-401,-401,-296,-401,,,-401,,-401,-296,-296,-296,,',
'-296,-296,-296,,-296,,,,,,,,,,-296,-296,,,,,,,,,-296,-296,,-296,-296',
'-296,-296,-296,,,,,,,,,,,,,,,,,,,,,,-296,-296,-296,-296,-296,-296,-296',
'-296,-296,-296,-296,-296,-296,-296,-296,,,-296,-296,-296,,,-296,,262',
'-296,,-296,,-296,,-296,,-296,,-296,-296,-296,-296,-296,-296,-296,,-296',
',-296,,,,,,,,,,,,,-296,-296,-296,-296,-279,-296,,,-296,,-296,-279,-279',
'-279,,,-279,-279,-279,,-279,,,,,,,,,,-279,-279,-279,,,,,,,,-279,-279',
',-279,-279,-279,-279,-279,,,,,,,,,,,,,,,,,,,,,,-279,-279,-279,-279,-279',
'-279,-279,-279,-279,-279,-279,-279,-279,-279,-279,,,-279,-279,-279,',
',-279,,,-279,,-279,,-279,,-279,,-279,,-279,-279,-279,-279,-279,-279',
'-279,,-279,,-279,,,,,,,,,,,,,-279,-279,-279,-279,-589,-279,,-279,-279',
',-279,-589,-589,-589,,,-589,-589,-589,,-589,,,,,,,,,-589,-589,-589,',
',,,,,,,-589,-589,,-589,-589,-589,-589,-589,,,,,,,,,,,,,,,,,,,,,,-589',
'-589,-589,-589,-589,-589,-589,-589,-589,-589,-589,-589,-589,-589,-589',
',,-589,-589,-589,,,-589,,253,-589,,-589,,-589,,-589,,-589,,-589,-589',
'-589,-589,-589,-589,-589,,-589,-589,-589,,,,,,,,,,,,,-589,-589,-589',
'-589,-589,-589,,,-589,,-589,-589,-589,-589,,,-589,-589,-589,,-589,,',
',,,,,,-589,-589,-589,,,,,,,,,-589,-589,,-589,-589,-589,-589,-589,,,',
',,,,,,,,,,,,,,,,,,-589,-589,-589,-589,-589,-589,-589,-589,-589,-589',
'-589,-589,-589,-589,-589,,,-589,-589,-589,,,-589,,253,-589,,-589,,-589',
',-589,,-589,,-589,-589,-589,-589,-589,-589,-589,,-589,-589,-589,,,,',
',,,,,,,,-589,-589,-589,-589,-589,-589,,,-589,,-589,-589,-589,-589,,',
'-589,-589,-589,,-589,,,,,,,,,,-589,,,,,,,,,,-589,-589,,-589,-589,-589',
'-589,-589,,,,,,,,,,,,-589,,,,,,,-589,-589,-589,,,-589,-589,-589,,-589',
',,,,-589,-589,,,,-589,,,-589,,,,,253,-589,-589,-589,,-589,-589,-589',
'-589,-589,,,,,,,,,,,,-589,,,,,,,,,,,,,-589,,-589,,,-589,,,-589,-589',
',-589,,,,,-589,,-589,-589,-589,253,-589,-589,-589,-589,,-589,,,,,,,',
',,-589,,,,,-589,,,,,-589,-589,,-589,-589,-589,-589,-589,-589,,-589,',
',-589,444,448,,,446,,,,,,,,,143,144,140,122,123,124,131,128,130,,,125',
'126,-589,-589,,,145,146,132,133,-589,,,,,253,-589,,,,,137,136,,121,142',
'139,138,134,135,129,127,119,141,120,,-589,147,,,,,,,,,,,,-589,,-589',
',,-589,157,168,158,181,154,174,164,163,189,192,179,162,161,156,182,190',
'191,166,155,169,173,175,167,160,,,,176,183,178,177,170,180,165,153,172',
'171,184,185,186,187,188,152,159,150,151,148,149,112,114,111,,113,,,',
',,,,,143,144,140,122,123,124,131,128,130,,,125,126,,,,,145,146,132,133',
',,,,,,,,,,,137,136,,121,142,139,138,134,135,129,127,119,141,120,,,147',
'193,,,,,,,,,,81,157,168,158,181,154,174,164,163,189,192,179,162,161',
'156,182,190,191,166,155,169,173,175,167,160,,,,176,183,178,177,170,180',
'165,153,172,171,184,185,186,187,188,152,159,150,151,148,149,112,114',
',,113,,,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126,,,,,145',
'146,132,133,,,,,,,,,,,,137,136,,121,142,139,138,134,135,129,127,119',
'141,120,,,147,193,,,,,,,,,,81,157,168,158,181,154,174,164,163,189,192',
'179,162,161,156,182,190,191,166,155,169,173,175,167,160,,,,176,183,178',
'177,170,180,165,153,172,171,184,185,186,187,188,152,159,150,151,148',
'149,112,114,,,113,,,,,,,,,143,144,140,122,123,124,131,128,130,,,125',
'126,,,,,145,146,132,133,,,,,,,,,,,,137,136,,121,142,139,138,134,135',
'129,127,119,141,120,,,147,193,,,,,,,,,,81,157,168,158,181,154,174,164',
'163,189,192,179,162,161,156,182,190,191,166,155,169,173,175,167,160',
',,,176,183,178,177,170,180,165,153,172,171,184,185,186,187,188,152,159',
'150,151,148,149,112,114,,,113,,,,,,,,,143,144,140,122,123,124,131,128',
'130,,,125,126,,,,,145,146,132,133,,,,,,,,,,,,137,136,,121,142,139,138',
'134,135,129,127,119,141,120,,,147,193,,,,,,,,,,81,157,168,158,181,154',
'174,164,163,189,192,179,162,161,156,182,190,191,166,155,169,173,175',
'167,160,,,,176,183,178,388,387,389,386,153,172,171,184,185,186,187,188',
'152,159,150,151,384,385,382,114,87,86,383,,89,,,,,,,143,144,140,122',
'123,124,131,128,130,,,125,126,,,,,145,146,132,133,,,,,,393,,,,,,137',
'136,,121,142,139,138,134,135,129,127,119,141,120,,,147,157,168,158,181',
'154,174,164,163,189,192,179,162,161,156,182,190,191,166,155,169,173',
'175,167,160,,,,176,183,178,177,170,180,165,153,172,171,184,185,186,187',
'188,152,159,150,151,148,149,112,114,410,409,113,,411,,,,,,,143,144,140',
'122,123,124,131,128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,,,137',
'136,,121,142,139,138,134,135,129,127,119,141,120,,,147,157,168,158,181',
'154,174,164,163,189,192,179,162,161,156,182,190,191,166,155,169,173',
'175,167,160,,,,176,183,178,177,170,180,165,153,172,171,184,185,186,187',
'188,152,159,150,151,148,149,112,114,410,409,113,,411,,,,,,,143,144,140',
'122,123,124,131,128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,,,137',
'136,,121,142,139,138,134,135,129,127,119,141,120,,,147,157,168,158,181',
'154,174,164,163,189,192,179,162,161,156,182,190,191,166,155,169,173',
'175,167,160,,,,176,183,178,177,170,180,165,153,172,171,184,185,186,187',
'188,152,159,150,151,148,149,112,114,,,113,,,,,,,,,143,144,140,122,123',
'124,131,128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,,,137,136,,121',
'142,139,138,134,135,129,127,119,141,120,438,442,147,,439,,,,,,,,,143',
'144,140,122,123,124,131,128,130,,,125,126,,,,,145,146,132,133,,,,,,253',
',,,,,137,136,,121,142,139,138,134,135,129,127,119,141,120,451,442,147',
',452,,,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126,,,,,145,146',
'132,133,,,,,,,,,,,,137,136,,121,142,139,138,134,135,129,127,119,141',
'120,451,442,147,,452,,,,,,,,,143,144,140,122,123,124,131,128,130,,,125',
'126,,,,,145,146,132,133,,,,,,,,,,,,137,136,,121,142,139,138,134,135',
'129,127,119,141,120,451,442,147,,452,,,,,,,,,143,144,140,122,123,124',
'131,128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,,,137,136,,121,142',
'139,138,134,135,129,127,119,141,120,451,442,147,,452,,,,,,,,,143,144',
'140,122,123,124,131,128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,',
',137,136,,121,142,139,138,134,135,129,127,119,141,120,666,442,147,,667',
',,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126,,,,,145,146,132',
'133,,,,,,253,,,,,,137,136,,121,142,139,138,134,135,129,127,119,141,120',
'668,448,147,,669,,,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126',
',,,,145,146,132,133,,,,,,,,,,,,137,136,,121,142,139,138,134,135,129',
'127,119,141,120,706,442,147,,707,,,,,,,,,143,144,140,122,123,124,131',
'128,130,,,125,126,,,,,145,146,132,133,,,,,,253,,,,,,137,136,,121,142',
'139,138,134,135,129,127,119,141,120,709,448,147,,710,,,,,,,,,143,144',
'140,122,123,124,131,128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,',
',137,136,,121,142,139,138,134,135,129,127,119,141,120,451,442,147,,452',
',,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126,,,,,145,146,132',
'133,,,,,,,,,,,,137,136,,121,142,139,138,134,135,129,127,119,141,120',
'666,442,147,,667,,,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126',
',,,,145,146,132,133,,,,,,253,,,,,,137,136,,121,142,139,138,134,135,129',
'127,119,141,120,668,448,147,,669,,,,,,,,,143,144,140,122,123,124,131',
'128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,,,137,136,,121,142,139',
'138,134,135,129,127,119,141,120,762,442,147,,763,,,,,,,,,143,144,140',
'122,123,124,131,128,130,,,125,126,,,,,145,146,132,133,,,,,,253,,,,,',
'137,136,,121,142,139,138,134,135,129,127,119,141,120,764,448,147,,765',
',,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126,,,,,145,146,132',
'133,,,,,,,,,,,,137,136,,121,142,139,138,134,135,129,127,119,141,120',
'770,448,147,,768,,,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126',
',,,,145,146,132,133,,,,,,,,,,,,137,136,,121,142,139,138,134,135,129',
'127,119,141,120,451,442,147,,452,,,,,,,,,143,144,140,122,123,124,131',
'128,130,,,125,126,,,,,145,146,132,133,,,,,,253,,,,,,137,136,,121,142',
'139,138,134,135,129,127,119,141,120,770,448,147,,857,,,,,,,,,143,144',
'140,122,123,124,131,128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,',
',137,136,,121,142,139,138,134,135,129,127,119,141,120,1020,442,147,',
'1021,,,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126,,,,,145,146',
'132,133,,,,,,253,,,,,,137,136,,121,142,139,138,134,135,129,127,119,141',
'120,1022,448,147,,1023,,,,,,,,,143,144,140,122,123,124,131,128,130,',
',125,126,,,,,145,146,132,133,,,,,,,,,,,,137,136,,121,142,139,138,134',
'135,129,127,119,141,120,,,147' ]
        racc_action_table = arr = ::Array.new(25645, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,0,0,0,359,24,325,0,0,56,294,360,0,1,0,0,0,0,0,0,0,366,210,369,6',
'404,0,0,0,0,0,0,0,317,212,0,317,499,503,610,287,0,0,0,0,0,0,0,0,0,0',
'0,762,0,0,0,871,0,0,9,0,0,290,763,701,511,627,627,378,24,499,503,210',
'872,294,318,3,11,318,471,471,3,0,922,212,0,404,934,0,24,0,966,0,56,294',
'969,0,72,511,1003,701,719,719,764,0,72,287,1020,325,0,0,0,0,0,0,359',
'12,359,0,0,359,1021,360,366,360,369,0,360,290,0,18,18,18,471,18,0,0',
'15,18,18,1033,610,287,18,765,18,18,18,18,18,18,18,287,627,762,719,21',
'18,18,18,18,18,18,18,290,763,18,871,764,871,871,378,871,18,290,872,18',
'18,18,18,18,18,18,467,18,18,18,1022,18,18,378,18,18,539,922,378,922',
'35,934,922,934,37,966,934,966,764,969,966,969,765,1003,969,1003,18,42',
'1003,18,18,1020,18,1020,18,1023,1020,382,522,78,18,600,601,706,382,1021',
'467,1021,18,321,1021,512,321,18,18,18,18,18,18,765,775,775,18,18,1033',
'707,1033,874,832,1033,18,79,539,18,19,19,19,1022,19,18,18,278,19,19',
'512,98,278,19,709,19,19,19,19,19,19,19,710,522,522,522,651,19,19,19',
'19,19,19,19,539,706,19,1022,1023,1022,522,638,1022,19,539,194,19,19',
'19,19,19,19,19,211,19,19,19,707,19,19,832,19,19,475,600,601,600,601',
'14,600,601,706,1023,775,1023,213,651,1023,775,709,709,706,395,19,16',
'16,19,710,710,19,874,19,874,707,475,874,832,19,475,475,638,638,364,707',
'364,19,832,666,14,638,19,19,19,19,19,19,709,214,14,19,19,667,383,816',
'710,36,709,19,220,383,19,27,27,27,710,27,19,19,384,27,27,395,395,395',
'27,384,27,27,27,27,27,27,27,725,373,252,725,666,27,27,27,27,27,27,27',
'36,266,27,23,23,267,667,459,816,27,36,23,27,27,27,27,27,27,27,27,27',
'27,27,397,27,27,270,27,27,459,459,459,459,459,459,459,459,459,459,459',
'373,373,459,459,817,363,459,459,373,27,363,399,27,373,399,27,476,27',
'280,27,459,27,459,27,459,459,459,459,459,459,459,27,459,373,38,38,27',
'27,27,27,27,27,397,397,397,27,27,476,459,303,459,476,476,27,817,373',
'27,373,27,575,385,282,27,27,28,28,28,385,28,575,399,399,28,28,982,959',
'982,28,959,28,28,28,28,28,28,28,84,84,283,303,284,28,28,28,28,28,28',
'28,111,303,28,575,575,111,111,672,289,28,299,299,28,28,28,28,28,28,28',
'28,28,28,28,401,28,28,292,28,28,672,672,672,672,672,672,672,672,672',
'672,672,575,293,672,672,386,298,672,672,884,28,406,386,28,313,313,28',
'300,28,884,28,672,28,672,28,672,672,672,672,672,672,672,28,672,358,358',
'304,28,28,28,28,28,28,401,401,401,28,28,387,672,438,884,884,388,28,387',
'305,28,308,28,388,389,314,28,28,29,29,29,389,29,406,406,406,29,29,578',
'578,316,29,319,29,29,29,29,29,29,29,320,884,322,438,330,29,29,29,29',
'29,29,29,391,438,29,13,13,620,439,391,331,29,620,13,29,29,29,29,29,29',
'29,29,29,29,29,332,29,29,333,29,29,773,335,494,650,592,773,592,592,592',
'860,592,860,860,860,779,860,336,439,340,779,29,749,749,29,1006,1006',
'29,439,29,13,29,13,29,494,29,354,357,494,494,494,494,365,29,650,368',
'370,374,29,29,29,29,29,29,650,400,403,29,29,43,43,422,428,430,433,29',
'436,43,29,437,29,445,456,477,29,29,31,31,31,31,31,592,478,479,31,31',
'860,480,505,31,508,31,31,31,31,31,31,31,5,5,5,5,5,31,31,31,31,31,31',
'31,509,513,31,527,43,528,43,531,31,31,533,31,31,31,31,31,31,31,31,540',
'31,31,31,544,31,31,553,31,31,554,350,555,350,350,350,581,350,581,581',
'581,581,581,793,793,556,569,793,793,793,31,581,585,31,495,587,31,591',
'31,910,31,910,910,910,31,910,596,209,209,350,602,603,31,642,581,209',
'350,31,31,31,31,31,31,581,581,495,31,31,648,495,495,495,495,654,31,659',
'662,31,32,32,32,670,32,31,31,671,32,32,687,693,695,32,703,32,32,32,32',
'32,32,32,581,705,209,708,209,32,32,32,32,32,32,32,711,712,32,288,288',
'713,714,717,718,32,720,288,32,32,32,32,32,32,32,723,32,32,32,727,32',
'32,728,57,732,57,57,57,57,57,733,306,306,279,279,279,279,279,57,306',
'589,735,589,589,589,32,589,738,32,739,741,32,745,32,288,32,288,747,751',
'757,759,57,57,700,700,700,700,700,57,57,57,57,32,32,32,32,32,32,589',
'761,766,32,32,770,771,589,306,782,306,32,783,785,32,33,33,33,786,33',
'32,32,787,33,33,789,792,798,33,57,33,33,33,33,33,33,33,819,820,821,822',
'823,33,33,33,33,33,33,33,825,826,33,367,367,827,831,836,839,33,840,367',
'33,33,33,33,33,33,33,857,33,33,33,862,33,33,863,326,866,326,326,326',
'326,326,876,879,880,376,376,881,901,902,326,912,746,376,746,746,746',
'33,746,925,33,926,927,33,928,33,367,929,367,931,936,937,945,326,947',
'326,949,950,951,952,326,326,326,326,33,33,33,33,33,33,746,954,968,33',
'33,977,984,746,33,999,376,33,376,1004,33,39,39,39,1005,39,33,33,1010',
'39,39,1012,1013,1014,39,326,39,39,39,39,39,39,39,1015,1016,1019,1034',
',39,39,39,39,39,39,39,,,39,584,584,,,,,39,,584,39,39,39,39,39,39,39',
',39,39,39,,39,39,,39,39,,748,,748,748,748,847,748,847,847,847,847,847',
'998,,998,998,998,,998,39,847,,39,,,39,,39,584,,584,,,39,,,612,612,748',
',,39,,847,612,,39,39,39,39,39,39,847,847,,39,39,,,,,,,39,,,39,40,40',
'40,,40,39,39,,40,40,,,,40,,40,40,40,40,40,40,40,847,,612,,612,40,40',
'40,40,40,40,40,,,40,734,734,,,,,40,,734,40,40,40,40,40,40,40,,40,40',
'40,,40,40,,40,40,,861,,861,861,861,849,861,849,849,849,849,849,,,,,',
',,40,849,,40,,,40,,40,734,,734,,,40,,,873,873,861,,,40,,849,873,,40',
'40,40,40,40,40,849,849,,40,40,,,,,,,40,,,40,41,41,41,,41,40,40,,41,41',
',,,41,,41,41,41,41,41,41,41,849,,873,,873,41,41,41,41,41,41,41,,,41',
'967,967,,,,,41,,967,41,41,41,41,41,41,41,,41,41,41,,41,41,,41,41,,483',
',,,,854,,854,854,854,854,854,,,,,,483,483,41,854,,41,,,41,,41,967,,967',
'483,,41,,483,483,483,483,,,41,,854,,,41,41,41,41,41,41,854,854,,41,41',
',,,,,,41,,,41,53,53,53,,53,41,41,,53,53,,,,53,,53,53,53,53,53,53,53',
'854,,,,,53,53,53,53,53,53,53,,,53,,930,,930,930,930,53,930,,53,53,53',
'53,53,53,53,,53,53,53,,53,53,,53,53,485,932,,932,932,932,891,932,891',
'891,891,891,891,930,,,,485,485,,53,891,,53,,,53,,53,,,485,,485,53,485',
'485,485,485,932,,485,53,485,891,,,53,53,53,53,53,53,891,891,,53,53,',
',,,,,53,,,53,54,54,54,,54,53,53,,54,54,,,,54,,54,54,54,54,54,54,54,891',
',,,,54,54,54,54,54,54,54,,,54,,,,,,,54,,,54,54,54,54,54,54,54,54,54',
'54,54,,54,54,,54,54,674,674,674,674,674,674,674,674,674,674,674,768',
'768,674,674,,,674,674,768,54,,,54,768,,54,,54,,54,674,,674,54,674,674',
'674,674,674,674,674,54,674,,,,54,54,54,54,54,54,,,,54,54,,674,674,,',
',54,,768,54,768,54,,,,54,54,55,55,55,,55,,,,55,55,,,,55,,55,55,55,55',
'55,55,55,,,,,,55,55,55,55,55,55,55,,,55,,,,,,,55,,,55,55,55,55,55,55',
'55,55,55,55,55,,55,55,,55,55,20,20,20,20,20,20,20,20,20,20,20,,,20,20',
',,20,20,,55,,,55,,,55,,55,,,20,,20,55,20,20,20,20,20,20,20,55,20,,,',
'55,55,55,55,55,55,,,,55,55,,20,,,,,55,,,55,,55,,,,55,55,58,58,58,,58',
',,,58,58,,,,58,,58,58,58,58,58,58,58,,,,,,58,58,58,58,58,58,58,,,58',
',976,,976,976,976,58,976,,58,58,58,58,58,58,58,,58,58,58,,58,58,,58',
'58,486,,,,,,972,,972,972,972,972,972,976,,,,486,486,,58,972,,58,,,58',
',58,,,486,,486,58,486,486,486,486,,,486,58,486,972,,,58,58,58,58,58',
'58,972,972,,58,58,,,,,,,58,,,58,59,59,59,,59,58,58,,59,59,,,,59,,59',
'59,59,59,59,59,59,972,,,,,59,59,59,59,59,59,59,,,59,,,,,,,59,,,59,59',
'59,59,59,59,59,,59,59,59,,59,59,,59,59,487,,,,,,989,,989,989,989,989',
'989,,,,,487,487,,59,989,,59,,,59,,59,,,487,,487,59,487,487,487,487,',
',487,59,487,989,,,59,59,59,59,59,59,989,989,,59,59,,,,,,,59,,,59,62',
'62,62,,62,59,59,,62,62,,,,62,,62,62,62,62,62,62,62,989,,,,,62,62,62',
'62,62,62,62,,,62,,,,,,,62,,,62,62,62,62,62,62,62,,62,62,62,,62,62,,62',
'62,488,,,,,,991,,991,991,991,991,991,,,,,488,488,,62,991,,62,,,62,,62',
',,488,,488,62,488,488,488,488,,,488,62,488,991,,,62,62,62,62,62,62,991',
'991,,62,62,62,,,,,62,62,,,62,63,63,63,,63,62,62,,63,63,,,,63,,63,63',
'63,63,63,63,63,991,,,,,63,63,63,63,63,63,63,,,63,,,,,,,63,,,63,63,63',
'63,63,63,63,,63,63,63,,63,63,,571,,571,571,571,571,571,,,,,,,,,571,',
',,,,,63,,,63,,,63,,63,,63,,,,,,571,,,,,,,571,571,571,571,63,63,63,63',
'63,63,,,,63,63,,,,,,,63,,,63,64,64,64,,64,63,63,,64,64,,,,64,571,64',
'64,64,64,64,64,64,,,,,,64,64,64,64,64,64,64,,,64,,,,,,,64,,,64,64,64',
'64,64,64,64,,64,64,64,481,64,64,,579,,579,579,579,579,579,,,,,,,481',
'481,579,,,,64,,,64,,,64,,481,64,481,64,481,481,481,481,,,,579,,,,,,',
'579,579,579,579,64,64,64,64,64,64,,,,64,64,,,,,,,64,,,64,85,85,85,,85',
'64,64,,85,85,,,,85,579,85,85,85,85,85,85,85,,85,,,,85,85,85,85,85,85',
'85,,,85,,,,,,,85,,,85,85,85,85,85,85,85,85,85,85,85,,85,85,,85,85,264',
'264,264,264,264,264,264,264,264,264,264,,,264,264,,,264,264,,85,,,85',
'85,,85,,85,,85,264,85,264,85,264,264,264,264,264,264,264,85,264,85,',
',85,85,85,85,85,85,,,,85,85,,264,,,,,85,,,85,,85,,,,85,85,88,88,88,',
'88,,,,88,88,,,,88,,88,88,88,88,88,88,88,,88,,,,88,88,88,88,88,88,88',
',,88,,,,,,,88,,,88,88,88,88,88,88,88,88,88,88,88,,88,88,,88,88,435,435',
'435,435,435,435,435,435,435,435,435,,,435,435,,,435,435,,88,,,88,88',
',88,,88,,88,435,88,435,88,435,435,435,435,435,435,435,88,435,88,,,88',
'88,88,88,88,88,,,,88,88,,435,,,,,88,,,88,,88,,,,88,88,100,100,100,100',
'100,,,,100,100,,,,100,,100,100,100,100,100,100,100,,,,,,100,100,100',
'100,100,100,100,,,100,,,,,,100,100,100,100,100,100,100,100,100,100,100',
',100,100,100,,100,100,,100,100,482,,,,,,993,,993,993,993,993,993,,,',
',482,482,,100,993,,100,,,100,,100,,100,482,,482,100,482,482,482,482',
',,,100,,993,,,100,100,100,100,100,100,993,993,,100,100,,,,,,100,100',
',,100,104,104,104,,104,100,100,,104,104,,,,104,,104,104,104,104,104',
'104,104,993,,,,,104,104,104,104,104,104,104,,,104,,,,,,,104,,,104,104',
'104,104,104,104,104,,104,104,104,,104,104,,104,104,,,,,,,1027,,1027',
'1027,1027,1027,1027,,,,,,,,104,1027,,104,,,104,,104,,,,,,104,,,,,,,',
'104,,1027,,,104,104,104,104,104,104,1027,1027,,104,104,,,,,,,104,,,104',
'105,105,105,,105,104,104,,105,105,,,,105,,105,105,105,105,105,105,105',
'1027,,,,,105,105,105,105,105,105,105,,,105,,,,,,,105,,,105,105,105,105',
'105,105,105,,105,105,105,,105,105,,105,105,454,454,454,454,454,454,454',
'454,454,454,454,,,454,454,,,454,454,,105,,,105,,,105,,105,,,454,,454',
'105,454,454,454,454,454,454,454,105,454,,,,105,105,105,105,105,105,',
',,105,105,,454,,,,,105,,,105,106,106,106,,106,105,105,,106,106,,,,106',
',106,106,106,106,106,106,106,,,,,,106,106,106,106,106,106,106,,,106',
',,,,,,106,,,106,106,106,106,106,106,106,,106,106,106,,106,106,,106,106',
'551,551,551,551,551,551,551,551,551,551,551,,,551,551,,,551,551,,106',
',,106,,,106,,106,,,551,,551,106,551,551,551,551,551,551,551,106,551',
',,,106,106,106,106,106,106,,,,106,106,,551,,,,,106,,,106,107,107,107',
',107,106,106,,107,107,,,,107,,107,107,107,107,107,107,107,,,,,,107,107',
'107,107,107,107,107,,,107,,,,,,,107,,,107,107,107,107,107,107,107,,107',
'107,107,,107,107,,107,107,716,716,716,716,716,716,716,716,716,716,716',
',,716,716,,,716,716,,107,,,107,,,107,,107,,,716,,716,107,716,716,716',
'716,716,716,716,107,716,,,,107,107,107,107,107,107,,,,107,107,,716,',
',,,107,,,107,108,108,108,108,108,107,107,,108,108,,,,108,,108,108,108',
'108,108,108,108,,,,,,108,108,108,108,108,108,108,,,108,,,,,,108,108',
',108,108,108,108,108,108,108,108,,108,108,108,,108,108,,108,108,803',
'803,803,803,803,803,803,803,803,803,803,,,803,803,,,803,803,,108,,,108',
',,108,,108,,108,803,,803,108,803,803,803,803,803,803,803,108,803,,,',
'108,108,108,108,108,108,,,,108,108,,803,,,,,108,,,108,109,109,109,109',
'109,108,108,,109,109,,,,109,,109,109,109,109,109,109,109,,,,,,109,109',
'109,109,109,109,109,,,109,,,,,,109,109,109,109,109,109,109,109,109,109',
'109,,109,109,109,,109,109,,109,109,805,805,805,805,805,805,805,805,805',
'805,805,,,805,805,,,805,805,,109,,,109,,,109,,109,,109,805,,805,109',
'805,805,805,805,805,805,805,109,805,,,,109,109,109,109,109,109,,,,109',
'109,,805,,,,,109,,,109,196,196,196,196,196,109,109,,196,196,,,,196,',
'196,196,196,196,196,196,196,,,,,,196,196,196,196,196,196,196,,,196,',
',,,,196,196,,196,196,196,196,196,196,196,196,,196,196,196,,196,196,',
'196,196,808,808,808,808,808,808,808,808,808,808,808,,,808,808,,,808',
'808,,196,,,196,,,196,,196,,196,808,,808,196,808,808,808,808,808,808',
'808,196,808,,,,196,196,196,196,196,196,,,,196,196,,808,,,,,196,,,196',
'197,197,197,,197,196,196,,197,197,,,,197,,197,197,197,197,197,197,197',
',,,,,197,197,197,197,197,197,197,,,197,,,,,,,197,,,197,197,197,197,197',
'197,197,,197,197,197,,197,197,,197,197,810,810,810,810,810,810,810,810',
'810,810,810,,,810,810,,,810,810,,197,,,197,,,197,,197,,197,810,,810',
'197,810,810,810,810,810,810,810,197,810,,,,197,197,197,197,197,197,',
',,197,197,,810,,,,,197,,,197,198,198,198,,198,197,197,,198,198,,,,198',
',198,198,198,198,198,198,198,,,,,,198,198,198,198,198,198,198,,,198',
',,,,,,198,,,198,198,198,198,198,198,198,,198,198,198,,198,198,,198,198',
'812,812,812,812,812,812,812,812,812,812,812,,,812,812,,,812,812,,198',
',,198,,,198,,198,,,812,,812,198,812,812,812,812,812,812,812,198,812',
',,,198,198,198,198,198,198,,,,198,198,,812,,,,,198,,,198,199,199,199',
',199,198,198,,199,199,,,,199,,199,199,199,199,199,199,199,,,,,,199,199',
'199,199,199,199,199,,,199,,,,,,,199,,,199,199,199,199,199,199,199,199',
'199,199,199,,199,199,,199,199,904,904,904,904,904,904,904,904,904,904',
'904,,,904,904,,,904,904,,199,,,199,,,199,,199,,199,904,,904,199,904',
'904,904,904,904,904,904,199,904,,,,199,199,199,199,199,199,,,,199,199',
',904,,,,,199,,,199,,199,,,,199,199,200,200,200,,200,,,,200,200,,,,200',
',200,200,200,200,200,200,200,,,,,,200,200,200,200,200,200,200,,,200',
',,,,,,200,,,200,200,200,200,200,200,200,200,200,200,200,,200,200,,200',
'200,906,906,906,906,906,906,906,906,906,906,906,,,906,906,,,906,906',
',200,,,200,,,200,,200,,200,906,,906,200,906,906,906,906,906,906,906',
'200,906,,,,200,200,200,200,200,200,,,,200,200,,906,,,,,200,,,200,,200',
',,,200,200,204,204,204,,204,,,,204,204,,,,204,,204,204,204,204,204,204',
'204,,,,,,204,204,204,204,204,204,204,,,204,,,,,,,204,,,204,204,204,204',
'204,204,204,,204,204,204,,204,204,,204,204,958,958,958,958,958,958,958',
'958,958,958,958,,,958,958,,,958,958,,204,,,204,,,204,,204,,,958,,958',
'204,958,958,958,958,958,958,958,204,958,,,,204,204,204,204,204,204,',
',,204,204,,958,,,,,204,,,204,205,205,205,,205,204,204,,205,205,,,,205',
',205,205,205,205,205,205,205,,,,,,205,205,205,205,205,205,205,,,205',
',,,,,,205,,,205,205,205,205,205,205,205,,205,205,205,,205,205,,205,205',
'473,473,473,473,473,473,473,473,473,473,473,,,473,473,,,473,473,,205',
',,205,,,205,,205,,205,473,,473,205,473,473,473,473,473,473,473,205,473',
',,,205,205,205,205,205,205,,,,205,205,,,,,,,205,,,205,206,206,206,,206',
'205,205,,206,206,,,,206,,206,206,206,206,206,206,206,,,,,,206,206,206',
'206,206,206,206,,,206,,,,,,,206,,,206,206,206,206,206,206,206,,206,206',
'206,,206,206,,206,206,474,474,474,474,474,474,474,474,474,474,474,,',
'474,474,,,474,474,,206,,,206,,,206,,206,,,474,,474,206,474,474,474,474',
'474,474,474,206,474,,,,206,206,206,206,206,206,,,,206,206,,,,,,,206',
',,206,207,207,207,,207,206,206,,207,207,,,,207,,207,207,207,207,207',
'207,207,,,,,,207,207,207,207,207,207,207,,,207,,,,,,,207,,,207,207,207',
'207,207,207,207,,207,207,207,,207,207,,207,207,484,484,484,484,484,484',
'484,,,484,484,,,,,,,484,484,,207,,,207,,,207,,207,,,484,,484,207,484',
'484,484,484,484,484,484,207,484,,,,207,207,207,207,207,207,,,,207,207',
',,,,,,207,,,207,215,215,215,215,215,207,207,,215,215,,,,215,,215,215',
'215,215,215,215,215,,,,,,215,215,215,215,215,215,215,,,215,,,,,,215',
'215,,215,215,215,215,215,215,215,215,,215,215,215,,215,215,,215,215',
'489,489,489,489,489,489,489,,,489,489,,,,,,,489,489,,215,,,215,,,215',
',215,,215,489,,489,215,489,489,489,489,489,489,489,215,489,,,,215,215',
'215,215,215,215,,,,215,215,,,,,,,215,,,215,216,216,216,,216,215,215',
',216,216,,,,216,,216,216,216,216,216,216,216,,,,,,216,216,216,216,216',
'216,216,,,216,,,,,,,216,,,216,216,216,216,216,216,216,,216,216,216,',
'216,216,,216,216,490,490,490,490,490,490,490,,,490,490,,,,,,,490,490',
',216,,,216,,216,216,,216,,,490,,490,216,490,490,490,490,490,490,490',
'216,490,,,,216,216,216,216,216,216,,,,216,216,,,,,,,216,,,216,219,219',
'219,,219,216,216,,219,219,,,,219,,219,219,219,219,219,219,219,,,,,,219',
'219,219,219,219,219,219,,,219,,,,,,,219,,,219,219,219,219,219,219,219',
',219,219,219,,219,219,,219,219,491,491,491,491,491,491,491,,,491,491',
',,,,,,491,491,,219,,,219,,,219,,219,,,491,,491,219,491,491,491,491,491',
'491,491,219,491,,,,219,219,219,219,219,219,,,,219,219,,,,,,,219,,,219',
'221,221,221,,221,219,219,,221,221,,,,221,,221,221,221,221,221,221,221',
',,,,,221,221,221,221,221,221,221,,,221,,,,,,,221,,,221,221,221,221,221',
'221,221,,221,221,221,,221,221,,221,221,492,492,492,492,492,492,492,',
',492,492,,,,,,,492,492,,221,,,221,,,221,,221,,,492,,492,221,492,492',
'492,492,492,492,492,221,492,,,,221,221,221,221,221,221,,,,221,221,,',
',,,,221,,,221,222,222,222,,222,221,221,,222,222,,,,222,,222,222,222',
'222,222,222,222,,,,,,222,222,222,222,222,222,222,,,222,,,,,,,222,,,222',
'222,222,222,222,222,222,,222,222,222,,222,222,,222,222,493,493,493,493',
'493,493,493,,,493,493,,,,,,,493,493,,222,,,222,,,222,,222,,,493,,493',
'222,493,493,493,493,493,493,493,222,493,,,,222,222,222,222,222,222,',
',,222,222,,,,,,,222,,,222,223,223,223,,223,222,222,,223,223,,,,223,',
'223,223,223,223,223,223,223,,,,,,223,223,223,223,223,223,223,,,223,',
',,,,,223,,,223,223,223,223,223,223,223,,223,223,223,,223,223,,223,223',
'496,496,496,496,496,496,496,,,496,496,,,,,,,496,496,,223,,,223,,,223',
',223,,,496,,496,223,496,496,496,496,496,496,496,223,496,,,,223,223,223',
'223,223,223,,,,223,223,,,,,,,223,,,223,224,224,224,,224,223,223,,224',
'224,,,,224,,224,224,224,224,224,224,224,,,,,,224,224,224,224,224,224',
'224,,,224,,,,,,,224,,,224,224,224,224,224,224,224,,224,224,224,,224',
'224,,224,224,497,497,497,497,497,497,497,497,,497,497,,,,,,,497,497',
',224,,,224,,,224,,224,,,497,,497,224,497,497,497,497,497,497,497,224',
'497,,,,224,224,224,224,224,224,,,,224,224,,,,,,,224,,,224,225,225,225',
',225,224,224,,225,225,,,,225,,225,225,225,225,225,225,225,,,,,,225,225',
'225,225,225,225,225,,,225,,,,,,,225,,,225,225,225,225,225,225,225,,225',
'225,225,,225,225,,225,225,,,,,,,,,,,,,,,,,,,,,225,,,225,,,225,,225,',
',,,,225,,,,,,,,225,,,,,225,225,225,225,225,225,,,,225,225,,,,,,,225',
',,225,226,226,226,,226,225,225,,226,226,,,,226,,226,226,226,226,226',
'226,226,,,,,,226,226,226,226,226,226,226,,,226,,,,,,,226,,,226,226,226',
'226,226,226,226,,226,226,226,,226,226,,226,226,,,,,,,,,,,,,,,,,,,,,226',
',,226,,,226,,226,,,,,,226,,,,,,,,226,,,,,226,226,226,226,226,226,,,',
'226,226,,,,,,,226,,,226,227,227,227,,227,226,226,,227,227,,,,227,,227',
'227,227,227,227,227,227,,,,,,227,227,227,227,227,227,227,,,227,,,,,',
',227,,,227,227,227,227,227,227,227,,227,227,227,,227,227,,227,227,,',
',,,,,,,,,,,,,,,,,,227,,,227,,,227,,227,,,,,,227,,,,,,,,227,,,,,227,227',
'227,227,227,227,,,,227,227,,,,,,,227,,,227,228,228,228,,228,227,227',
',228,228,,,,228,,228,228,228,228,228,228,228,,,,,,228,228,228,228,228',
'228,228,,,228,,,,,,,228,,,228,228,228,228,228,228,228,,228,228,228,',
'228,228,,228,228,,,,,,,,,,,,,,,,,,,,,228,,,228,,,228,,228,,,,,,228,',
',,,,,,228,,,,,228,228,228,228,228,228,,,,228,228,,,,,,,228,,,228,229',
'229,229,,229,228,228,,229,229,,,,229,,229,229,229,229,229,229,229,,',
',,,229,229,229,229,229,229,229,,,229,,,,,,,229,,,229,229,229,229,229',
'229,229,,229,229,229,,229,229,,229,229,,,,,,,,,,,,,,,,,,,,,229,,,229',
',,229,,229,,,,,,229,,,,,,,,229,,,,,229,229,229,229,229,229,,,,229,229',
',,,,,,229,,,229,230,230,230,,230,229,229,,230,230,,,,230,,230,230,230',
'230,230,230,230,,,,,,230,230,230,230,230,230,230,,,230,,,,,,,230,,,230',
'230,230,230,230,230,230,,230,230,230,,230,230,,230,230,,,,,,,,,,,,,',
',,,,,,,230,,,230,,,230,,230,,,,,,230,,,,,,,,230,,,,,230,230,230,230',
'230,230,,,,230,230,,,,,,,230,,,230,231,231,231,,231,230,230,,231,231',
',,,231,,231,231,231,231,231,231,231,,,,,,231,231,231,231,231,231,231',
',,231,,,,,,,231,,,231,231,231,231,231,231,231,,231,231,231,,231,231',
',231,231,,,,,,,,,,,,,,,,,,,,,231,,,231,,,231,,231,,,,,,231,,,,,,,,231',
',,,,231,231,231,231,231,231,,,,231,231,,,,,,,231,,,231,232,232,232,',
'232,231,231,,232,232,,,,232,,232,232,232,232,232,232,232,,,,,,232,232',
'232,232,232,232,232,,,232,,,,,,,232,,,232,232,232,232,232,232,232,,232',
'232,232,,232,232,,232,232,,,,,,,,,,,,,,,,,,,,,232,,,232,,,232,,232,',
',,,,232,,,,,,,,232,,,,,232,232,232,232,232,232,,,,232,232,,,,,,,232',
',,232,233,233,233,,233,232,232,,233,233,,,,233,,233,233,233,233,233',
'233,233,,,,,,233,233,233,233,233,233,233,,,233,,,,,,,233,,,233,233,233',
'233,233,233,233,,233,233,233,,233,233,,233,233,,,,,,,,,,,,,,,,,,,,,233',
',,233,,,233,,233,,,,,,233,,,,,,,,233,,,,,233,233,233,233,233,233,,,',
'233,233,,,,,,,233,,,233,234,234,234,,234,233,233,,234,234,,,,234,,234',
'234,234,234,234,234,234,,,,,,234,234,234,234,234,234,234,,,234,,,,,',
',234,,,234,234,234,234,234,234,234,,234,234,234,,234,234,,234,234,,',
',,,,,,,,,,,,,,,,,,234,,,234,,,234,,234,,,,,,234,,,,,,,,234,,,,,234,234',
'234,234,234,234,,,,234,234,,,,,,,234,,,234,235,235,235,,235,234,234',
',235,235,,,,235,,235,235,235,235,235,235,235,,,,,,235,235,235,235,235',
'235,235,,,235,,,,,,,235,,,235,235,235,235,235,235,235,,235,235,235,',
'235,235,,235,235,,,,,,,,,,,,,,,,,,,,,235,,,235,,,235,,235,,,,,,235,',
',,,,,,235,,,,,235,235,235,235,235,235,,,,235,235,,,,,,,235,,,235,236',
'236,236,,236,235,235,,236,236,,,,236,,236,236,236,236,236,236,236,,',
',,,236,236,236,236,236,236,236,,,236,,,,,,,236,,,236,236,236,236,236',
'236,236,,236,236,236,,236,236,,236,236,,,,,,,,,,,,,,,,,,,,,236,,,236',
',,236,,236,,,,,,236,,,,,,,,236,,,,,236,236,236,236,236,236,,,,236,236',
',,,,,,236,,,236,237,237,237,,237,236,236,,237,237,,,,237,,237,237,237',
'237,237,237,237,,,,,,237,237,237,237,237,237,237,,,237,,,,,,,237,,,237',
'237,237,237,237,237,237,,237,237,237,,237,237,,237,237,,,,,,,,,,,,,',
',,,,,,,237,,,237,,,237,,237,,,,,,237,,,,,,,,237,,,,,237,237,237,237',
'237,237,,,,237,237,,,,,,,237,,,237,238,238,238,,238,237,237,,238,238',
',,,238,,238,238,238,238,238,238,238,,,,,,238,238,238,238,238,238,238',
',,238,,,,,,,238,,,238,238,238,238,238,238,238,,238,238,238,,238,238',
',238,238,,,,,,,,,,,,,,,,,,,,,238,,,238,,,238,,238,,,,,,238,,,,,,,,238',
',,,,238,238,238,238,238,238,,,,238,238,,,,,,,238,,,238,239,239,239,',
'239,238,238,,239,239,,,,239,,239,239,239,239,239,239,239,,,,,,239,239',
'239,239,239,239,239,,,239,,,,,,,239,,,239,239,239,239,239,239,239,,239',
'239,239,,239,239,,239,239,,,,,,,,,,,,,,,,,,,,,239,,,239,,,239,,239,',
',,,,239,,,,,,,,239,,,,,239,239,239,239,239,239,,,,239,239,,,,,,,239',
',,239,240,240,240,,240,239,239,,240,240,,,,240,,240,240,240,240,240',
'240,240,,,,,,240,240,240,240,240,240,240,,,240,,,,,,,240,,,240,240,240',
'240,240,240,240,,240,240,240,,240,240,,240,240,,,,,,,,,,,,,,,,,,,,,240',
',,240,,,240,,240,,,,,,240,,,,,,,,240,,,,,240,240,240,240,240,240,,,',
'240,240,,,,,,,240,,,240,241,241,241,,241,240,240,,241,241,,,,241,,241',
'241,241,241,241,241,241,,,,,,241,241,241,241,241,241,241,,,241,,,,,',
',241,,,241,241,241,241,241,241,241,,241,241,241,,241,241,,241,241,,',
',,,,,,,,,,,,,,,,,,241,,,241,,,241,,241,,,,,,241,,,,,,,,241,,,,,241,241',
'241,241,241,241,,,,241,241,,,,,,,241,,,241,242,242,242,,242,241,241',
',242,242,,,,242,,242,242,242,242,242,242,242,,,,,,242,242,242,242,242',
'242,242,,,242,,,,,,,242,,,242,242,242,242,242,242,242,,242,242,242,',
'242,242,,242,242,,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,,242,,,,,,242,',
',,,,,,242,,,,,242,242,242,242,242,242,,,,242,242,,,,,,,242,,,242,243',
'243,243,,243,242,242,,243,243,,,,243,,243,243,243,243,243,243,243,,',
',,,243,243,243,243,243,243,243,,,243,,,,,,,243,,,243,243,243,243,243',
'243,243,,243,243,243,,243,243,,243,243,,,,,,,,,,,,,,,,,,,,,243,,,243',
',,243,,243,,,,,,243,,,,,,,,243,,,,,243,243,243,243,243,243,,,,243,243',
',,,,,,243,,,243,244,244,244,,244,243,243,,244,244,,,,244,,244,244,244',
'244,244,244,244,,,,,,244,244,244,244,244,244,244,,,244,,,,,,,244,,,244',
'244,244,244,244,244,244,,244,244,244,,244,244,,244,244,,,,,,,,,,,,,',
',,,,,,,244,,,244,,,244,,244,,,,,,244,,,,,,,,244,,,,,244,244,244,244',
'244,244,,,,244,244,,,,,,,244,,,244,245,245,245,,245,244,244,,245,245',
',,,245,,245,245,245,245,245,245,245,,,,,,245,245,245,245,245,245,245',
',,245,,,,,,,245,,,245,245,245,245,245,245,245,,245,245,245,,245,245',
',245,245,,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,,245,,,,,,245,,,,,,,,245',
',,,,245,245,245,245,245,245,,,,245,245,,,,,,,245,,,245,253,253,253,',
'253,245,245,,253,253,,,,253,,253,253,253,253,253,253,253,,,,,,253,253',
'253,253,253,253,253,,,253,,,,,,,253,,,253,253,253,253,253,253,253,253',
'253,253,253,,253,253,,253,253,,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,,253',
',253,,253,,253,,,,,,,,253,,,,,253,253,253,253,253,253,,,,253,253,,,',
',,,253,,,253,,253,,,,253,253,254,254,254,,254,,,,254,254,,,,254,,254',
'254,254,254,254,254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,',
',254,,,254,254,254,254,254,254,254,254,254,254,254,,254,254,,254,254',
',,,,,,,,,,,,,,,,,,,,254,,,254,,,254,,254,,254,,254,,254,,,,,,,,254,',
',,,254,254,254,254,254,254,,,,254,254,,,,,,,254,,,254,,254,,,,254,254',
'262,262,262,,262,,,,262,262,,,,262,,262,262,262,262,262,262,262,,,,',
',262,262,262,262,262,262,262,,,262,,,,,,,262,,,262,262,262,262,262,262',
'262,262,262,262,262,,262,262,,262,262,,,,,,,,,,,,,,,,,,,,,262,,,262',
',262,262,,262,,262,,262,,262,,,,,,,,262,,,,,262,262,262,262,262,262',
',,,262,262,,,,,,,262,,,262,,262,,,,262,262,269,269,269,,269,,,,269,269',
',,,269,,269,269,269,269,269,269,269,,,,,,269,269,269,269,269,269,269',
',,269,,,,,,,269,,,269,269,269,269,269,269,269,,269,269,269,,269,269',
',269,269,,,,,,,,,,,,,,,,,,,,,269,,,269,,,269,,269,,,,,,269,,,,,,,,269',
',,,,269,269,269,269,269,269,,,,269,269,,,,,,,269,,,269,271,271,271,',
'271,269,269,,271,271,,,,271,,271,271,271,271,271,271,271,,,,,,271,271',
'271,271,271,271,271,,,271,,,,,,,271,,,271,271,271,271,271,271,271,,271',
'271,271,,271,271,,271,271,,,,,,,,,,,,,,,,,,,,,271,,,271,,,271,,271,',
',,,,271,,,,,,,,271,,,,,271,271,271,271,271,271,,,,271,271,,,,,,,271',
',,271,274,274,274,,274,271,271,,274,274,,,,274,,274,274,274,274,274',
'274,274,,,,,,274,274,274,274,274,274,274,,,274,,,,,,,274,,,274,274,274',
'274,274,274,274,,274,274,274,,274,274,,274,274,,,,,,,,,,,,,,,,,,,,,274',
',,274,,,274,,274,,,,,,274,,,,,,,,274,,,,,274,274,274,274,274,274,,,',
'274,274,,,,,,,274,,,274,275,275,275,,275,274,274,,275,275,,,,275,,275',
'275,275,275,275,275,275,,,,,,275,275,275,275,275,275,275,,,275,,,,,',
',275,,,275,275,275,275,275,275,275,,275,275,275,,275,275,,275,275,,',
',,,,,,,,,,,,,,,,,,275,,,275,,,275,,275,,,,,,275,,,,,,,,275,,,,,275,275',
'275,275,275,275,,,,275,275,,,,,,,275,,,275,281,281,281,281,281,275,275',
',281,281,,,,281,,281,281,281,281,281,281,281,,,,,,281,281,281,281,281',
'281,281,,,281,,,,,,281,281,,281,281,281,281,281,281,281,281,,281,281',
'281,,281,281,,281,281,,,,,,,,,,,,,,,,,,,,,281,,,281,,,281,,281,,281',
',,,281,,,,,,,,281,,,,,281,281,281,281,281,281,,,,281,281,,,,,,,281,',
',281,285,285,285,,285,281,281,,285,285,,,,285,,285,285,285,285,285,285',
'285,,,,,,285,285,285,285,285,285,285,,,285,,,,,,,285,,,285,285,285,285',
'285,285,285,,285,285,285,,285,285,,623,,623,623,623,623,623,,,,,,,,',
'623,,,,,,,285,,,285,,,285,,285,,,,,,,,623,623,,,,,,623,623,623,623,285',
'285,285,285,285,285,,,,285,285,,,,285,,,285,,,285,286,286,286,286,286',
'285,285,,286,286,,,,286,623,286,286,286,286,286,286,286,,,,,,286,286',
'286,286,286,286,286,,,286,,,,,,286,286,,286,286,286,286,286,286,286',
'286,,286,286,286,,286,286,,286,286,,,,,,,,,,,,,,,,,,,,,286,,,286,,,286',
',286,,286,,,,286,,,,,,,,286,,,,,286,286,286,286,286,286,,,,286,286,',
',,,,,286,,,286,301,301,301,,301,286,286,,301,301,,,,301,,301,301,301',
'301,301,301,301,,,,,,301,301,301,301,301,301,301,,,301,,,,,,,301,,,301',
'301,301,301,301,301,301,,301,301,301,,301,301,,676,,676,676,676,676',
'676,,,,,,,,,676,,,,,,,301,,,301,,,301,,301,,,,,,,,676,,,,,,,676,676',
'676,676,301,301,301,301,301,301,,,,301,301,,,,,,,301,,,301,310,310,310',
'676,310,301,301,,310,310,,,,310,676,310,310,310,310,310,310,310,,,,',
',310,310,310,310,310,310,310,,,310,,,,,,,310,,,310,310,310,310,310,310',
'310,,310,310,310,,310,310,,310,310,,,,,,,,,,,,,,,,,,,,,310,,,310,310',
',310,,310,,,,,,310,,,,,,,,310,,,,,310,310,310,310,310,310,,,,310,310',
',,,,,,310,,,310,312,312,312,312,312,310,310,,312,312,,,,312,,312,312',
'312,312,312,312,312,,,,,,312,312,312,312,312,312,312,,,312,,,,,,312',
'312,,312,312,312,312,312,312,312,312,,312,312,312,,312,312,,312,312',
',,,,,,,,,,,,,,,,,,,,312,,,312,,,312,,312,,312,,,,312,,,,,,,,312,,,,',
'312,312,312,312,312,312,,,,312,312,,,,,,,312,,,312,342,342,342,,342',
'312,312,,342,342,,,,342,,342,342,342,342,342,342,342,,,,,,342,342,342',
'342,342,342,342,,,342,,,,,,,342,,,342,342,342,342,342,342,342,,342,342',
'342,,342,342,,778,,778,778,778,778,778,,,,,,,,,778,,,,,,,342,,,342,',
',342,,342,,,,,,,,778,,,,,,,778,778,778,778,342,342,342,342,342,342,',
',,342,342,,,,,,,342,,,342,361,361,361,,361,342,342,,361,361,,,,361,778',
'361,361,361,361,361,361,361,,,,,,361,361,361,361,361,361,361,,,361,',
',,,,,361,,,361,361,361,361,361,361,361,,361,361,361,,361,361,,361,361',
',,,,,,,,,,,,,,,,,,,,361,,,361,,,361,,361,,,,,,361,,,,,,,,361,,,,,361',
'361,361,361,361,361,,,,361,361,,,,,,,361,,,361,362,362,362,,362,361',
'361,,362,362,,,,362,,362,362,362,362,362,362,362,,,,,,362,362,362,362',
'362,362,362,,,362,,,,,,,362,,,362,362,362,362,362,362,362,,362,362,362',
',362,362,,362,362,,,,,,,,,,,,,,,,,,,,,362,,,362,,,362,,362,,,,,,362',
',,,,,,,362,,,,,362,362,362,362,362,362,,,,362,362,,,,,,,362,,,362,381',
'381,381,,381,362,362,,381,381,,,,381,,381,381,381,381,381,381,381,,',
',,,381,381,381,381,381,381,381,,,381,,,,,,,381,,,381,381,381,381,381',
'381,381,,381,381,381,,381,381,,852,,852,852,852,852,852,,,,,,,,,852',
',,,,,,381,,,381,,,381,,381,,,,,,,,852,,,,,,,852,852,852,852,381,381',
'381,381,381,381,,,,381,381,,,,,,,381,,,381,393,393,393,,393,381,381',
',393,393,,,,393,852,393,393,393,393,393,393,393,,,,,,393,393,393,393',
'393,393,393,,,393,,,,,,,393,,,393,393,393,393,393,393,393,,393,393,393',
',393,393,,393,393,,,,,,,,,,,,,,,,,,,,,393,,,393,,,393,,393,,,,,,393',
',,,,,,,393,,,,,393,393,393,393,393,393,,,,393,393,,,,,,,393,,,393,432',
'432,432,,432,393,393,,432,432,,,,432,,432,432,432,432,432,432,432,,',
',,,432,432,432,432,432,432,432,,,432,,,,,,,432,,,432,432,432,432,432',
'432,432,,432,432,432,,432,432,,432,432,,,,,,,,,,,,,,,,,,,,,432,,,432',
',,432,,432,,,,,,432,,,,,,,,432,,,,,432,432,432,432,432,432,,,,432,432',
',,,,,,432,,,432,448,448,448,,448,432,432,,448,448,,,,448,,448,448,448',
'448,448,448,448,,,,,,448,448,448,448,448,448,448,,,448,,,,,,,448,,,448',
'448,448,448,448,448,448,448,448,448,448,,448,448,,448,448,,,,,,,,,,',
',,,,,,,,,,448,,,448,448,,448,,448,,448,,448,,448,,,,,,,,448,,,,,448',
'448,448,448,448,448,,,,448,448,,,,,,,448,,,448,,448,,,,448,448,449,449',
'449,,449,,,,449,449,,,,449,,449,449,449,449,449,449,449,,,,,,449,449',
'449,449,449,449,449,,,449,,,,,,,449,,,449,449,449,449,449,449,449,449',
'449,449,449,,449,449,,449,449,,,,,,,,,,,,,,,,,,,,,449,,,449,449,,449',
',449,,449,,449,,449,,,,,,,,449,,,,,449,449,449,449,449,449,,,,449,449',
',,,,,,449,,,449,,449,,,,449,449,465,465,465,,465,,,,465,465,,,,465,',
'465,465,465,465,465,465,465,,,,,,465,465,465,465,465,465,465,,,465,',
',,,,,465,,,465,465,465,465,465,465,465,465,465,465,465,,465,465,,465',
'465,,,,,,,,,,,,,,,,,,,,,465,,,465,,,465,,465,,465,,,,465,,,,,,,,465',
',,,,465,465,465,465,465,465,,,,465,465,,,,,,,465,,,465,,465,,,,465,465',
'466,466,466,,466,,,,466,466,,,,466,,466,466,466,466,466,466,466,,,,',
',466,466,466,466,466,466,466,,,466,,,,,,,466,,,466,466,466,466,466,466',
'466,466,466,466,466,,466,466,,466,466,,,,,,,,,,,,,,,,,,,,,466,,,466',
',,466,,466,,466,,,,466,,,,,,,,466,,,,,466,466,466,466,466,466,,,,466',
'466,,,,,,,466,,,466,,466,,,,466,466,468,468,468,,468,,,,468,468,,,,468',
',468,468,468,468,468,468,468,,,,,,468,468,468,468,468,468,468,,,468',
',,,,,,468,,,468,468,468,468,468,468,468,,468,468,468,,468,468,,468,468',
',,,,,,,,,,,,,,,,,,,,468,,,468,,,468,,468,,,,,,468,,,,,,,,468,,,,,468',
'468,468,468,468,468,,,,468,468,,,,,,,468,,,468,469,469,469,,469,468',
'468,,469,469,,,,469,,469,469,469,469,469,469,469,,,,,,469,469,469,469',
'469,469,469,,,469,,,,,,,469,,,469,469,469,469,469,469,469,,469,469,469',
',469,469,,469,469,,,,,,,,,,,,,,,,,,,,,469,,,469,,,469,,469,,,,,,469',
',,,,,,,469,,,,,469,469,469,469,469,469,,,,469,469,,,,,,,469,,,469,470',
'470,470,,470,469,469,,470,470,,,,470,,470,470,470,470,470,470,470,,',
',,,470,470,470,470,470,470,470,,,470,,,,,,,470,,,470,470,470,470,470',
'470,470,,470,470,470,,470,470,,470,470,,,,,,,,,,,,,,,,,,,,,470,,,470',
',,470,,470,,,,,,470,,,,,,,,470,,,,,470,470,470,470,470,470,,,,470,470',
',,,,,,470,,,470,498,498,498,,498,470,470,,498,498,,,,498,,498,498,498',
'498,498,498,498,,,,,,498,498,498,498,498,498,498,,,498,,,,,,,498,,,498',
'498,498,498,498,498,498,,498,498,498,,498,498,,498,498,,,,,,,,,,,,,',
',,,,,,,498,,,498,,,498,,498,,,,,,498,,,,,,,,498,,,,,498,498,498,498',
'498,498,,,,498,498,,,,,,,498,,,498,516,516,516,,516,498,498,,516,516',
',,,516,,516,516,516,516,516,516,516,,,,,,516,516,516,516,516,516,516',
',,516,,,,,,,516,,,516,516,516,516,516,516,516,516,516,516,516,,516,516',
',516,516,,,,,,,,,,,,,,,,,,,,,516,,,516,,,516,,516,,516,,516,,516,,,',
',,,,516,,,,,516,516,516,516,516,516,,,,516,516,,,,,,,516,,,516,,516',
',,,516,516,518,518,518,,518,,,,518,518,,,,518,,518,518,518,518,518,518',
'518,,,,,,518,518,518,518,518,518,518,,,518,,,,,,,518,,,518,518,518,518',
'518,518,518,518,518,518,518,,518,518,,518,518,,,,,,,,,,,,,,,,,,,,,518',
',,518,,,518,,518,,,,518,,518,,,,,,,,518,,,,,518,518,518,518,518,518',
',,,518,518,,,,,,,518,,,518,,518,,,,518,518,520,520,520,,520,,,,520,520',
',,,520,,520,520,520,520,520,520,520,,,,,,520,520,520,520,520,520,520',
',,520,,,,,,,520,,,520,520,520,520,520,520,520,,520,520,520,,520,520',
',520,520,,,,,,,,,,,,,,,,,,,,,520,,,520,,,520,,520,,,,,,520,,,,,,,,520',
',,,,520,520,520,520,520,520,,,,520,520,,,,,,,520,,,520,526,526,526,526',
'526,520,520,,526,526,,,,526,,526,526,526,526,526,526,526,,,,,,526,526',
'526,526,526,526,526,,,526,,,,,,526,526,,526,526,526,526,526,526,526',
'526,,526,526,526,,526,526,,526,526,,,,,,,,,,,,,,,,,,,,,526,,,526,,,526',
',526,,526,,,,526,,,,,,,,526,,,,,526,526,526,526,526,526,,,,526,526,',
',,,,526,526,,,526,532,532,532,,532,526,526,,532,532,,,,532,,532,532',
'532,532,532,532,532,,,,,,532,532,532,532,532,532,532,,,532,,,,,,,532',
',,532,532,532,532,532,532,532,,532,532,532,,532,532,,887,,887,887,887',
'887,887,,,,,,,,,887,,,,,,,532,,,532,,,532,,532,,,,,,,,887,,,,,,,887',
'887,887,887,532,532,532,532,532,532,,,,532,532,,,,,,,532,,,532,534,534',
'534,,534,532,532,,534,534,,,,534,887,534,534,534,534,534,534,534,,,',
',,534,534,534,534,534,534,534,,,534,,,,,,,534,,,534,534,534,534,534',
'534,534,534,534,534,534,,534,534,,534,534,,,,,,,,,,,,,,,,,,,,,534,,',
'534,,,534,,534,,534,,,,534,,,,,,,,534,,,,,534,534,534,534,534,534,,',
',534,534,,,,,,,534,,,534,,534,,,,534,534,537,537,537,,537,,,,537,537',
',,,537,,537,537,537,537,537,537,537,,,,,,537,537,537,537,537,537,537',
',,537,,,,,,,537,,,537,537,537,537,537,537,537,537,537,537,537,,537,537',
',537,537,,,,,,,,,,,,,,,,,,,,,537,,,537,,,537,,537,,537,,,,537,,,,,,',
',537,,,,,537,537,537,537,537,537,,,,537,537,,,,,,,537,,,537,,537,,,',
'537,537,543,543,543,,543,,,,543,543,,,,543,,543,543,543,543,543,543',
'543,,,,,,543,543,543,543,543,543,543,,,543,,,,,,,543,,,543,543,543,543',
'543,543,543,,543,543,543,,543,543,,889,,889,889,889,889,889,,,,,,,,',
'889,,,,,,,543,,,543,,,543,,543,,,,,,,,889,,,,,,,889,889,889,889,543',
'543,543,543,543,543,,,,543,543,,,,,,,543,,,543,546,546,546,,546,543',
'543,,546,546,,,,546,889,546,546,546,546,546,546,546,,,,,,546,546,546',
'546,546,546,546,,,546,,,,,,,546,,,546,546,546,546,546,546,546,,546,546',
'546,,546,546,,546,546,,,,,,,,,,,,,,,,,,,,,546,,,546,,,546,,546,,,,,',
'546,,,,,,,,546,,,,,546,546,546,546,546,546,,,,546,546,,,,,,,546,,,546',
'547,547,547,,547,546,546,,547,547,,,,547,,547,547,547,547,547,547,547',
',,,,,547,547,547,547,547,547,547,,,547,,,,,,,547,,,547,547,547,547,547',
'547,547,,547,547,547,,547,547,,547,547,,,,,,,,,,,,,,,,,,,,,547,,,547',
',,547,,547,,,,,,547,,,,,,,,547,,,,,547,547,547,547,547,547,,,,547,547',
',,,,,,547,,,547,548,548,548,,548,547,547,,548,548,,,,548,,548,548,548',
'548,548,548,548,,,,,,548,548,548,548,548,548,548,,,548,,,,,,,548,,,548',
'548,548,548,548,548,548,,548,548,548,,548,548,,548,548,,,,,,,,,,,,,',
',,,,,,,548,,,548,,,548,,548,,,,,,548,,,,,,,,548,,,,,548,548,548,548',
'548,548,,,,548,548,,,,,,,548,,,548,552,552,552,,552,548,548,,552,552',
',,,552,,552,552,552,552,552,552,552,,,,,,552,552,552,552,552,552,552',
',,552,,,,,,,552,,,552,552,552,552,552,552,552,,552,552,552,,552,552',
',552,552,,,,,,,,,,,,,,,,,,,,,552,,,552,,,552,,552,,,,,,552,,,,,,,,552',
',,,,552,552,552,552,552,552,,,,552,552,,,,,,,552,,,552,559,559,559,',
'559,552,552,,559,559,,,,559,,559,559,559,559,559,559,559,,,,,,559,559',
'559,559,559,559,559,,,559,,,,,,,559,,,559,559,559,559,559,559,559,559',
'559,559,559,,559,559,,559,559,,,,,,,,,,,,,,,,,,,,,559,,,559,,,559,,559',
',559,,559,,559,,,,,,,,559,,,,,559,559,559,559,559,559,,,,559,559,,,',
',,,559,,,559,,559,,,,559,559,562,562,562,,562,,,,562,562,,,,562,,562',
'562,562,562,562,562,562,,,,,,562,562,562,562,562,562,562,,,562,,,,,',
',562,,,562,562,562,562,562,562,562,562,562,562,562,,562,562,,562,562',
',,,,,,,,,,,,,,,,,,,,562,,,562,,,562,,562,,,,,,562,,,,,,,,562,,,,,562',
'562,562,562,562,562,,,,562,562,,,,,,,562,,,562,,562,,,,562,562,567,567',
'567,567,567,,,,567,567,,,,567,,567,567,567,567,567,567,567,,,,,,567',
'567,567,567,567,567,567,,,567,,,,,,567,567,,567,567,567,567,567,567',
'567,567,,567,567,567,,567,567,,567,567,,,,,,,,,,,,,,,,,,,,,567,,,567',
',,567,,567,,567,,,,567,,,,,,,,567,,,,,567,567,567,567,567,567,,,,567',
'567,,,,,,,567,,,567,568,568,568,568,568,567,567,,568,568,,,,568,,568',
'568,568,568,568,568,568,,,,,,568,568,568,568,568,568,568,,,568,,,,,',
'568,568,,568,568,568,568,568,568,568,568,,568,568,568,,568,568,,568',
'568,,,,,,,,,,,,,,,,,,,,,568,,,568,,,568,,568,,568,,,,568,,,,,,,,568',
',,,,568,568,568,568,568,568,,,,568,568,,,,,,,568,,,568,574,574,574,',
'574,568,568,,574,574,,,,574,,574,574,574,574,574,574,574,,,,,,574,574',
'574,574,574,574,574,,,574,,,,,,,574,,,574,574,574,574,574,574,574,,574',
'574,574,,574,574,,956,,956,956,956,956,956,,,,,,,,,956,,,,,,,574,,,574',
',,574,,574,,,,,,,,956,956,,,,,,956,956,956,956,574,574,574,574,574,574',
',,,574,574,,,,,,,574,,,574,595,595,595,595,595,574,574,,595,595,,,,595',
'956,595,595,595,595,595,595,595,,,,,,595,595,595,595,595,595,595,,,595',
',,,,,595,595,,595,595,595,595,595,595,595,595,,595,595,595,,595,595',
',595,595,,,,,,,,,,,,,,,,,,,,,595,,,595,,,595,,595,,595,,,,595,,,,,,',
',595,,,,,595,595,595,595,595,595,,,,595,595,,,,,,,595,,,595,599,599',
'599,599,599,595,595,,599,599,,,,599,,599,599,599,599,599,599,599,,,',
',,599,599,599,599,599,599,599,,,599,,,,,,599,599,,599,599,599,599,599',
'599,599,599,,599,599,599,,599,599,,599,599,,,,,,,,,,,,,,,,,,,,,599,',
',599,,,599,,599,,599,,,,599,,,,,,,,599,,,,,599,599,599,599,599,599,',
',,599,599,,,,,,,599,,,599,604,604,604,604,604,599,599,,604,604,,,,604',
',604,604,604,604,604,604,604,,,,,,604,604,604,604,604,604,604,,,604',
',,,,,604,604,,604,604,604,604,604,604,604,604,,604,604,604,,604,604',
',604,604,,,,,,,,,,,,,,,,,,,,,604,,,604,,,604,,604,,604,,,,604,,,,,,',
',604,,,,,604,604,604,604,604,604,,,,604,604,,,,,,,604,,,604,606,606',
'606,,606,604,604,,606,606,,,,606,,606,606,606,606,606,606,606,,,,,,606',
'606,606,606,606,606,606,,,606,,,,,,,606,,,606,606,606,606,606,606,606',
'606,606,606,606,,606,606,,606,606,,,,,,,,,,,,,,,,,,,,,606,,,606,,,606',
',606,,606,,,,606,,,,,,,,606,,,,,606,606,606,606,606,606,,,,606,606,',
',,,,,606,,,606,,606,,,,606,606,609,609,609,,609,,,,609,609,,,,609,,609',
'609,609,609,609,609,609,,,,,,609,609,609,609,609,609,609,,,609,,,,,',
',609,,,609,609,609,609,609,609,609,609,609,609,609,,609,609,,609,609',
',,,,,,,,,,,,,,,,,,,,609,,,609,,,609,,609,,609,,,,609,,,,,,,,609,,,,',
'609,609,609,609,609,609,,,,609,609,,,,,,,609,,,609,,609,,,,609,609,615',
'615,615,,615,,,,615,615,,,,615,,615,615,615,615,615,615,615,,,,,,615',
'615,615,615,615,615,615,,,615,,,,,,,615,,,615,615,615,615,615,615,615',
'615,615,615,615,,615,615,,615,615,,,,,,,,,,,,,,,,,,,,,615,,,615,,,615',
',615,,615,,,,615,,,,,,,,615,,,,,615,615,615,615,615,615,,,,615,615,',
',,,,,615,,,615,,615,,,,615,615,619,619,619,,619,,,,619,619,,,,619,,619',
'619,619,619,619,619,619,,,,,,619,619,619,619,619,619,619,,,619,,,,,',
',619,,,619,619,619,619,619,619,619,,619,619,619,,619,619,,619,619,,',
',,,,,,,,,,,,,,,,,,619,,,619,,,619,,619,,,,,,619,,,,,,,,619,,,,,619,619',
'619,619,619,619,,,,619,619,,,,,,,619,,,619,621,621,621,,621,619,619',
',621,621,,,,621,,621,621,621,621,621,621,621,,,,,,621,621,621,621,621',
'621,621,,,621,,,,,,,621,,,621,621,621,621,621,621,621,,621,621,621,',
'621,621,,621,621,,,,,,,,,,,,,,,,,,,,,621,,,621,,,621,,621,,,,,,621,',
',,,,,,621,,,,,621,621,621,621,621,621,,,,621,621,,,,,,,621,,,621,649',
'649,649,,649,621,621,,649,649,,,,649,,649,649,649,649,649,649,649,,',
',,,649,649,649,649,649,649,649,,,649,,,,,,,649,,,649,649,649,649,649',
'649,649,,649,649,649,,649,649,,649,649,,,,,,,,,,,,,,,,,,,,,649,,,649',
',,649,,649,,649,,,,649,,,,,,,,649,,,,,649,649,649,649,649,649,,,,649',
'649,,,,,,,649,,,649,652,652,652,,652,649,649,,652,652,,,,652,,652,652',
'652,652,652,652,652,,,,,,652,652,652,652,652,652,652,,,652,,,,,,,652',
',,652,652,652,652,652,652,652,,652,652,652,,652,652,,652,652,,,,,,,',
',,,,,,,,,,,,,652,,,652,,,652,,652,,,,,,652,,,,,,,,652,,,,,652,652,652',
'652,652,652,,,,652,652,,,,,,,652,,,652,653,653,653,,653,652,652,,653',
'653,,,,653,,653,653,653,653,653,653,653,,,,,,653,653,653,653,653,653',
'653,,,653,,,,,,,653,,,653,653,653,653,653,653,653,,653,653,653,,653',
'653,,653,653,,,,,,,,,,,,,,,,,,,,,653,,,653,,,653,,653,,,,,,653,,,,,',
',,653,,,,,653,653,653,653,653,653,,,,653,653,,,,,,,653,,,653,658,658',
'658,,658,653,653,,658,658,,,,658,,658,658,658,658,658,658,658,,,,,,658',
'658,658,658,658,658,658,,,658,,,,,,,658,,,658,658,658,658,658,658,658',
',658,658,658,,658,658,,658,658,,,,,,,,,,,,,,,,,,,,,658,,,658,,,658,',
'658,,,,,,658,,,,,,,,658,,,,,658,658,658,658,658,658,,,,658,658,,,,,',
',658,,,658,661,661,661,,661,658,658,,661,661,,,,661,,661,661,661,661',
'661,661,661,,,,,,661,661,661,661,661,661,661,,,661,,,,,,,661,,,661,661',
'661,661,661,661,661,,661,661,661,,661,661,,661,661,,,,,,,,,,,,,,,,,',
',,,661,,,661,,,661,,661,,,,,,661,,,,,,,,661,,,,,661,661,661,661,661',
'661,,,,661,661,,,,,,,661,,,661,664,664,664,,664,661,661,,664,664,,,',
'664,,664,664,664,664,664,664,664,,,,,,664,664,664,664,664,664,664,,',
'664,,,,,,,664,,,664,664,664,664,664,664,664,,664,664,664,,664,664,,664',
'664,,,,,,,,,,,,,,,,,,,,,664,,,664,,,664,,664,,,,,,664,,,,,,,,664,,,',
',664,664,664,664,664,664,,,,664,664,,,,,,,664,,,664,665,665,665,,665',
'664,664,,665,665,,,,665,,665,665,665,665,665,665,665,,,,,,665,665,665',
'665,665,665,665,,,665,,,,,,,665,,,665,665,665,665,665,665,665,,665,665',
'665,,665,665,,665,665,,,,,,,,,,,,,,,,,,,,,665,,,665,,,665,,665,,,,,',
'665,,,,,,,,665,,,,,665,665,665,665,665,665,,,,665,665,,,,,,,665,,,665',
'678,678,678,678,678,665,665,,678,678,,,,678,,678,678,678,678,678,678',
'678,,,,,,678,678,678,678,678,678,678,,,678,,,,,,678,678,,678,678,678',
'678,678,678,678,678,,678,678,678,,678,678,,678,678,,,,,,,,,,,,,,,,,',
',,,678,,,678,,,678,,678,,678,,,,678,,,,,,,,678,,,,,678,678,678,678,678',
'678,,,,678,678,,,,,,,678,,,678,685,685,685,685,685,678,678,,685,685',
',,,685,,685,685,685,685,685,685,685,,,,,,685,685,685,685,685,685,685',
',,685,,,,,,685,685,,685,685,685,685,685,685,685,685,,685,685,685,,685',
'685,,685,685,,,,,,,,,,,,,,,,,,,,,685,,,685,,,685,,685,,685,,,,685,,',
',,,,,685,,,,,685,685,685,685,685,685,,,,685,685,,,,,,,685,,,685,688',
'688,688,,688,685,685,,688,688,,,,688,,688,688,688,688,688,688,688,,',
',,,688,688,688,688,688,688,688,,,688,,,,,,,688,,,688,688,688,688,688',
'688,688,688,688,688,688,,688,688,,688,688,,,,,,,,,,,,,,,,,,,,,688,,',
'688,,,688,,688,,688,,688,,688,,,,,,,,688,,,,,688,688,688,688,688,688',
',,,688,688,,,,,,,688,,,688,,688,,,,688,688,689,689,689,,689,,,,689,689',
',,,689,,689,689,689,689,689,689,689,,,,,,689,689,689,689,689,689,689',
',,689,,,,,,,689,,,689,689,689,689,689,689,689,689,689,689,689,,689,689',
',689,689,,,,,,,,,,,,,,,,,,,,,689,,,689,,,689,,689,,,,689,,689,,,,,,',
',689,,,,,689,689,689,689,689,689,,,,689,689,,,,,,,689,,,689,,689,,,',
'689,689,690,690,690,690,690,,,,690,690,,,,690,,690,690,690,690,690,690',
'690,,,,,,690,690,690,690,690,690,690,,,690,,,,,,690,690,,690,690,690',
'690,690,690,690,690,,690,690,690,,690,690,,690,690,,,,,,,,,,,,,,,,,',
',,,690,,,690,,,690,,690,,690,,,,690,,,,,,,,690,,,,,690,690,690,690,690',
'690,,,,690,690,,,,,,,690,,,690,691,691,691,691,691,690,690,,691,691',
',,,691,,691,691,691,691,691,691,691,,,,,,691,691,691,691,691,691,691',
',,691,,,,,,691,691,,691,691,691,691,691,691,691,691,,691,691,691,,691',
'691,,691,691,,,,,,,,,,,,,,,,,,,,,691,,,691,,,691,,691,,691,,,,691,,',
',,,,,691,,,,,691,691,691,691,691,691,,,,691,691,,,,,,,691,,,691,696',
'696,696,,696,691,691,,696,696,,,,696,,696,696,696,696,696,696,696,,',
',,,696,696,696,696,696,696,696,,,696,,,,,,,696,,,696,696,696,696,696',
'696,696,,696,696,696,,696,696,,696,696,,,,,,,,,,,,,,,,,,,,,696,,,696',
',,696,,696,,,,,,696,,,,,,,,696,,,,,696,696,696,696,696,696,,,,696,696',
',,,,,,696,,,696,699,699,699,,699,696,696,,699,699,,,,699,,699,699,699',
'699,699,699,699,,,,,,699,699,699,699,699,699,699,,,699,,,,,,,699,,,699',
'699,699,699,699,699,699,,699,699,699,,699,699,,699,699,,,,,,,,,,,,,',
',,,,,,,699,,,699,,,699,,699,,,,,,699,,,,,,,,699,,,,,699,699,699,699',
'699,699,,,,699,699,,,,,,,699,,,699,702,702,702,,702,699,699,,702,702',
',,,702,,702,702,702,702,702,702,702,,,,,,702,702,702,702,702,702,702',
',,702,,,,,,,702,,,702,702,702,702,702,702,702,,702,702,702,,702,702',
',987,,987,987,987,987,987,,,,,,,,,987,,,,,,,702,,,702,,,702,,702,,,',
',,,,987,,,,,,,987,987,987,987,702,702,702,702,702,702,,,,702,702,,,',
',,,702,,,702,715,715,715,,715,702,702,,715,715,,,,715,987,715,715,715',
'715,715,715,715,,,,,,715,715,715,715,715,715,715,,,715,,,,,,,715,,,715',
'715,715,715,715,715,715,,715,715,715,,715,715,,,,,,,,,,,,,,,,,,,,,,',
',715,,,715,,,715,,715,,,,,,,,,,,,,,,,,,,715,715,715,715,715,715,,,,715',
'715,,,,,,,715,,,715,721,721,721,,721,715,715,,721,721,,,,721,,721,721',
'721,721,721,721,721,,,,,,721,721,721,721,721,721,721,,,721,,,,,,,721',
',,721,721,721,721,721,721,721,,721,721,721,,721,721,,721,721,,,,,,,',
',,,,,,,,,,,,,721,,,721,,,721,,721,,721,,,,721,,,,,,,,721,,,,,721,721',
'721,721,721,721,,,,721,721,,,,,,,721,,,721,760,760,760,,760,721,721',
',760,760,,,,760,,760,760,760,760,760,760,760,,,,,,760,760,760,760,760',
'760,760,,,760,,,,,,,760,,,760,760,760,760,760,760,760,,760,760,760,',
'760,760,,760,760,,,,,,,,,,,,,,,,,,,,,760,,,760,,,760,,760,,760,,,,760',
',,,,,,,760,,,,,760,760,760,760,760,760,,,,760,760,,,,,,,760,,,760,767',
'767,767,,767,760,760,,767,767,,,,767,,767,767,767,767,767,767,767,,',
',,,767,767,767,767,767,767,767,,,767,,,,,,,767,,,767,767,767,767,767',
'767,767,,767,767,767,,767,767,,767,767,,,,,,,,,,,,,,,,,,,,,767,,,767',
',,767,,767,,,,,,767,,,,,,,,767,,,,,767,767,767,767,767,767,,,,767,767',
',,,,,,767,,,767,772,772,772,772,772,767,767,,772,772,,,,772,,772,772',
'772,772,772,772,772,,,,,,772,772,772,772,772,772,772,,,772,,,,,,772',
'772,,772,772,772,772,772,772,772,772,,772,772,772,,772,772,,772,772',
',,,,,,,,,,,,,,,,,,,,772,,,772,,,772,,772,,772,,,,772,,,,,,,,772,,,,',
'772,772,772,772,772,772,,,,772,772,,,,,,,772,,,772,776,776,776,776,776',
'772,772,,776,776,,,,776,,776,776,776,776,776,776,776,,,,,,776,776,776',
'776,776,776,776,,,776,,,,,,776,776,,776,776,776,776,776,776,776,776',
',776,776,776,,776,776,,776,776,,,,,,,,,,,,,,,,,,,,,776,,,776,,,776,',
'776,,776,,,,776,,,,,,,,776,,,,,776,776,776,776,776,776,,,,776,776,,',
',,,,776,,,776,777,777,777,777,777,776,776,,777,777,,,,777,,777,777,777',
'777,777,777,777,,,,,,777,777,777,777,777,777,777,,,777,,,,,,777,777',
',777,777,777,777,777,777,777,777,,777,777,777,,777,777,,777,777,,,,',
',,,,,,,,,,,,,,,,777,,,777,,,777,,777,,777,,,,777,,,,,,,,777,,,,,777',
'777,777,777,777,777,,,,777,777,,,,,,,777,,,777,780,780,780,,780,777',
'777,,780,780,,,,780,,780,780,780,780,780,780,780,,,,,,780,780,780,780',
'780,780,780,,,780,,,,,,,780,,,780,780,780,780,780,780,780,,780,780,780',
',780,780,,780,780,,,,,,,,,,,,,,,,,,,,,780,,,780,,,780,,780,,,,,,780',
',,,,,,,780,,,,,780,780,780,780,780,780,,,,780,780,,,,,,,780,,,780,794',
'794,794,794,794,780,780,,794,794,,,,794,,794,794,794,794,794,794,794',
',,,,,794,794,794,794,794,794,794,,,794,,,,,,794,794,,794,794,794,794',
'794,794,794,794,,794,794,794,,794,794,,794,794,,,,,,,,,,,,,,,,,,,,,794',
',,794,,,794,,794,,794,,,,794,,,,,,,,794,,,,,794,794,794,794,794,794',
',,,794,794,,,,,,,794,,,794,799,799,799,,799,794,794,,799,799,,,,799',
',799,799,799,799,799,799,799,,,,,,799,799,799,799,799,799,799,,,799',
',,,,,,799,,,799,799,799,799,799,799,799,,799,799,799,,799,799,,799,799',
',,,,,,,,,,,,,,,,,,,,799,,,799,,,799,,799,,,,,,799,,,,,,,,799,,,,,799',
'799,799,799,799,799,,,,799,799,,,,,,,799,,,799,800,800,800,,800,799',
'799,,800,800,,,,800,,800,800,800,800,800,800,800,,,,,,800,800,800,800',
'800,800,800,,,800,,,,,,,800,,,800,800,800,800,800,800,800,,800,800,800',
',800,800,,800,800,,,,,,,,,,,,,,,,,,,,,800,,,800,,,800,,800,,,,,,800',
',,,,,,,800,,,,,800,800,800,800,800,800,,,,800,800,,,,,,,800,,,800,801',
'801,801,,801,800,800,,801,801,,,,801,,801,801,801,801,801,801,801,,',
',,,801,801,801,801,801,801,801,,,801,,,,,,,801,,,801,801,801,801,801',
'801,801,,801,801,801,,801,801,,801,801,,,,,,,,,,,,,,,,,,,,,801,,,801',
',,801,,801,,,,,,801,,,,,,,,801,,,,,801,801,801,801,801,801,,,,801,801',
',,,,,,801,,,801,813,813,813,,813,801,801,,813,813,,,,813,,813,813,813',
'813,813,813,813,,,,,,813,813,813,813,813,813,813,,,813,,,,,,,813,,,813',
'813,813,813,813,813,813,,813,813,813,,813,813,,813,813,,,,,,,,,,,,,',
',,,,,,,813,,,813,,,813,,813,,,,,,813,,,,,,,,813,,,,,813,813,813,813',
'813,813,,,,813,813,,,,,,,813,,,813,814,814,814,,814,813,813,,814,814',
',,,814,,814,814,814,814,814,814,814,,,,,,814,814,814,814,814,814,814',
',,814,,,,,,,814,,,814,814,814,814,814,814,814,,814,814,814,,814,814',
',814,814,,,,,,,,,,,,,,,,,,,,,814,,,814,,,814,,814,,,,,,814,,,,,,,,814',
',,,,814,814,814,814,814,814,,,,814,814,,,,,,,814,,,814,815,815,815,',
'815,814,814,,815,815,,,,815,,815,815,815,815,815,815,815,,,,,,815,815',
'815,815,815,815,815,,,815,,,,,,,815,,,815,815,815,815,815,815,815,,815',
'815,815,,815,815,,815,815,,,,,,,,,,,,,,,,,,,,,815,,,815,,,815,,815,',
',,,,815,,,,,,,,815,,,,,815,815,815,815,815,815,,,,815,815,,,,,,,815',
',,815,838,838,838,838,838,815,815,,838,838,,,,838,,838,838,838,838,838',
'838,838,,,,,,838,838,838,838,838,838,838,,,838,,,,,,838,838,,838,838',
'838,838,838,838,838,838,,838,838,838,,838,838,,838,838,,,,,,,,,,,,,',
',,,,,,,838,,,838,,,838,,838,,838,,,,838,,,,,,,,838,,,,,838,838,838,838',
'838,838,,,,838,838,,,,,,,838,,,838,865,865,865,,865,838,838,,865,865',
',,,865,,865,865,865,865,865,865,865,,,,,,865,865,865,865,865,865,865',
',,865,,,,,,,865,,,865,865,865,865,865,865,865,,865,865,865,,865,865',
',865,865,,,,,,,,,,,,,,,,,,,,,865,,,865,,,865,,865,,,,,,865,,,,,,,,865',
',,,,865,865,865,865,865,865,,,,865,865,,,,,,,865,,,865,867,867,867,867',
'867,865,865,,867,867,,,,867,,867,867,867,867,867,867,867,,,,,,867,867',
'867,867,867,867,867,,,867,,,,,,867,867,,867,867,867,867,867,867,867',
'867,,867,867,867,,867,867,,867,867,,,,,,,,,,,,,,,,,,,,,867,,,867,,,867',
',867,,867,,,,867,,,,,,,,867,,,,,867,867,867,867,867,867,,,,867,867,',
',,,,,867,,,867,868,868,868,868,868,867,867,,868,868,,,,868,,868,868',
'868,868,868,868,868,,,,,,868,868,868,868,868,868,868,,,868,,,,,,868',
'868,,868,868,868,868,868,868,868,868,,868,868,868,,868,868,,868,868',
',,,,,,,,,,,,,,,,,,,,868,,,868,,,868,,868,,868,,,,868,,,,,,,,868,,,,',
'868,868,868,868,868,868,,,,868,868,,,,,,,868,,,868,893,893,893,,893',
'868,868,,893,893,,,,893,,893,893,893,893,893,893,893,,,,,,893,893,893',
'893,893,893,893,,,893,,,,,,,893,,,893,893,893,893,893,893,893,,893,893',
'893,,893,893,,893,893,,,,,,,,,,,,,,,,,,,,,893,,,893,,,893,,893,,,,,',
'893,,,,,,,,893,,,,,893,893,893,893,893,893,,,,893,893,,,,,,,893,,,893',
'907,907,907,,907,893,893,,907,907,,,,907,,907,907,907,907,907,907,907',
',,,,,907,907,907,907,907,907,907,,,907,,,,,,,907,,,907,907,907,907,907',
'907,907,,907,907,907,,907,907,,907,907,,,,,,,,,,,,,,,,,,,,,907,,,907',
',,907,,907,,,,,,907,,,,,,,,907,,,,,907,907,907,907,907,907,,,,907,907',
',,,,,,907,,,907,908,908,908,,908,907,907,,908,908,,,,908,,908,908,908',
'908,908,908,908,,,,,,908,908,908,908,908,908,908,,,908,,,,,,,908,,,908',
'908,908,908,908,908,908,,908,908,908,,908,908,,908,908,,,,,,,,,,,,,',
',,,,,,,908,,,908,,,908,,908,,,,,,908,,,,,,,,908,,,,,908,908,908,908',
'908,908,,,,908,908,,,,,,,908,,,908,909,909,909,,909,908,908,,909,909',
',,,909,,909,909,909,909,909,909,909,,,,,,909,909,909,909,909,909,909',
',,909,,,,,,,909,,,909,909,909,909,909,909,909,,909,909,909,,909,909',
',909,909,,,,,,,,,,,,,,,,,,,,,909,,,909,,,909,,909,,,,,,909,,,,,,,,909',
',,,,909,909,909,909,909,909,,,,909,909,,,,,,,909,,,909,915,915,915,',
'915,909,909,,915,915,,,,915,,915,915,915,915,915,915,915,,,,,,915,915',
'915,915,915,915,915,,,915,,,,,,,915,,,915,915,915,915,915,915,915,915',
'915,915,915,,915,915,,915,915,,,,,,,,,,,,,,,,,,,,,915,,,915,,,915,,915',
',,,915,,915,,,,,,,,915,,,,,915,915,915,915,915,915,,,,915,915,,,,,,',
'915,,,915,,915,,,,915,915,919,919,919,919,919,,,,919,919,,,,919,,919',
'919,919,919,919,919,919,,,,,,919,919,919,919,919,919,919,,,919,,,,,',
'919,919,,919,919,919,919,919,919,919,919,,919,919,919,,919,919,,919',
'919,,,,,,,,,,,,,,,,,,,,,919,,,919,,,919,,919,,919,,,,919,,,,,,,,919',
',,,,919,919,919,919,919,919,,,,919,919,,,,,,,919,,,919,923,923,923,',
'923,919,919,,923,923,,,,923,,923,923,923,923,923,923,923,,,,,,923,923',
'923,923,923,923,923,,,923,,,,,,,923,,,923,923,923,923,923,923,923,,923',
'923,923,,923,923,,,,,,,,,,,,,,,,,,,,,,,,923,,,923,,,923,,923,,,,,,,',
',,,,,,,,,,,923,923,923,923,923,923,,,,923,923,,,,,,,923,,,923,938,938',
'938,,938,923,923,,938,938,,,,938,,938,938,938,938,938,938,938,,,,,,938',
'938,938,938,938,938,938,,,938,,,,,,,938,,,938,938,938,938,938,938,938',
',938,938,938,,938,938,,938,938,,,,,,,,,,,,,,,,,,,,,938,,,938,,,938,',
'938,,938,,,,938,,,,,,,,938,,,,,938,938,938,938,938,938,,,,938,938,,',
',,,,938,,,938,939,939,939,939,939,938,938,,939,939,,,,939,,939,939,939',
'939,939,939,939,,,,,,939,939,939,939,939,939,939,,,939,,,,,,939,939',
',939,939,939,939,939,939,939,939,,939,939,939,,939,939,,939,939,,,,',
',,,,,,,,,,,,,,,,939,,,939,,,939,,939,,939,,,,939,,,,,,,,939,,,,,939',
'939,939,939,939,939,,,,939,939,,,,,,,939,,,939,942,942,942,942,942,939',
'939,,942,942,,,,942,,942,942,942,942,942,942,942,,,,,,942,942,942,942',
'942,942,942,,,942,,,,,,942,942,,942,942,942,942,942,942,942,942,,942',
'942,942,,942,942,,942,942,,,,,,,,,,,,,,,,,,,,,942,,,942,,,942,,942,',
'942,,,,942,,,,,,,,942,,,,,942,942,942,942,942,942,,,,942,942,,,,,,,942',
',,942,965,965,965,965,965,942,942,,965,965,,,,965,,965,965,965,965,965',
'965,965,,,,,,965,965,965,965,965,965,965,,,965,,,,,,965,965,,965,965',
'965,965,965,965,965,965,,965,965,965,,965,965,,965,965,,,,,,,,,,,,,',
',,,,,,,965,,,965,,,965,,965,,965,,,,965,,,,,,,,965,,,,,965,965,965,965',
'965,965,,,,965,965,,,,,,,965,,,965,978,978,978,978,978,965,965,,978',
'978,,,,978,,978,978,978,978,978,978,978,,,,,,978,978,978,978,978,978',
'978,,,978,,,,,,978,978,,978,978,978,978,978,978,978,978,,978,978,978',
',978,978,,978,978,,,,,,,,,,,,,,,,,,,,,978,,,978,,,978,,978,,978,,,,978',
',,,,,,,978,,,,,978,978,978,978,978,978,,,,978,978,,,,,,,978,,,978,983',
'983,983,983,983,978,978,,983,983,,,,983,,983,983,983,983,983,983,983',
',,,,,983,983,983,983,983,983,983,,,983,,,,,,983,983,,983,983,983,983',
'983,983,983,983,,983,983,983,,983,983,,983,983,,,,,,,,,,,,,,,,,,,,,983',
',,983,,,983,,983,,983,,,,983,,,,,,,,983,,,,,983,983,983,983,983,983',
',,,983,983,,,,,,,983,,,983,996,996,996,996,996,983,983,,996,996,,,,996',
',996,996,996,996,996,996,996,,,,,,996,996,996,996,996,996,996,,,996',
',,,,,996,996,,996,996,996,996,996,996,996,996,,996,996,996,,996,996',
',996,996,,,,,,,,,,,,,,,,,,,,,996,,,996,,,996,,996,,996,,,,996,,,,,,',
',996,,,,,996,996,996,996,996,996,,,,996,996,,,,,,,996,,,996,1000,1000',
'1000,,1000,996,996,,1000,1000,,,,1000,,1000,1000,1000,1000,1000,1000',
'1000,,,,,,1000,1000,1000,1000,1000,1000,1000,,,1000,,,,,,,1000,,,1000',
'1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,,1000,1000,,1000,1000',
',,,,,,,,,,,,,,,,,,,,1000,,,1000,,,1000,,1000,,1000,,,,1000,,,,,,,,1000',
',,,444,1000,1000,1000,1000,1000,1000,444,444,444,1000,1000,,444,444',
',444,,1000,,,1000,,1000,,444,,1000,1000,,,,,,,,444,444,,444,444,444',
'444,444,,,,,,,,,,,,,,,,,,,,,,444,444,444,444,444,444,444,444,444,444',
'444,444,444,444,444,,,444,444,444,,444,,,,444,,,,,,444,,444,,444,444',
'444,444,444,444,444,,444,444,444,,,,,,,,,,,,,444,444,,444,,444,,446',
'444,,444,,,444,446,446,446,,,,446,446,,446,,,,,,,,,,,,,,,,,,,,446,446',
',446,446,446,446,446,,,,,,,,,,,,,,,,,,,,,,446,446,446,446,446,446,446',
'446,446,446,446,446,446,446,446,,,446,446,446,,446,,,,446,,,,,,446,',
'446,,446,446,446,446,446,446,446,,446,,446,,,,,,,,,,,,,446,446,,446',
',446,,668,446,,446,,,446,668,668,668,,,668,668,668,,668,,,,,,,,,668',
'668,668,,,,,,,,,668,668,,668,668,668,668,668,,,,,,,,,,,,,,,,,,,,,,668',
'668,668,668,668,668,668,668,668,668,668,668,668,668,668,,,668,668,668',
',668,668,,,668,,668,,668,,668,,668,,668,668,668,668,668,668,668,,668',
'668,668,,,,,,,,,,,,,668,668,668,668,,668,,669,668,,668,,,668,669,669',
'669,,,669,669,669,,669,,,,,,,,,,669,669,,,,,,,,,669,669,,669,669,669',
'669,669,,,,,,,,,,,,,,,,,,,,,,669,669,669,669,669,669,669,669,669,669',
'669,669,669,669,669,,,669,669,669,,669,669,,,669,,669,,669,,669,,669',
',669,669,669,669,669,669,669,,669,,669,,,,,,,,,,,,,669,669,669,669,',
'669,,25,669,,669,,,669,25,25,25,,,25,25,25,,25,,,,,,,,,25,25,25,,,,',
',,,,25,25,,25,25,25,25,25,,,,,,,,,,,,,,,,,,,,,,25,25,25,25,25,25,25',
'25,25,25,25,25,25,25,25,,,25,25,25,,,25,,25,25,,25,,25,,25,,25,,25,25',
'25,25,25,25,25,,25,25,25,,,,,,,,,,,,,25,25,25,25,26,25,,,25,,25,26,26',
'26,,,26,26,26,,26,,,,,,,,,,26,26,,,,,,,,,26,26,,26,26,26,26,26,,,,,',
',,,,,,,,,,,,,,,,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,,,26,26',
'26,,,26,,26,26,,26,,26,,26,,26,,26,26,26,26,26,26,26,,26,,26,,,,,,,',
',,,,,26,26,26,26,51,26,,,26,,26,51,51,51,,,51,51,51,,51,,,,,,,,,,51',
'51,51,,,,,,,,51,51,,51,51,51,51,51,,,,,,,,,,,,,,,,,,,,,,51,51,51,51',
'51,51,51,51,51,51,51,51,51,51,51,,,51,51,51,,,51,,,51,,51,,51,,51,,51',
',51,51,51,51,51,51,51,,51,,51,,,,,,,,,,,,,51,51,51,51,440,51,,51,51',
',51,440,440,440,,,440,440,440,,440,,,,,,,,,440,440,440,,,,,,,,,440,440',
',440,440,440,440,440,,,,,,,,,,,,,,,,,,,,,,440,440,440,440,440,440,440',
'440,440,440,440,440,440,440,440,,,440,440,440,,,440,,440,440,,440,,440',
',440,,440,,440,440,440,440,440,440,440,,440,440,440,,,,,,,,,,,,,440',
'440,440,440,450,440,,,440,,440,450,450,450,,,450,450,450,,450,,,,,,',
',,450,450,450,,,,,,,,,450,450,,450,450,450,450,450,,,,,,,,,,,,,,,,,',
',,,,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,,,450',
'450,450,,,450,,450,450,,450,,450,,450,,450,,450,450,450,450,450,450',
'450,,450,450,450,,,,,,,,,,,,,450,450,450,450,500,450,,,450,,450,500',
'500,500,,,500,500,500,,500,,,,,,,,,,500,,,,,,,,,,500,500,,500,500,500',
'500,500,,,,,,,,,,,,501,,,,,,,501,501,501,,,501,501,501,,501,,,,,500',
'500,,,,501,,,500,,,,,500,500,501,501,,501,501,501,501,501,,,,,,,,,,',
',500,,,,,,,,,,,,,500,,500,,,500,,,501,501,,502,,,,,501,,502,502,502',
'501,501,502,502,502,,502,,,,,,,,,,502,,,,,501,,,,,502,502,,502,502,502',
'502,502,501,,501,,,501,202,202,,,202,,,,,,,,,202,202,202,202,202,202',
'202,202,202,,,202,202,502,502,,,202,202,202,202,502,,,,,502,502,,,,',
'202,202,,202,202,202,202,202,202,202,202,202,202,202,,502,202,,,,,,',
',,,,,502,,502,,,502,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7',
',,,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,,7,,,,,,,,,7,7,7',
'7,7,7,7,7,7,,,7,7,,,,,7,7,7,7,,,,,,,,,,,,7,7,,7,7,7,7,7,7,7,7,7,7,7',
',,7,7,,,,,,,,,,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,,,',
'8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,,,8,,,,,,,,,8,8,8,8,8',
'8,8,8,8,,,8,8,,,,,8,8,8,8,,,,,,,,,,,,8,8,,8,8,8,8,8,8,8,8,8,8,8,,,8',
'8,,,,,,,,,,8,423,423,423,423,423,423,423,423,423,423,423,423,423,423',
'423,423,423,423,423,423,423,423,423,423,,,,423,423,423,423,423,423,423',
'423,423,423,423,423,423,423,423,423,423,423,423,423,423,423,423,,,423',
',,,,,,,,423,423,423,423,423,423,423,423,423,,,423,423,,,,,423,423,423',
'423,,,,,,,,,,,,423,423,,423,423,423,423,423,423,423,423,423,423,423',
',,423,423,,,,,,,,,,423,427,427,427,427,427,427,427,427,427,427,427,427',
'427,427,427,427,427,427,427,427,427,427,427,427,,,,427,427,427,427,427',
'427,427,427,427,427,427,427,427,427,427,427,427,427,427,427,427,427',
'427,,,427,,,,,,,,,427,427,427,427,427,427,427,427,427,,,427,427,,,,',
'427,427,427,427,,,,,,,,,,,,427,427,,427,427,427,427,427,427,427,427',
'427,427,427,,,427,427,,,,,,,,,,427,66,66,66,66,66,66,66,66,66,66,66',
'66,66,66,66,66,66,66,66,66,66,66,66,66,,,,66,66,66,66,66,66,66,66,66',
'66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,,66,,,,,,,66,66,66',
'66,66,66,66,66,66,,,66,66,,,,,66,66,66,66,,,,,,66,,,,,,66,66,,66,66',
'66,66,66,66,66,66,66,66,66,,,66,80,80,80,80,80,80,80,80,80,80,80,80',
'80,80,80,80,80,80,80,80,80,80,80,80,,,,80,80,80,80,80,80,80,80,80,80',
'80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,,80,,,,,,,80,80,80,80',
'80,80,80,80,80,,,80,80,,,,,80,80,80,80,,,,,,,,,,,,80,80,,80,80,80,80',
'80,80,80,80,80,80,80,,,80,193,193,193,193,193,193,193,193,193,193,193',
'193,193,193,193,193,193,193,193,193,193,193,193,193,,,,193,193,193,193',
'193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193',
'193,193,193,193,193,,193,,,,,,,193,193,193,193,193,193,193,193,193,',
',193,193,,,,,193,193,193,193,,,,,,,,,,,,193,193,,193,193,193,193,193',
'193,193,193,193,193,193,,,193,791,791,791,791,791,791,791,791,791,791',
'791,791,791,791,791,791,791,791,791,791,791,791,791,791,,,,791,791,791',
'791,791,791,791,791,791,791,791,791,791,791,791,791,791,791,791,791',
'791,791,791,,,791,,,,,,,,,791,791,791,791,791,791,791,791,791,,,791',
'791,,,,,791,791,791,791,,,,,,,,,,,,791,791,,791,791,791,791,791,791',
'791,791,791,791,791,201,201,791,,201,,,,,,,,,201,201,201,201,201,201',
'201,201,201,,,201,201,,,,,201,201,201,201,,,,,,201,,,,,,201,201,,201',
'201,201,201,201,201,201,201,201,201,201,203,203,201,,203,,,,,,,,,203',
'203,203,203,203,203,203,203,203,,,203,203,,,,,203,203,203,203,,,,,,',
',,,,,203,203,,203,203,203,203,203,203,203,203,203,203,203,249,249,203',
',249,,,,,,,,,249,249,249,249,249,249,249,249,249,,,249,249,,,,,249,249',
'249,249,,,,,,,,,,,,249,249,,249,249,249,249,249,249,249,249,249,249',
'249,250,250,249,,250,,,,,,,,,250,250,250,250,250,250,250,250,250,,,250',
'250,,,,,250,250,250,250,,,,,,,,,,,,250,250,,250,250,250,250,250,250',
'250,250,250,250,250,251,251,250,,251,,,,,,,,,251,251,251,251,251,251',
'251,251,251,,,251,251,,,,,251,251,251,251,,,,,,,,,,,,251,251,,251,251',
'251,251,251,251,251,251,251,251,251,463,463,251,,463,,,,,,,,,463,463',
'463,463,463,463,463,463,463,,,463,463,,,,,463,463,463,463,,,,,,463,',
',,,,463,463,,463,463,463,463,463,463,463,463,463,463,463,464,464,463',
',464,,,,,,,,,464,464,464,464,464,464,464,464,464,,,464,464,,,,,464,464',
'464,464,,,,,,,,,,,,464,464,,464,464,464,464,464,464,464,464,464,464',
'464,535,535,464,,535,,,,,,,,,535,535,535,535,535,535,535,535,535,,,535',
'535,,,,,535,535,535,535,,,,,,535,,,,,,535,535,,535,535,535,535,535,535',
'535,535,535,535,535,536,536,535,,536,,,,,,,,,536,536,536,536,536,536',
'536,536,536,,,536,536,,,,,536,536,536,536,,,,,,,,,,,,536,536,,536,536',
'536,536,536,536,536,536,536,536,536,538,538,536,,538,,,,,,,,,538,538',
'538,538,538,538,538,538,538,,,538,538,,,,,538,538,538,538,,,,,,,,,,',
',538,538,,538,538,538,538,538,538,538,538,538,538,538,549,549,538,,549',
',,,,,,,,549,549,549,549,549,549,549,549,549,,,549,549,,,,,549,549,549',
'549,,,,,,549,,,,,,549,549,,549,549,549,549,549,549,549,549,549,549,549',
'550,550,549,,550,,,,,,,,,550,550,550,550,550,550,550,550,550,,,550,550',
',,,,550,550,550,550,,,,,,,,,,,,550,550,,550,550,550,550,550,550,550',
'550,550,550,550,607,607,550,,607,,,,,,,,,607,607,607,607,607,607,607',
'607,607,,,607,607,,,,,607,607,607,607,,,,,,607,,,,,,607,607,,607,607',
'607,607,607,607,607,607,607,607,607,608,608,607,,608,,,,,,,,,608,608',
'608,608,608,608,608,608,608,,,608,608,,,,,608,608,608,608,,,,,,,,,,',
',608,608,,608,608,608,608,608,608,608,608,608,608,608,614,614,608,,614',
',,,,,,,,614,614,614,614,614,614,614,614,614,,,614,614,,,,,614,614,614',
'614,,,,,,,,,,,,614,614,,614,614,614,614,614,614,614,614,614,614,614',
'616,616,614,,616,,,,,,,,,616,616,616,616,616,616,616,616,616,,,616,616',
',,,,616,616,616,616,,,,,,616,,,,,,616,616,,616,616,616,616,616,616,616',
'616,616,616,616,742,742,616,,742,,,,,,,,,742,742,742,742,742,742,742',
'742,742,,,742,742,,,,,742,742,742,742,,,,,,,,,,,,742,742,,742,742,742',
'742,742,742,742,742,742,742,742,1001,1001,742,,1001,,,,,,,,,1001,1001',
'1001,1001,1001,1001,1001,1001,1001,,,1001,1001,,,,,1001,1001,1001,1001',
',,,,,1001,,,,,,1001,1001,,1001,1001,1001,1001,1001,1001,1001,1001,1001',
'1001,1001,1002,1002,1001,,1002,,,,,,,,,1002,1002,1002,1002,1002,1002',
'1002,1002,1002,,,1002,1002,,,,,1002,1002,1002,1002,,,,,,,,,,,,1002,1002',
',1002,1002,1002,1002,1002,1002,1002,1002,1002,1002,1002,,,1002' ]
        racc_action_check = arr = ::Array.new(25645, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,    14,   nil,   -46,   nil,   790,   -84, 23598, 23719,   -49,
   nil,   -58,    31,   630,   244,     2,   310,   nil,   129,   260,
  1860,   130,   nil,   354,   -19, 22702, 22829,   391,   529,   667,
   nil,   805,   936,  1067,   nil,    72,   301,   148,   441,  1198,
  1329,  1460,    92,   714,   nil,   nil,   nil,   nil,   nil,   nil,
   nil, 22956,   nil,  1591,  1722,  1860,   -15,   949,  1998,  2129,
   nil,   nil,  2260,  2391,  2522,   nil, 24082,   nil,   nil,   nil,
   nil,   nil,   -15,   nil,   nil,   nil,   nil,   nil,   100,   132,
 24192,   nil,   nil,   nil,   493,  2653,   nil,   nil,  2791,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   273,   nil,
  2929,   nil,   nil,   nil,  3060,  3191,  3322,  3453,  3584,  3715,
   nil,   513,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil, 24302,   181,   nil,  3846,  3977,  4108,  4239,
  4377, 24471, 23471, 24530,  4515,  4646,  4777,  4908,   nil,   831,
   -63,   261,   -51,   201,   293,  5039,  5170,   nil,   nil,  5301,
   301,  5432,  5563,  5694,  5825,  5956,  6087,  6218,  6349,  6480,
  6611,  6742,  6873,  7004,  7135,  7266,  7397,  7528,  7659,  7790,
  7921,  8052,  8183,  8314,  8445,  8576,   nil,   nil,   nil, 24589,
 24648, 24707,   323,  8707,  8845,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  8983,   nil,  2653,   nil,   302,   306,   nil,  9121,
   366,  9252,   nil,   nil,  9383,  9514,   nil,   nil,   146,   970,
   395,  9645,   438,   465,   431,  9776,  9907,    17,   899,   519,
    39,   nil,   502,   483,   -14,   nil,   nil,   nil,   521,   515,
   495, 10038,   nil,   430,   575,   595,   931,   nil,   597,   nil,
 10169,   nil, 10300,   582,   543,   nil,   558,   -89,   -47,   591,
   581,   114,   606,   nil,   nil,   -21,  1080,   nil,   nil,   nil,
   569,   575,   600,   603,   nil,   607,   622,   nil,   nil,   nil,
   700,   nil, 10431,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   821,   nil,   nil,   nil,   717,   nil,   nil,   718,   602,    -7,
     0, 10562, 10693,   349,   350,   645,    -2,  1030,   722,     0,
   753,   nil,   nil,   391,   724,   nil,  1064,   nil,    68,   nil,
   nil, 10824,   148,   307,   323,   450,   532,   575,   580,   588,
   nil,   626,   nil, 10955,   nil,   285,   nil,   391,   nil,   419,
   666,   529,   nil,   667,   -33,   nil,   556,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   682, 23840,   nil,   nil,   nil, 23961,   683,   nil,
   668,   nil, 11086,   669,   nil,  2791,   705,   708,   568,   623,
 23083,   nil,   nil,   nil, 22182,   713, 22312,   nil, 11217, 11355,
 23210,   nil,   nil,   nil,  3191,   nil,   667,   nil,   nil,   391,
   nil,   nil,   nil, 24766, 24825, 11493, 11631,    98, 11769, 11900,
 12031,    44,   nil,  4646,  4777,   260,   418,   739,   748,   749,
   753,  2516,  2929,  1461,  4908,  1591,  1998,  2129,  2260,  5039,
  5170,  5301,  5432,  5563,   669,   829,  5694,  5825, 12162,   -35,
 23337, 23392, 23471,   -34,   nil,   696,   nil,   nil,   695,   715,
   nil,    -7,   166,   752,   nil,   nil, 12293,   nil, 12431,   nil,
 12569,   nil,   167,   nil,   nil,   nil, 12700,   754,   720,   nil,
   nil,   722, 12831,   761, 12962, 24884, 24943, 13100, 25002,   170,
   771,   nil,   nil, 13238,   738,   nil, 13369, 13500, 13631, 25061,
 25120,  3322, 13762,   860,   861,   749,   795,   nil,   nil, 13893,
   nil,   nil, 14031,   nil,   nil,   nil,   nil, 14169, 14300,   796,
   nil,  2404,   nil,   nil, 14431,   471,   nil,   nil,   582,  2535,
   nil,   826,   nil,   nil,  1161,   838,   nil,   805,   nil,   966,
   nil,   771,   686,   nil,   nil, 14562,   894,   nil,   nil, 14693,
   203,   204,   894,   902, 14824,   nil, 14955, 25179, 25238, 15093,
    16,   nil,  1224,   nil, 25297, 15231, 25356,   nil,   nil, 15369,
   585, 15500,   nil,  9789,   nil,   nil,   nil,    31,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   244,   nil,
   nil,   nil,   786,   nil,   nil,   nil,   nil,   nil,   802, 15631,
   649,   202, 15762, 15893,   839,   nil,   nil,   nil, 16024,   841,
   nil, 16155,   842,   nil, 16286, 16417,   283,   297, 22442, 22572,
   849,   853,   529,   nil,  1722,   nil, 10051,   nil, 16548,   nil,
   nil,   nil,   nil,   nil,   nil, 16679,   nil,   858, 16810, 16948,
 17086, 17217,   nil,   823,   nil,   863, 17348,   nil,   nil, 17479,
  1000,   -25, 17610,   826,   nil,   869,   207,   229,   874,   252,
   260,   883,   881,   888,   852, 17741,  3453,   914,   915,    66,
   968, 17872,   nil,   901,   nil,   292,   nil,   885,   989,   nil,
   nil,   nil,   874,   880,  1292,   891,   nil,   nil,   897,   899,
   nil,   900, 25415,   nil,   nil,   938,  1097,   907,  1214,   740,
   nil,  1020,   nil,   nil,   nil,   nil,   nil,  1026,   nil,  1027,
 18003,   963,    29,    40,    80,   121,   964, 18134,  1722,   nil,
   970,   968, 18265,   609,   nil,   212, 18396, 18527, 10444,   623,
 18658,   nil,   937,   940,   nil,   941,   946,   950,   nil,   943,
   nil, 24412,   990,   831, 18789,   nil,   nil,   nil,   955, 18920,
 19051, 19182,   nil,  3584,   nil,  3715,   nil,   nil,  3846,   nil,
  3977,   nil,  4108, 19313, 19444, 19575,   299,   385,   nil,   963,
   986,   970,  1085,   985,   nil,   977,   994,  1099,   nil,   nil,
   nil,   983,   232,   nil,   nil,   nil,  1102,   nil, 19706,   985,
  1026,   nil,   nil,   nil,   nil,   nil,   nil,  1219,   nil,  1350,
   nil,   nil, 10837,   nil,  1481,   nil,   nil,  1033,   nil,   nil,
   691,  1345,  1000,  1120,   nil, 19837,  1122, 19968, 20099,   nil,
   nil,    45,    50,  1355,   229,   nil,  1128,   nil,   nil,  1129,
  1130,  1019,   nil,   nil,   558,   nil,   nil, 12844,   nil, 13251,
   nil,  1612,   nil, 20230,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  1033,  1018,   nil,  4239,   nil,  4377, 20361, 20492, 20623,
   849,   nil,  1040,   nil,   nil, 20754,   nil,   nil,   nil, 20892,
   nil,   nil,    72, 21023,   nil,  1028,  1030,  1031,  1033,  1036,
  1581,  1038,  1607,   nil,    76,   nil,  1156,  1157, 21154, 21285,
   nil,   nil, 21416,   nil,   nil,  1077,   nil,  1043,   nil,  1045,
  1046,  1047,  1048,   nil,  1060,   nil, 14444,   nil,  4515,   419,
   nil,   nil,   nil,   nil,   nil, 21547,    80,  1423,  1133,    84,
   nil,   nil,  2019,   nil,   nil,   nil,  1988,  1064, 21678,   nil,
   nil,   nil,   527, 21809,  1182,   nil,   nil, 17623,   nil,  2150,
   nil,  2281,   nil,  2950,   nil,   nil, 21940,   nil,  1226,  1187,
 22071, 25474, 25533,    88,  1072,  1077,   743,   nil,   nil,   nil,
  1198,   nil,  1084,  1085,  1086,  1096,  1214,   nil,   nil,  1132,
    96,   110,   176,   211,   nil,   nil,   nil,  3081,   nil,   nil,
   nil,   nil,   nil,   129,  1099,   nil ]

racc_action_default = [
    -3,  -590,    -1,  -578,    -4,    -6,  -590,  -590,  -590,  -590,
   -25,  -590,  -590,  -590,  -278,  -590,   -37,   -40,  -590,  -590,
   -45,   -47,   -48,   -49,  -259,  -259,  -259,  -293,  -331,  -332,
   -67,   -10,   -71,   -79,   -81,  -590,  -476,  -590,  -590,  -590,
  -590,  -590,  -580,  -237,  -271,  -272,  -273,  -274,  -275,  -276,
  -277,  -568,  -280,  -284,  -589,  -558,  -301,  -589,  -590,  -590,
  -306,  -309,  -578,  -590,  -590,  -323,  -590,  -333,  -334,  -419,
  -420,  -421,  -422,  -423,  -589,  -426,  -589,  -589,  -589,  -589,
  -589,  -453,  -459,  -460,  -590,  -465,  -466,  -467,  -468,  -469,
  -470,  -471,  -472,  -473,  -474,  -475,  -478,  -479,  -590,    -2,
  -579,  -585,  -586,  -587,  -590,  -590,  -590,  -590,  -590,    -3,
   -13,  -590,  -108,  -109,  -110,  -111,  -112,  -113,  -114,  -117,
  -118,  -119,  -120,  -121,  -122,  -123,  -124,  -125,  -126,  -127,
  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,
  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,
  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,
  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,
  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,
  -188,  -189,  -190,  -590,   -18,  -115,   -10,  -590,  -590,  -589,
  -589,  -590,  -590,  -590,  -590,  -590,  -590,  -590,   -43,  -590,
  -476,  -590,  -278,  -590,  -590,   -10,  -590,   -44,  -227,  -590,
  -590,  -590,  -590,  -590,  -590,  -590,  -590,  -590,  -590,  -590,
  -590,  -590,  -590,  -590,  -590,  -590,  -590,  -590,  -590,  -590,
  -590,  -590,  -590,  -590,  -590,  -590,  -234,  -388,  -390,  -590,
  -590,  -590,   -54,  -589,  -590,  -300,  -394,  -402,  -404,   -62,
  -400,   -63,  -590,   -64,  -238,  -254,  -263,  -263,  -258,  -590,
  -264,  -590,  -589,  -560,  -590,  -590,   -65,   -66,  -578,   -11,
   -67,   -10,  -590,  -590,   -72,   -75,   -10,  -476,  -590,  -590,
  -278,  -293,  -296,  -580,  -590,  -331,  -332,  -335,  -401,  -590,
   -77,  -590,   -83,  -288,  -461,  -462,  -590,  -212,  -213,  -228,
  -590,  -581,   -10,  -282,  -580,  -239,  -580,  -582,  -582,  -590,
  -590,  -582,  -590,  -302,  -303,  -590,  -590,  -352,  -353,  -360,
  -589,  -520,  -555,  -555,  -370,  -589,  -589,  -387,  -485,  -486,
  -488,  -489,  -493,  -494,  -519,  -521,  -522,  -523,  -524,  -525,
  -590,  -542,  -547,  -548,  -550,  -551,  -552,  -590,   -46,  -590,
  -590,  -590,  -590,  -578,  -590,  -579,  -476,  -590,  -590,  -278,
  -590,  -527,  -528,  -104,  -590,  -106,  -590,  -278,  -590,  -320,
  -476,  -590,  -108,  -109,  -146,  -147,  -163,  -168,  -175,  -178,
  -326,  -590,  -556,  -590,  -424,  -590,  -439,  -590,  -441,  -590,
  -590,  -590,  -431,  -590,  -590,  -437,  -590,  -452,  -454,  -455,
  -456,  -457,  -463,  -464,  1036,    -5,  -588,   -19,   -20,   -21,
   -22,   -23,  -590,  -590,   -15,   -16,   -17,  -590,  -590,   -26,
   -35,   -36,  -590,  -590,   -27,  -193,  -590,  -590,  -569,  -570,
  -259,  -397,  -571,  -572,  -569,  -259,  -570,  -399,  -574,  -575,
  -259,  -569,  -570,   -33,  -201,   -34,  -590,   -38,   -39,  -191,
  -264,   -41,   -42,  -590,  -590,  -589,  -589,  -288,  -590,  -590,
  -590,  -590,  -299,  -202,  -203,  -204,  -205,  -206,  -207,  -208,
  -209,  -214,  -215,  -216,  -217,  -218,  -219,  -220,  -221,  -222,
  -223,  -224,  -225,  -226,  -229,  -230,  -231,  -232,  -590,  -589,
  -259,  -259,  -259,  -589,   -55,  -580,  -249,  -250,  -263,  -263,
  -260,  -589,  -589,  -590,  -295,  -255,  -590,  -256,  -590,  -261,
  -590,  -265,  -590,  -563,  -565,    -9,  -579,  -590,   -68,  -286,
   -84,   -73,  -590,  -590,  -589,  -590,  -590,  -589,  -590,  -288,
  -590,  -461,  -462,  -590,   -80,   -85,  -590,  -590,  -590,  -590,
  -590,  -233,  -590,  -411,  -590,  -580,  -590,  -240,  -241,  -584,
  -583,  -243,  -584,  -291,  -292,  -559,  -349,   -10,   -10,  -590,
  -351,  -590,  -372,  -383,  -590,  -590,  -368,  -369,  -590,  -378,
  -380,  -590,  -385,  -487,  -492,  -590,  -520,  -590,  -529,  -590,
  -531,  -533,  -540,  -549,  -553,   -10,  -336,  -337,  -338,   -10,
  -590,  -590,  -590,  -590,   -10,  -406,  -589,  -590,  -590,  -589,
  -288,  -315,  -104,  -105,  -590,  -589,  -590,  -318,  -480,  -590,
  -590,  -590,  -324,  -518,  -328,  -576,  -577,  -580,  -425,  -440,
  -443,  -444,  -446,  -427,  -442,  -428,  -429,  -430,  -590,  -433,
  -435,  -436,  -590,  -458,    -7,   -14,  -116,   -24,  -270,  -590,
  -289,  -290,  -590,  -590,   -58,  -247,  -248,  -395,  -590,   -60,
  -398,  -590,   -56,  -396,  -590,  -590,  -569,  -570,  -569,  -570,
  -590,  -590,  -191,  -298,  -590,  -363,  -580,  -365,   -10,   -50,
  -391,   -51,  -392,   -52,  -393,   -10,  -245,  -590,  -251,  -253,
   -10,   -10,  -294,  -263,  -262,  -266,  -590,  -561,  -562,  -590,
   -12,   -68,  -590,   -76,   -82,  -590,  -569,  -570,  -589,  -573,
  -287,  -590,  -590,  -589,   -78,  -590,  -200,  -210,  -211,  -590,
  -589,  -589,  -281,  -590,  -285,  -582,  -244,  -590,  -590,  -350,
  -361,  -371,  -589,  -589,  -362,  -555,  -495,  -554,  -589,  -589,
  -543,  -589,  -590,  -288,  -526,  -590,  -590,  -538,  -590,  -589,
  -339,  -589,  -307,  -340,  -341,  -342,  -310,  -590,  -313,  -590,
  -590,  -590,  -569,  -570,  -573,  -287,  -590,  -590,  -104,  -107,
  -573,  -590,   -10,  -590,  -482,  -590,   -10,   -10,  -518,  -590,
  -491,  -496,  -555,  -555,  -501,  -503,  -503,  -503,  -517,  -520,
  -545,  -590,  -590,  -590,   -10,  -432,  -434,  -438,  -268,  -590,
  -590,  -590,   -30,  -196,   -31,  -197,   -59,   -32,  -198,   -61,
  -199,   -57,  -192,  -590,  -590,  -590,  -290,  -289,  -235,  -343,
  -590,  -580,  -590,  -590,  -246,  -263,  -590,  -590,  -257,  -267,
  -564,   -74,  -289,  -290,   -86,  -297,  -589,  -358,   -10,  -412,
  -589,  -413,  -414,  -283,  -242,  -354,  -355,  -590,  -381,  -590,
  -384,  -367,  -590,  -375,  -590,  -377,  -386,  -287,  -530,  -532,
  -536,  -590,  -541,  -590,  -356,  -590,  -590,   -10,   -10,  -312,
  -314,  -590,  -289,   -96,  -590,  -289,  -590,  -481,  -321,  -590,
  -590,  -580,  -484,  -490,  -590,  -499,  -500,  -590,  -510,  -590,
  -513,  -590,  -515,  -590,  -329,  -557,  -445,  -448,  -449,  -450,
  -451,  -590,  -269,   -28,  -194,   -29,  -195,  -590,  -590,  -590,
  -590,  -364,  -590,  -389,   -53,  -252,  -403,  -405,    -8,   -10,
  -418,  -359,  -590,  -590,  -416,  -589,  -589,  -589,  -589,  -534,
  -590,  -539,  -590,  -304,  -590,  -305,  -590,  -590,  -590,   -10,
  -316,  -319,   -10,  -325,  -327,  -590,  -497,  -555,  -502,  -503,
  -503,  -503,  -503,  -546,  -503,  -544,  -518,  -447,  -236,  -580,
  -345,  -347,  -348,  -366,  -417,   -10,  -476,  -590,  -590,  -278,
  -415,  -382,  -590,  -373,  -376,  -379,  -590,  -537,   -10,  -308,
  -311,  -266,  -589,   -10,  -590,  -483,  -498,  -590,  -506,  -590,
  -508,  -590,  -511,  -590,  -514,  -516,   -10,  -344,  -590,  -411,
  -589,  -590,  -590,  -288,  -589,  -535,  -589,  -407,  -408,  -409,
  -590,  -322,  -503,  -503,  -503,  -503,  -590,  -346,  -410,  -590,
  -569,  -570,  -573,  -287,  -374,  -357,  -317,  -590,  -504,  -507,
  -509,  -512,  -330,  -289,  -503,  -505 ]

clist = [
'13,390,5,265,265,265,603,115,115,256,260,554,504,327,720,408,310,544',
'209,209,319,12,284,337,297,297,378,209,209,209,316,13,288,288,100,359',
'360,458,103,363,863,431,517,440,445,450,777,576,577,455,730,300,12,209',
'209,297,297,99,209,209,740,280,209,367,376,836,115,752,756,266,266,266',
'110,195,395,595,599,788,613,2,115,417,418,419,420,118,118,587,859,953',
'217,500,501,502,558,561,866,103,565,282,13,960,5,962,209,209,209,209',
'13,13,421,5,663,629,14,820,364,1,862,639,415,12,918,697,267,267,267',
'194,408,12,12,397,399,372,423,406,678,263,276,277,685,498,694,909,694',
'14,290,290,690,691,505,686,321,573,392,320,323,324,580,582,370,617,680',
'682,684,436,437,697,391,624,312,555,314,361,867,316,316,369,377,362',
'868,767,983,772,621,726,942,953,422,1017,381,962,776,115,623,791,13',
'209,209,209,209,956,449,959,209,209,209,209,325,566,738,248,499,511',
'14,13,209,12,888,890,892,512,14,14,1007,760,840,922,394,265,265,931',
'788,401,638,404,12,896,265,433,629,793,794,881,757,946,736,433,703,949',
',588,,209,209,,,,15,714,912,,209,252,259,261,,540,429,434,,,522,,859',
'453,457,297,,256,,13,569,260,517,288,13,,556,15,557,545,337,297,697',
'508,266,1025,,,977,288,12,531,266,440,445,12,,526,14,280,13,103,694',
'694,280,,769,,945,371,,,,,745,1008,,14,740,730,525,12,297,,,,600,601',
',940,584,622,,,1005,,,527,509,267,732,,533,,796,322,15,267,739,209,209',
'507,510,,15,15,740,,,,513,297,,663,,708,,996,713,376,988,990,992,994',
',995,,,,708,,209,,14,,,103,290,14,,,,787,,,,,,788,,,618,806,290,,602',
'831,809,,283,811,115,,656,14,115,,,660,670,671,,,656,,,,,,316,316,,',
'1028,1029,1030,1031,708,851,,,,15,,377,,708,,1018,,,456,449,209,209',
'1035,828,,,876,,15,740,879,880,,,687,,,,,,656,656,656,645,,588,,646',
'747,,377,458,885,886,430,705,118,844,712,,118,,460,,,316,,,316,,,,,',
',697,,545,,297,,13,,700,723,,,288,545,209,297,449,209,,15,,694,,288',
'15,,,12,,,449,,209,,,848,850,,,787,,853,855,,856,841,297,13,13,,15,519',
'761,521,734,766,523,524,,,,771,316,,,316,428,939,12,12,,316,,,,13,773',
',,13,828,792,,,13,283,209,,449,209,,,,693,449,209,12,,,209,12,209,,',
'1009,12,,,,,,,821,926,,753,753,,965,,14,984,337,,,,290,588,,588,978',
',209,209,,774,725,290,209,,,,986,,209,,,,950,,951,283,,,,,283,,13,654',
',14,14,,659,13,,,377,662,13,13,545,656,297,1016,660,,656,12,,,288,,',
'834,12,297,,14,,12,12,14,,288,,,14,,,,,802,804,,894,,,807,,,,,648,457',
',787,,679,681,683,449,,874,,,,971,973,974,975,,,,,,,,,,929,588,433,',
',,209,1012,,,,13,,,,13,13,,,,,,,15,825,,,,,,115,14,12,13,,,12,12,14',
'209,209,871,,14,14,,,877,,878,,,,882,12,290,36,695,,322,,698,,,15,15',
'1024,,290,,588,,588,,,,,13,,,,934,708,,,,,36,287,287,,,15,,,,15,,12',
',695,15,,322,209,,13,13,,,903,905,,,,,588,,,366,380,,380,,,14,735,12',
'12,14,14,733,,,,,,,,,,741,,,,,900,14,753,780,,,,,297,,36,,13,,,456,967',
',36,36,,,,,,,997,,783,15,,,13,12,,13,15,785,,,,15,15,,798,14,,,,,727',
'728,,12,,,12,,13,1019,,,,,,,,,,316,,13,,,14,14,13,,749,12,,,751,695',
'322,,,759,,13,,829,12,209,830,449,,12,,,,,,,,,36,,,,12,,,208,,,839,',
',,,,,15,,36,14,15,15,,969,,,,,,,,,,,,,,,15,14,,313,14,,,,358,358,460',
',358,780,,,822,,,,,,,823,,,,14,826,827,883,,,737,,,737,,783,,14,,,,15',
'14,36,785,,902,287,36,,,358,358,358,358,14,,,,,,,,287,,,,,,,15,15,315',
',36,328,,,784,,,,,,,,,,,,,,396,,398,398,402,405,398,,,,,,380,,,,,,,',
',925,,,780,,927,780,928,780,15,780,,,970,,,901,,,,,,,,,,,955,947,15',
'380,783,15,783,,783,,,,,461,462,952,,954,,,,,322,471,,,,,15,218,,,,921',
',,,264,264,264,,15,,,,981,15,,780,307,308,309,,,,,,,,15,,,936,937,264',
'264,,,,,,,,783,,,,315,315,780,,780,785,780,,780,,,,,,,,784,,,,,1004',
',,,,,783,,783,,783,,783,,,1013,964,1014,,1015,,780,,,,,,,,,,,,506,,',
'982,,,,,,,,,,783,,,,36,,396,,,1034,287,,,,,,999,,,,,287,,,358,358,,',
',1006,,,,,1010,,,,,,,,,,,36,36,,,,,,380,,,737,627,,784,,784,,784,264',
'435,264,264,,,,454,459,,36,,,,36,,,,,36,,,218,,473,474,475,476,477,478',
'479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495',
'496,497,,,,,,,,264,264,,,,,,,784,264,,,,,,,264,,264,,,264,264,,,,,,',
',,,,,,,,36,,784,,784,,784,36,784,,,,36,36,,,,,655,,551,,,,287,,,,655',
',,,,,,,,287,,,,,784,315,315,,,,,,,,,,,,,,,719,,,,,,,,,,,,,,,,,,675,655',
'655,655,675,,,,,,,,675,675,,,,36,,,,36,36,,,,,,,,,,,,,315,,,315,36,',
',,,,,,,,358,,775,,,,,,,,,,,,,,264,,,,,,,,,,,,,,,,,,36,,,,,,,,,,,,,,',
'264,264,,454,672,435,,,,315,,,315,,36,36,,,315,,,,,,,,,,,,,,,674,,,',
',,,,,,,,,,,,,,264,,264,,264,,,,,,,,,,,36,,,264,966,,264,,,,,,,,,716',
'717,718,,,36,,,36,,,,,264,,,264,,358,,,,,,,,,,,,655,36,,,,655,,,,,,',
'837,842,36,,,,,36,,,,,,,,,,,264,,36,264,,,,,,264,,837,,837,,,,,,,,,',
',,,,,,,294,294,,,,,,294,294,294,,,,264,,,803,805,,,,,808,294,,810,358',
',672,812,,294,294,,,,,,,,,,,,,,,,,,,,264,264,,,,,,,264,,,264,,,,,920',
',,,924,,,,,,,,,,,,,264,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,264,,,',
',,,,,,,,,,,,,,,,264,,,,,,,,,,,,,,,,,,,264,904,906,,,,,,,,,,,,803,805',
'808,,,,,,,,294,,294,294,294,294,294,294,294,294,294,294,294,294,294',
'294,294,294,294,294,294,294,294,294,294,294,294,837,,,,,,,,,,,,,,,,',
',315,,,,,294,837,294,,,294,294,,,,,,,,,,294,,,,264,,,,,,,,,,,,294,,906',
'904,958,,,,,294,264,,,,,,,,,,,,,,,,,,,,,,,264,,,,,,,,294,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,294,,,,,,,,,,,,,,,264,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,294,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,294,294,294,',
',,,,,,,,,,,,,,,,,,,,,,,,,,294,,,,,,,,,,,,,,,,,,294,,294,,294,,,,,,,',
',,,,294,,,,,,,,,,,294,,,294,294,294,,,,,,,,,,,294,,,294,,,,,,,,,,,,294',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,294,,,,,,,,,,,,294,,,,294,,,,,,,,,,,,,,,,,,,,,,,294,294,,,,,,',
'294,,,294,,,294,,,,,,,,,,,,,294,,,,,,294,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,294,,,,,,,,,,,,,,,,,,,,294,,,,,,,,,,,,,,,,,,,294,,,,,,,,',
',,,,,294,294,294,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,294,,,,,,,,,,,,,,294,294,294,,,,,,294,,,,',
',,,294,,,,,,,,,,,,,,,294' ]
        racc_goto_table = arr = ::Array.new(2748, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'21,48,7,30,30,30,81,49,49,61,61,8,35,111,10,48,52,44,21,21,22,20,42',
'114,53,53,47,21,21,21,30,21,21,21,6,16,16,17,84,16,79,25,65,33,33,33',
'85,117,117,25,113,43,20,21,21,53,53,4,21,21,155,39,21,21,21,11,49,80',
'80,57,57,57,14,14,135,78,78,151,46,2,49,16,16,16,16,51,51,156,157,159',
'19,33,33,33,58,58,11,84,58,40,21,107,7,108,21,21,21,21,21,21,7,7,64',
'139,23,105,4,1,158,139,5,20,12,162,59,59,59,15,48,20,20,136,136,18,28',
'136,36,38,38,38,36,54,60,55,60,23,23,23,36,36,62,63,59,119,73,74,75',
'77,119,119,82,83,64,64,64,22,22,162,86,87,88,89,90,91,92,30,30,23,23',
'93,94,95,96,97,98,60,99,159,2,107,100,108,101,49,102,103,21,21,21,21',
'21,104,49,106,21,21,21,21,109,110,112,122,123,125,23,21,21,20,152,152',
'152,126,23,23,127,128,129,130,134,30,30,158,151,137,138,140,20,141,30',
'57,139,142,143,145,81,148,149,57,44,153,,154,,21,21,,,,24,44,105,,21',
'34,34,34,,52,19,19,,,135,,157,19,19,53,,61,,21,111,61,65,21,21,,52,24',
'52,42,114,53,162,57,57,79,,,158,21,20,43,57,33,33,20,,6,23,39,21,84',
'60,60,39,,46,,105,24,,,,,156,11,,23,155,113,4,20,53,,,,16,16,,80,21',
'47,,,158,,,40,59,59,121,,40,,139,26,24,59,121,21,21,38,38,,24,24,155',
',,,38,53,,64,,33,,85,33,21,152,152,152,152,,152,,,,33,,21,,23,,,84,23',
'23,,,,121,,,,,,151,,,84,35,23,,4,44,35,,9,35,49,,61,23,49,,,61,22,22',
',,61,,,,,,30,30,,,152,152,152,152,33,117,,,,24,,23,,33,,10,,,24,49,21',
'21,152,65,,,8,,24,155,8,8,,,52,,,,,,61,61,61,14,,154,,14,154,,23,17',
'117,117,26,22,51,58,22,,51,,26,,,30,,,30,,,,,,,162,,42,,53,,21,,7,52',
',,21,42,21,53,49,21,,24,,60,,21,24,,,20,,,49,,21,,,119,119,,,121,,119',
'119,,119,25,53,21,21,,24,26,22,26,21,22,26,26,,,,22,30,,,30,9,78,20',
'20,,30,,,,21,16,,,21,65,52,,,21,9,21,,49,21,,,,59,49,21,20,,,21,20,21',
',,81,20,,,,,,,111,121,,84,84,,78,,23,8,114,,,,23,154,,154,78,,21,21',
',84,59,23,21,,,,117,,21,,,,121,,121,9,,,,,9,,21,34,,23,23,,34,21,,,23',
'34,21,21,42,61,53,8,61,,61,20,,,21,,,42,20,53,,23,,20,20,23,,21,,,23',
',,,,19,19,,48,,,19,,,,,26,19,,121,,34,34,34,49,,16,,,,119,119,119,119',
',,,,,,,,,154,154,57,,,,21,121,,,,21,,,,21,21,,,,,,,24,59,,,,,,49,23',
'20,21,,,20,20,23,21,21,57,,23,23,,,84,,84,,,,84,20,23,45,26,,26,,26',
',,24,24,119,,23,,154,,154,,,,,21,,,,16,33,,,,,45,45,45,,,24,,,,24,,20',
',26,24,,26,21,,21,21,,,19,19,,,,,154,,,45,45,,45,,,23,116,20,20,23,23',
'120,,,,,,,,,,120,,,,,23,23,84,147,,,,,53,,45,,21,,,24,21,,45,45,,,,',
',,52,,116,24,,,21,20,,21,24,120,,,,24,24,,26,23,,,,,9,9,,20,,,20,,21',
'22,,,,,,,,,,30,,21,,,23,23,21,,9,20,,,9,26,26,,,9,,21,,26,20,21,26,49',
',20,,,,,,,,,45,,,,20,,,27,,,26,,,,,,,24,,45,23,24,24,,23,,,,,,,,,,,',
',,,24,23,,27,23,,,,27,27,26,,27,147,,,9,,,,,,,9,,,,23,9,9,26,,,118,',
',118,,116,,23,,,,24,23,45,120,,26,45,45,,,27,27,27,27,23,,,,,,,,45,',
',,,,,24,24,56,,45,56,,,118,,,,,,,,,,,,,,56,,56,56,56,56,56,,,,,,45,',
',,,,,,,120,,,147,,120,147,120,147,24,147,,,24,,,9,,,,,,,,,,,26,116,24',
'45,116,24,116,,116,,,,,27,27,120,,120,,,,,26,27,,,,,24,29,,,,9,,,,29',
'29,29,,24,,,,26,24,,147,29,29,29,,,,,,,,24,,,9,9,29,29,,,,,,,,116,,',
',56,56,147,,147,120,147,,147,,,,,,,,118,,,,,120,,,,,,116,,116,,116,',
'116,,,120,9,120,,120,,147,,,,,,,,,,,,56,,,9,,,,,,,,,,116,,,,45,,56,',
',120,45,,,,,,9,,,,,45,,,27,27,,,,9,,,,,9,,,,,,,,,,,45,45,,,,,,45,,,118',
'27,,118,,118,,118,29,29,29,29,,,,29,29,,45,,,,45,,,,,45,,,29,,29,29',
'29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29',
',,,,,,,29,29,,,,,,,118,29,,,,,,,29,,29,,,29,29,,,,,,,,,,,,,,,45,,118',
',118,,118,45,118,,,,45,45,,,,,56,,29,,,,45,,,,56,,,,,,,,,45,,,,,118',
'56,56,,,,,,,,,,,,,,,27,,,,,,,,,,,,,,,,,,56,56,56,56,56,,,,,,,,56,56',
',,,45,,,,45,45,,,,,,,,,,,,,56,,,56,45,,,,,,,,,,27,,27,,,,,,,,,,,,,,29',
',,,,,,,,,,,,,,,,,45,,,,,,,,,,,,,,,29,29,,29,29,29,,,,56,,,56,,45,45',
',,56,,,,,,,,,,,,,,,29,,,,,,,,,,,,,,,,,,29,,29,,29,,,,,,,,,,,45,,,29',
'45,,29,,,,,,,,,29,29,29,,,45,,,45,,,,,29,,,29,,27,,,,,,,,,,,,56,45,',
',,56,,,,,,,56,56,45,,,,,45,,,,,,,,,,,29,,45,29,,,,,,29,,56,,56,,,,,',
',,,,,,,,,,,37,37,,,,,,37,37,37,,,,29,,,29,29,,,,,29,37,,29,27,,29,29',
',37,37,,,,,,,,,,,,,,,,,,,,29,29,,,,,,,29,,,29,,,,,56,,,,56,,,,,,,,,',
',,,29,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,,,,,,,,,,,,,,,,,,,29',
',,,,,,,,,,,,,,,,,,29,29,29,,,,,,,,,,,,29,29,29,,,,,,,,37,,37,37,37,37',
'37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,56,,',
',,,,,,,,,,,,,,,56,,,,,37,56,37,,,37,37,,,,,,,,,,37,,,,29,,,,,,,,,,,',
'37,,29,29,29,,,,,37,29,,,,,,,,,,,,,,,,,,,,,,,29,,,,,,,,37,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,37,,,,,,,,,,,,,,,29,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,37,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,37,37,37,,,,,,',
',,,,,,,,,,,,,,,,,,,,,37,,,,,,,,,,,,,,,,,,37,,37,,37,,,,,,,,,,,,37,,',
',,,,,,,,37,,,37,37,37,,,,,,,,,,,37,,,37,,,,,,,,,,,,37,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,37,,,,,',
',,,,,,37,,,,37,,,,,,,,,,,,,,,,,,,,,,,37,37,,,,,,,37,,,37,,,37,,,,,,',
',,,,,,37,,,,,,37,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,37,,,,,,,,,,',
',,,,,,,,,37,,,,,,,,,,,,,,,,,,,37,,,,,,,,,,,,,,37,37,37,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,37,',
',,,,,,,,,,,,37,37,37,,,,,,37,,,,,,,,37,,,,,,,,,,,,,,,37' ]
        racc_goto_check = arr = ::Array.new(2748, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   117,    79,   nil,    54,    20,    31,     2,  -301,   390,
  -539,  -655,  -714,   nil,    65,   119,   -23,  -168,    70,    71,
    21,     0,   -34,   114,   258,  -156,   302,  1002,    24,  1205,
   -24,   nil,   nil,  -158,   239,  -240,  -363,  1809,   110,    30,
    68,   nil,   -10,    18,  -284,   817,  -296,   -38,   -65,     0,
   nil,    78,   -26,    -8,  -105,  -675,  1073,    42,  -223,    97,
  -374,   -15,  -103,  -354,  -338,  -225,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    88,   100,   100,   nil,   100,  -284,  -709,
  -533,  -358,    97,  -217,    35,  -577,   102,  -222,   118,  -142,
   119,   113,  -578,   118,  -576,  -430,  -758,  -434,  -195,  -692,
   125,  -430,  -196,  -429,  -693,  -561,  -707,  -809,  -807,   151,
  -116,   -44,  -369,  -521,   -34,   nil,   312,  -285,   510,  -177,
   321,  -219,   190,   -35,   nil,   -44,   -37,  -758,  -380,  -495,
  -613,   nil,   nil,   nil,   156,     0,    55,   155,  -167,  -282,
   156,  -556,  -390,  -390,   nil,  -535,   nil,   287,  -639,  -329,
   nil,  -546,  -567,  -638,   -99,  -519,  -263,  -658,  -630,  -800,
   nil,   nil,  -395 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,     4,   365,   279,   nil,   553,
   nil,   864,   nil,   278,   nil,   nil,   nil,    10,    11,    17,
   214,   306,   nil,   212,   213,   nil,   270,    16,   nil,    20,
    21,    22,    23,   711,   nil,   nil,   nil,    24,   nil,    30,
   nil,    32,    35,    34,   nil,   210,   375,   nil,   117,   443,
   116,    70,   819,    43,   nil,   nil,   572,   317,   nil,   318,
   268,   441,   nil,   nil,   657,   515,   254,    44,    45,    46,
    47,    48,    49,    50,   nil,   255,    56,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   596,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   344,   nil,
   nil,   nil,   330,   329,   731,   332,   333,   nil,   334,   nil,
   335,   336,   nil,   nil,   447,   nil,   nil,   nil,   nil,   nil,
   nil,    69,    71,    72,    73,   nil,   nil,   nil,   nil,   634,
   nil,   nil,   nil,   nil,   407,   779,   340,   342,   781,   343,
   782,   948,   nil,   786,   349,   351,   nil,   590,   591,   790,
   354,   357,   273 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 141, :_reduce_none,
  2, 142, :_reduce_2,
  0, 143, :_reduce_3,
  1, 143, :_reduce_4,
  3, 143, :_reduce_5,
  1, 145, :_reduce_none,
  4, 145, :_reduce_7,
  4, 148, :_reduce_8,
  2, 149, :_reduce_9,
  0, 153, :_reduce_10,
  1, 153, :_reduce_11,
  3, 153, :_reduce_12,
  0, 168, :_reduce_13,
  4, 147, :_reduce_14,
  3, 147, :_reduce_15,
  3, 147, :_reduce_none,
  3, 147, :_reduce_17,
  2, 147, :_reduce_18,
  3, 147, :_reduce_19,
  3, 147, :_reduce_20,
  3, 147, :_reduce_21,
  3, 147, :_reduce_22,
  3, 147, :_reduce_23,
  4, 147, :_reduce_none,
  1, 147, :_reduce_none,
  3, 147, :_reduce_26,
  3, 147, :_reduce_27,
  6, 147, :_reduce_none,
  6, 147, :_reduce_none,
  5, 147, :_reduce_30,
  5, 147, :_reduce_none,
  5, 147, :_reduce_none,
  3, 147, :_reduce_none,
  3, 147, :_reduce_34,
  3, 147, :_reduce_35,
  3, 147, :_reduce_36,
  1, 147, :_reduce_none,
  3, 157, :_reduce_38,
  3, 157, :_reduce_39,
  1, 167, :_reduce_none,
  3, 167, :_reduce_41,
  3, 167, :_reduce_42,
  2, 167, :_reduce_43,
  2, 167, :_reduce_44,
  1, 167, :_reduce_none,
  1, 156, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 171, :_reduce_none,
  4, 171, :_reduce_none,
  4, 171, :_reduce_none,
  4, 171, :_reduce_none,
  4, 175, :_reduce_53,
  2, 170, :_reduce_54,
  3, 170, :_reduce_55,
  4, 170, :_reduce_56,
  5, 170, :_reduce_57,
  4, 170, :_reduce_58,
  5, 170, :_reduce_59,
  4, 170, :_reduce_60,
  5, 170, :_reduce_61,
  2, 170, :_reduce_62,
  2, 170, :_reduce_63,
  2, 170, :_reduce_64,
  2, 170, :_reduce_65,
  2, 170, :_reduce_66,
  1, 158, :_reduce_67,
  3, 158, :_reduce_68,
  1, 180, :_reduce_69,
  3, 180, :_reduce_70,
  1, 179, :_reduce_71,
  2, 179, :_reduce_72,
  3, 179, :_reduce_73,
  5, 179, :_reduce_74,
  2, 179, :_reduce_75,
  4, 179, :_reduce_76,
  2, 179, :_reduce_77,
  4, 179, :_reduce_78,
  1, 179, :_reduce_79,
  3, 179, :_reduce_80,
  1, 182, :_reduce_81,
  3, 182, :_reduce_82,
  2, 181, :_reduce_83,
  3, 181, :_reduce_84,
  1, 184, :_reduce_85,
  3, 184, :_reduce_86,
  1, 183, :_reduce_87,
  4, 183, :_reduce_88,
  3, 183, :_reduce_89,
  3, 183, :_reduce_none,
  3, 183, :_reduce_none,
  3, 183, :_reduce_none,
  2, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 164, :_reduce_95,
  4, 164, :_reduce_96,
  4, 164, :_reduce_97,
  3, 164, :_reduce_98,
  3, 164, :_reduce_99,
  3, 164, :_reduce_100,
  3, 164, :_reduce_101,
  2, 164, :_reduce_102,
  1, 164, :_reduce_none,
  1, 186, :_reduce_none,
  2, 187, :_reduce_105,
  1, 187, :_reduce_106,
  3, 187, :_reduce_107,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_111,
  1, 188, :_reduce_112,
  1, 154, :_reduce_113,
  1, 154, :_reduce_none,
  1, 155, :_reduce_115,
  3, 155, :_reduce_116,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  3, 169, :_reduce_191,
  5, 169, :_reduce_192,
  3, 169, :_reduce_193,
  6, 169, :_reduce_194,
  6, 169, :_reduce_195,
  5, 169, :_reduce_196,
  5, 169, :_reduce_none,
  5, 169, :_reduce_none,
  5, 169, :_reduce_none,
  4, 169, :_reduce_none,
  3, 169, :_reduce_none,
  3, 169, :_reduce_202,
  3, 169, :_reduce_203,
  3, 169, :_reduce_204,
  3, 169, :_reduce_205,
  3, 169, :_reduce_206,
  3, 169, :_reduce_207,
  3, 169, :_reduce_208,
  3, 169, :_reduce_209,
  4, 169, :_reduce_210,
  4, 169, :_reduce_211,
  2, 169, :_reduce_212,
  2, 169, :_reduce_213,
  3, 169, :_reduce_214,
  3, 169, :_reduce_215,
  3, 169, :_reduce_216,
  3, 169, :_reduce_217,
  3, 169, :_reduce_218,
  3, 169, :_reduce_219,
  3, 169, :_reduce_220,
  3, 169, :_reduce_221,
  3, 169, :_reduce_222,
  3, 169, :_reduce_223,
  3, 169, :_reduce_224,
  3, 169, :_reduce_225,
  3, 169, :_reduce_226,
  2, 169, :_reduce_227,
  2, 169, :_reduce_228,
  3, 169, :_reduce_229,
  3, 169, :_reduce_230,
  3, 169, :_reduce_231,
  3, 169, :_reduce_232,
  3, 169, :_reduce_233,
  0, 194, :_reduce_234,
  0, 195, :_reduce_235,
  7, 169, :_reduce_236,
  1, 169, :_reduce_none,
  1, 166, :_reduce_none,
  1, 162, :_reduce_239,
  2, 162, :_reduce_240,
  2, 162, :_reduce_241,
  4, 162, :_reduce_242,
  2, 162, :_reduce_243,
  3, 162, :_reduce_244,
  3, 201, :_reduce_245,
  2, 203, :_reduce_none,
  1, 204, :_reduce_247,
  1, 204, :_reduce_none,
  1, 202, :_reduce_249,
  1, 202, :_reduce_none,
  2, 202, :_reduce_251,
  4, 202, :_reduce_252,
  2, 202, :_reduce_253,
  1, 178, :_reduce_254,
  2, 178, :_reduce_255,
  2, 178, :_reduce_256,
  4, 178, :_reduce_257,
  1, 178, :_reduce_258,
  0, 206, :_reduce_259,
  2, 174, :_reduce_260,
  2, 200, :_reduce_261,
  2, 205, :_reduce_262,
  0, 205, :_reduce_263,
  1, 197, :_reduce_264,
  2, 197, :_reduce_265,
  3, 197, :_reduce_266,
  4, 197, :_reduce_267,
  3, 165, :_reduce_268,
  4, 165, :_reduce_269,
  2, 165, :_reduce_270,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  0, 228, :_reduce_280,
  4, 193, :_reduce_281,
  0, 229, :_reduce_282,
  5, 193, :_reduce_283,
  0, 230, :_reduce_284,
  4, 193, :_reduce_285,
  3, 193, :_reduce_286,
  3, 193, :_reduce_287,
  2, 193, :_reduce_288,
  4, 193, :_reduce_289,
  4, 193, :_reduce_290,
  3, 193, :_reduce_291,
  3, 193, :_reduce_292,
  1, 193, :_reduce_293,
  4, 193, :_reduce_294,
  3, 193, :_reduce_295,
  1, 193, :_reduce_296,
  5, 193, :_reduce_297,
  4, 193, :_reduce_298,
  3, 193, :_reduce_299,
  2, 193, :_reduce_300,
  1, 193, :_reduce_none,
  2, 193, :_reduce_302,
  2, 193, :_reduce_303,
  6, 193, :_reduce_304,
  6, 193, :_reduce_305,
  0, 231, :_reduce_306,
  0, 232, :_reduce_307,
  7, 193, :_reduce_308,
  0, 233, :_reduce_309,
  0, 234, :_reduce_310,
  7, 193, :_reduce_311,
  5, 193, :_reduce_312,
  4, 193, :_reduce_313,
  5, 193, :_reduce_314,
  0, 235, :_reduce_315,
  0, 236, :_reduce_316,
  9, 193, :_reduce_317,
  0, 237, :_reduce_318,
  6, 193, :_reduce_319,
  0, 238, :_reduce_320,
  0, 239, :_reduce_321,
  8, 193, :_reduce_322,
  0, 240, :_reduce_323,
  0, 241, :_reduce_324,
  6, 193, :_reduce_325,
  0, 242, :_reduce_326,
  6, 193, :_reduce_327,
  0, 243, :_reduce_328,
  0, 244, :_reduce_329,
  9, 193, :_reduce_330,
  1, 193, :_reduce_331,
  1, 193, :_reduce_332,
  1, 193, :_reduce_333,
  1, 193, :_reduce_none,
  1, 161, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  2, 218, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 245, :_reduce_343,
  4, 245, :_reduce_344,
  1, 246, :_reduce_345,
  3, 246, :_reduce_346,
  1, 247, :_reduce_347,
  1, 247, :_reduce_none,
  2, 217, :_reduce_349,
  3, 249, :_reduce_350,
  2, 249, :_reduce_351,
  1, 249, :_reduce_352,
  1, 249, :_reduce_none,
  3, 250, :_reduce_354,
  3, 250, :_reduce_355,
  1, 219, :_reduce_356,
  5, 219, :_reduce_357,
  1, 151, :_reduce_none,
  2, 151, :_reduce_359,
  1, 252, :_reduce_360,
  3, 252, :_reduce_361,
  3, 253, :_reduce_362,
  1, 176, :_reduce_none,
  3, 176, :_reduce_364,
  1, 176, :_reduce_365,
  4, 176, :_reduce_366,
  4, 254, :_reduce_367,
  2, 254, :_reduce_368,
  2, 254, :_reduce_369,
  1, 254, :_reduce_370,
  2, 259, :_reduce_371,
  1, 259, :_reduce_372,
  6, 251, :_reduce_373,
  8, 251, :_reduce_374,
  4, 251, :_reduce_375,
  6, 251, :_reduce_376,
  4, 251, :_reduce_377,
  2, 251, :_reduce_378,
  6, 251, :_reduce_379,
  2, 251, :_reduce_380,
  4, 251, :_reduce_381,
  6, 251, :_reduce_382,
  2, 251, :_reduce_383,
  4, 251, :_reduce_384,
  2, 251, :_reduce_385,
  4, 251, :_reduce_386,
  1, 251, :_reduce_387,
  0, 263, :_reduce_388,
  5, 262, :_reduce_389,
  2, 172, :_reduce_390,
  4, 172, :_reduce_none,
  4, 172, :_reduce_none,
  4, 172, :_reduce_none,
  2, 216, :_reduce_394,
  4, 216, :_reduce_395,
  4, 216, :_reduce_396,
  3, 216, :_reduce_397,
  4, 216, :_reduce_398,
  3, 216, :_reduce_399,
  2, 216, :_reduce_400,
  1, 216, :_reduce_401,
  0, 265, :_reduce_402,
  5, 215, :_reduce_403,
  0, 266, :_reduce_404,
  5, 215, :_reduce_405,
  0, 268, :_reduce_406,
  6, 221, :_reduce_407,
  1, 267, :_reduce_408,
  1, 267, :_reduce_none,
  6, 150, :_reduce_410,
  0, 150, :_reduce_411,
  1, 269, :_reduce_412,
  1, 269, :_reduce_none,
  1, 269, :_reduce_none,
  2, 270, :_reduce_415,
  1, 270, :_reduce_416,
  2, 152, :_reduce_417,
  1, 152, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 208, :_reduce_422,
  1, 273, :_reduce_none,
  2, 273, :_reduce_424,
  3, 274, :_reduce_425,
  1, 274, :_reduce_426,
  3, 209, :_reduce_427,
  3, 210, :_reduce_428,
  3, 211, :_reduce_429,
  3, 211, :_reduce_430,
  1, 277, :_reduce_431,
  3, 277, :_reduce_432,
  1, 278, :_reduce_433,
  2, 278, :_reduce_434,
  3, 212, :_reduce_435,
  3, 212, :_reduce_436,
  1, 280, :_reduce_437,
  3, 280, :_reduce_438,
  1, 275, :_reduce_439,
  2, 275, :_reduce_440,
  1, 276, :_reduce_441,
  2, 276, :_reduce_442,
  1, 279, :_reduce_443,
  0, 282, :_reduce_444,
  3, 279, :_reduce_445,
  0, 283, :_reduce_446,
  4, 279, :_reduce_447,
  1, 281, :_reduce_448,
  1, 281, :_reduce_449,
  1, 281, :_reduce_450,
  1, 281, :_reduce_none,
  2, 191, :_reduce_452,
  1, 191, :_reduce_453,
  1, 284, :_reduce_none,
  1, 284, :_reduce_none,
  1, 284, :_reduce_none,
  1, 284, :_reduce_none,
  3, 272, :_reduce_458,
  1, 271, :_reduce_459,
  1, 271, :_reduce_460,
  2, 271, :_reduce_461,
  2, 271, :_reduce_462,
  2, 271, :_reduce_463,
  2, 271, :_reduce_464,
  1, 185, :_reduce_465,
  1, 185, :_reduce_466,
  1, 185, :_reduce_467,
  1, 185, :_reduce_468,
  1, 185, :_reduce_469,
  1, 185, :_reduce_470,
  1, 185, :_reduce_471,
  1, 185, :_reduce_472,
  1, 185, :_reduce_473,
  1, 185, :_reduce_474,
  1, 185, :_reduce_475,
  1, 213, :_reduce_476,
  1, 160, :_reduce_477,
  1, 163, :_reduce_478,
  1, 163, :_reduce_none,
  1, 223, :_reduce_480,
  3, 223, :_reduce_481,
  2, 223, :_reduce_482,
  4, 225, :_reduce_483,
  2, 225, :_reduce_484,
  1, 286, :_reduce_none,
  1, 286, :_reduce_none,
  2, 256, :_reduce_487,
  1, 256, :_reduce_488,
  1, 287, :_reduce_489,
  2, 288, :_reduce_490,
  1, 288, :_reduce_491,
  2, 289, :_reduce_492,
  1, 289, :_reduce_493,
  1, 255, :_reduce_494,
  3, 255, :_reduce_495,
  1, 290, :_reduce_496,
  3, 290, :_reduce_497,
  4, 291, :_reduce_498,
  2, 291, :_reduce_499,
  2, 291, :_reduce_500,
  1, 291, :_reduce_501,
  2, 292, :_reduce_502,
  0, 292, :_reduce_503,
  6, 285, :_reduce_504,
  8, 285, :_reduce_505,
  4, 285, :_reduce_506,
  6, 285, :_reduce_507,
  4, 285, :_reduce_508,
  6, 285, :_reduce_509,
  2, 285, :_reduce_510,
  4, 285, :_reduce_511,
  6, 285, :_reduce_512,
  2, 285, :_reduce_513,
  4, 285, :_reduce_514,
  2, 285, :_reduce_515,
  4, 285, :_reduce_516,
  1, 285, :_reduce_517,
  0, 285, :_reduce_518,
  1, 294, :_reduce_none,
  1, 294, :_reduce_520,
  1, 248, :_reduce_521,
  1, 248, :_reduce_522,
  1, 248, :_reduce_523,
  1, 248, :_reduce_524,
  1, 295, :_reduce_525,
  3, 295, :_reduce_526,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 297, :_reduce_529,
  3, 297, :_reduce_530,
  1, 298, :_reduce_531,
  3, 298, :_reduce_532,
  1, 296, :_reduce_none,
  4, 296, :_reduce_534,
  6, 296, :_reduce_535,
  3, 296, :_reduce_536,
  5, 296, :_reduce_537,
  2, 296, :_reduce_538,
  4, 296, :_reduce_539,
  1, 296, :_reduce_540,
  3, 296, :_reduce_541,
  1, 260, :_reduce_542,
  3, 260, :_reduce_543,
  3, 299, :_reduce_544,
  1, 293, :_reduce_545,
  3, 293, :_reduce_546,
  1, 300, :_reduce_none,
  1, 300, :_reduce_none,
  2, 261, :_reduce_549,
  1, 261, :_reduce_550,
  1, 301, :_reduce_none,
  1, 301, :_reduce_none,
  2, 258, :_reduce_553,
  2, 257, :_reduce_554,
  0, 257, :_reduce_555,
  1, 226, :_reduce_556,
  4, 226, :_reduce_557,
  0, 214, :_reduce_558,
  2, 214, :_reduce_559,
  1, 199, :_reduce_560,
  3, 199, :_reduce_561,
  3, 302, :_reduce_562,
  2, 302, :_reduce_563,
  4, 302, :_reduce_564,
  2, 302, :_reduce_565,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 173, :_reduce_none,
  1, 173, :_reduce_none,
  1, 173, :_reduce_none,
  1, 173, :_reduce_none,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  0, 144, :_reduce_none,
  1, 144, :_reduce_none,
  0, 192, :_reduce_none,
  1, 192, :_reduce_none,
  0, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 146, :_reduce_none,
  2, 146, :_reduce_none,
  0, 196, :_reduce_589 ]

racc_reduce_n = 590

racc_shift_n = 1036

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :tIDENTIFIER => 50,
  :tFID => 51,
  :tGVAR => 52,
  :tIVAR => 53,
  :tCONSTANT => 54,
  :tLABEL => 55,
  :tCVAR => 56,
  :tNTH_REF => 57,
  :tBACK_REF => 58,
  :tSTRING_CONTENT => 59,
  :tINTEGER => 60,
  :tFLOAT => 61,
  :tREGEXP_END => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tPOW => 65,
  :tCMP => 66,
  :tEQ => 67,
  :tEQQ => 68,
  :tNEQ => 69,
  :tGEQ => 70,
  :tLEQ => 71,
  :tANDOP => 72,
  :tOROP => 73,
  :tMATCH => 74,
  :tNMATCH => 75,
  :tJSDOT => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tRBRACK => 92,
  :tLBRACE => 93,
  :tLBRACE_ARG => 94,
  :tSTAR => 95,
  :tSTAR2 => 96,
  :tAMPER => 97,
  :tAMPER2 => 98,
  :tTILDE => 99,
  :tPERCENT => 100,
  :tDIVIDE => 101,
  :tPLUS => 102,
  :tMINUS => 103,
  :tLT => 104,
  :tGT => 105,
  :tPIPE => 106,
  :tBANG => 107,
  :tCARET => 108,
  :tLCURLY => 109,
  :tRCURLY => 110,
  :tBACK_REF2 => 111,
  :tSYMBEG => 112,
  :tSTRING_BEG => 113,
  :tXSTRING_BEG => 114,
  :tREGEXP_BEG => 115,
  :tWORDS_BEG => 116,
  :tAWORDS_BEG => 117,
  :tSTRING_DBEG => 118,
  :tSTRING_DVAR => 119,
  :tSTRING_END => 120,
  :tSTRING => 121,
  :tSYMBOL => 122,
  :tNL => 123,
  :tEH => 124,
  :tCOLON => 125,
  :tCOMMA => 126,
  :tSPACE => 127,
  :tSEMI => 128,
  :tLAMBDA => 129,
  :tLAMBEG => 130,
  :tLBRACK2 => 131,
  :tLBRACK => 132,
  :tJSLBRACK => 133,
  :tDSTAR => 134,
  :tLABEL_END => 135,
  :tEQL => 136,
  :tLOWEST => 137,
  "-@NUM" => 138,
  "+@NUM" => 139 }

racc_nt_base = 140

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tJSDOT",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tAWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tLBRACK2",
  "tLBRACK",
  "tJSLBRACK",
  "tDSTAR",
  "tLABEL_END",
  "tEQL",
  "tLOWEST",
  "\"-@NUM\"",
  "\"+@NUM\"",
  "$start",
  "program",
  "top_compstmt",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "aref_args",
  "backref",
  "lhs",
  "mrhs",
  "arg_value",
  "expr",
  "@1",
  "arg",
  "command",
  "block_command",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_var",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_entry",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "symbol",
  "opt_nl",
  "primary",
  "@2",
  "@3",
  "none",
  "args",
  "trailer",
  "assocs",
  "block_arg",
  "paren_args",
  "opt_call_args",
  "rparen",
  "opt_paren_args",
  "opt_block_arg",
  "@4",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "awords",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@5",
  "@6",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "block_param",
  "f_block_optarg",
  "f_block_opt",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "f_arg",
  "f_rest_arg",
  "do_block",
  "@22",
  "operation3",
  "@23",
  "@24",
  "cases",
  "@25",
  "exc_list",
  "exc_var",
  "numeric",
  "dsym",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "@26",
  "@27",
  "sym",
  "f_args",
  "kwrest_mark",
  "f_label",
  "f_kw",
  "f_block_kw",
  "f_kwarg",
  "args_tail",
  "opt_args_tail",
  "f_optarg",
  "f_norm_arg",
  "f_arg_item",
  "f_margs",
  "f_marg",
  "f_marg_list",
  "f_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
                      result = new_compstmt val[0]
                    
    result
end

def _reduce_3(val, _values, result)
                      result = new_block
                    
    result
end

def _reduce_4(val, _values, result)
                      result = new_block val[0]
                    
    result
end

def _reduce_5(val, _values, result)
                      val[0] << val[2]
                      result = val[0]
                    
    result
end

# reduce 6 omitted

def _reduce_7(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_8(val, _values, result)
                      result = new_body(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_9(val, _values, result)
                      result = new_compstmt val[0]
                    
    result
end

def _reduce_10(val, _values, result)
                      result = new_block
                    
    result
end

def _reduce_11(val, _values, result)
                      result = new_block val[0]
                    
    result
end

def _reduce_12(val, _values, result)
                      val[0] << val[2]
                      result = val[0]
                    
    result
end

def _reduce_13(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_14(val, _values, result)
                      result = new_alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_15(val, _values, result)
                      result = s(:valias, value(val[1]).to_sym, value(val[2]).to_sym)
                    
    result
end

# reduce 16 omitted

def _reduce_17(val, _values, result)
                      result = s(:valias, value(val[1]).to_sym, value(val[2]).to_sym)
                    
    result
end

def _reduce_18(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_19(val, _values, result)
                      result = new_if(val[1], val[2], val[0], nil)
                    
    result
end

def _reduce_20(val, _values, result)
                      result = new_if(val[1], val[2], nil, val[0])
                    
    result
end

def _reduce_21(val, _values, result)
                      result = new_while(val[1], val[2], val[0])
                    
    result
end

def _reduce_22(val, _values, result)
                      result = new_until(val[1], val[2], val[0])
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_rescue_mod(val[1], val[0], val[2])
                    
    result
end

# reduce 24 omitted

# reduce 25 omitted

def _reduce_26(val, _values, result)
                      result = s(:masgn, val[0], s(:to_ary, val[2]))
                    
    result
end

def _reduce_27(val, _values, result)
                      result = new_op_asgn val[1], val[0], val[2]
                    
    result
end

# reduce 28 omitted

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = s(:op_asgn2, val[0], op_to_setter(val[2]), value(val[3]).to_sym, val[4])
                    
    result
end

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

def _reduce_34(val, _values, result)
                      result = new_assign val[0], val[1], s(:svalue, val[2])
                    
    result
end

def _reduce_35(val, _values, result)
                      result = s(:masgn, val[0], s(:to_ary, val[2]))
                    
    result
end

def _reduce_36(val, _values, result)
                      result = s(:masgn, val[0], val[2])
                    
    result
end

# reduce 37 omitted

def _reduce_38(val, _values, result)
                      result = new_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = new_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = s(:and, val[0], val[2])
                    
    result
end

def _reduce_42(val, _values, result)
                      result = s(:or, val[0], val[2])
                    
    result
end

def _reduce_43(val, _values, result)
                      result = new_unary_call(['!', []], val[1])
                    
    result
end

def _reduce_44(val, _values, result)
                      result = new_unary_call(val[0], val[1])
                    
    result
end

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      result = new_iter(val[1], val[2])
                    
    result
end

def _reduce_54(val, _values, result)
                      result = new_call(nil, val[0], val[1])
                    
    result
end

def _reduce_55(val, _values, result)
                      result = new_call(nil, val[0], val[1]) << val[2]
                    
    result
end

def _reduce_56(val, _values, result)
                      result = new_js_call(val[0], val[2], val[3])
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_js_call(val[0], val[2], val[3]) << val[4]
                    
    result
end

def _reduce_58(val, _values, result)
                      result = new_call(val[0], val[2], val[3])
                    
    result
end

def _reduce_59(val, _values, result)
                      result = new_call(val[0], val[2], val[3]) << val[4]
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_call(val[0], val[2], val[3])
                    
    result
end

def _reduce_61(val, _values, result)
                      result = new_call(val[0], val[2], val[3]) << val[4]
                    
    result
end

def _reduce_62(val, _values, result)
                      result = new_super(val[0], val[1])
                    
    result
end

def _reduce_63(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_64(val, _values, result)
                      result = new_return(val[0], val[1])
                    
    result
end

def _reduce_65(val, _values, result)
                      result = new_break(val[0], val[1])
                    
    result
end

def _reduce_66(val, _values, result)
                      result = new_next(val[0], val[1])
                    
    result
end

def _reduce_67(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_68(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_69(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_70(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_71(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_72(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_73(val, _values, result)
                      result = val[0] << s(:splat, val[2])
                    
    result
end

def _reduce_74(val, _values, result)
                     result = (val[0] << s(:splat, val[2])).concat(val[4].children)
                   
    result
end

def _reduce_75(val, _values, result)
                      result = val[0] << s(:splat)
                    
    result
end

def _reduce_76(val, _values, result)
                      result = (val[0] << s(:splat)).concat(val[3].children)
                    
    result
end

def _reduce_77(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_78(val, _values, result)
                      result = s(:array, s(:splat, val[1])).concat(val[3].children)
                    
    result
end

def _reduce_79(val, _values, result)
                      result = s(:array, s(:splat))
                    
    result
end

def _reduce_80(val, _values, result)
                      result = s(:array, s(:splat)).concat(val[2].children)
                    
    result
end

def _reduce_81(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_82(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_83(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_84(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_86(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_87(val, _values, result)
                      result = new_assignable val[0]
                    
    result
end

def _reduce_88(val, _values, result)
                      args = val[2] ? val[2] : []
                      result = s(:attrasgn, val[0], :[]=, s(:arglist, *args))
                    
    result
end

def _reduce_89(val, _values, result)
                      result = new_call val[0], val[2], []
                    
    result
end

# reduce 90 omitted

# reduce 91 omitted

# reduce 92 omitted

# reduce 93 omitted

# reduce 94 omitted

def _reduce_95(val, _values, result)
                      result = new_assignable val[0]
                    
    result
end

def _reduce_96(val, _values, result)
                      result = new_js_attrasgn(val[0], val[2])
                    
    result
end

def _reduce_97(val, _values, result)
                      result = new_attrasgn(val[0], :[]=, val[2])
                    
    result
end

def _reduce_98(val, _values, result)
                      result = new_attrasgn(val[0], op_to_setter(val[2]))
                    
    result
end

def _reduce_99(val, _values, result)
                      result = new_attrasgn(val[0], op_to_setter(val[2]))
                    
    result
end

def _reduce_100(val, _values, result)
                      result = new_attrasgn(val[0], op_to_setter(val[2]))
                    
    result
end

def _reduce_101(val, _values, result)
                      result = new_colon2(val[0], val[1], val[2])
                    
    result
end

def _reduce_102(val, _values, result)
                      result = new_colon3(val[0], val[1])
                    
    result
end

# reduce 103 omitted

# reduce 104 omitted

def _reduce_105(val, _values, result)
                      result = new_colon3(val[0], val[1])
                    
    result
end

def _reduce_106(val, _values, result)
                      result = new_const(val[0])
                    
    result
end

def _reduce_107(val, _values, result)
                      result = new_colon2(val[0], val[1], val[2])
                    
    result
end

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

def _reduce_111(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_112(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_113(val, _values, result)
                      result = new_sym(val[0])
                    
    result
end

# reduce 114 omitted

def _reduce_115(val, _values, result)
                      result = s(:undef, val[0])
                    
    result
end

def _reduce_116(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

def _reduce_191(val, _values, result)
                      result = new_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_192(val, _values, result)
                      result = new_assign val[0], val[1], s(:rescue_mod, val[2], val[4])
                    
    result
end

def _reduce_193(val, _values, result)
                      result = new_op_asgn val[1], val[0], val[2]
                    
    result
end

def _reduce_194(val, _values, result)
                      result = new_op_asgn1(val[0], val[2], val[4], val[5])
                    
    result
end

def _reduce_195(val, _values, result)
                      raise ".JS[...] #{val[4]} is not supported"
                    
    result
end

def _reduce_196(val, _values, result)
                      result = s(:op_asgn2, val[0], op_to_setter(val[2]), value(val[3]).to_sym, val[4])
                    
    result
end

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

def _reduce_202(val, _values, result)
                      result = new_irange(val[0], val[1], val[2])
                    
    result
end

def _reduce_203(val, _values, result)
                      result = new_erange(val[0], val[1], val[2])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_206(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_207(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_208(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_call new_binary_call(new_int(val[1]), val[2], val[3]), [:"-@", []], []
                    
    result
end

def _reduce_211(val, _values, result)
                      result = new_call new_binary_call(new_float(val[1]), val[2], val[3]), [:"-@", []], []
                    
    result
end

def _reduce_212(val, _values, result)
                      result = new_call val[1], [:"+@", []], []
                      if [:int, :float].include? val[1].type
                        result = val[1]
                      end
                    
    result
end

def _reduce_213(val, _values, result)
                      result = new_call val[1], [:"-@", []], []
                      if val[1].type == :int
                        val[1][1] = -val[1][1]
                        result = val[1]
                      elsif val[1].type == :float
                        val[1][1] = -val[1][1].to_f
                        result = val[1]
                      end
                    
    result
end

def _reduce_214(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_unary_call(val[0], val[1])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = new_unary_call(val[0], val[1])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_230(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = new_and(val[0], val[1], val[2])
                    
    result
end

def _reduce_232(val, _values, result)
                      result = new_or(val[0], val[1], val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_234(val, _values, result)
 lexer.cond_push 1 
    result
end

def _reduce_235(val, _values, result)
 lexer.cond_pop 
    result
end

def _reduce_236(val, _values, result)
                      result = new_if(val[1], val[0], val[3], val[6])
                    
    result
end

# reduce 237 omitted

# reduce 238 omitted

def _reduce_239(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_240(val, _values, result)
                      result = [val[0]]
                    
    result
end

def _reduce_241(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_242(val, _values, result)
                      val[0] << s(:hash, *val[2])
                      result = val[0]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = [s(:hash, *val[0])]
                    
    result
end

def _reduce_244(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_245(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 246 omitted

def _reduce_247(val, _values, result)
                      result = []
                    
    result
end

# reduce 248 omitted

def _reduce_249(val, _values, result)
                      result = []
                    
    result
end

# reduce 250 omitted

def _reduce_251(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_252(val, _values, result)
                      result = val[0]
                      result << new_hash(nil, val[2], nil)
                    
    result
end

def _reduce_253(val, _values, result)
                      result = [new_hash(nil, val[0], nil)]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = [val[0]]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = val[0]
                      add_block_pass val[0], val[1]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = [new_hash(nil, val[0], nil)]
                      add_block_pass result, val[1]
                    
    result
end

def _reduce_257(val, _values, result)
                      result = val[0]
                      result << new_hash(nil, val[2], nil)
                      result << val[3] if val[3]
                    
    result
end

def _reduce_258(val, _values, result)
                      result = []
                      add_block_pass result, val[0]
                    
    result
end

def _reduce_259(val, _values, result)
                      lexer.cmdarg_push 1
                    
    result
end

def _reduce_260(val, _values, result)
                      lexer.cmdarg_pop
                      result = val[1]
                    
    result
end

def _reduce_261(val, _values, result)
                      result = new_block_pass(val[0], val[1])
                    
    result
end

def _reduce_262(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_263(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_264(val, _values, result)
                      result = [val[0]]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = [new_splat(val[0], val[1])]
                    
    result
end

def _reduce_266(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_267(val, _values, result)
                      result  = val[0] << new_splat(val[2], val[3])
                    
    result
end

def _reduce_268(val, _values, result)
                      val[0] << val[2]
                      result = s(:array, *val[0])
                    
    result
end

def _reduce_269(val, _values, result)
                      val[0] << s(:splat, val[3])
                      result = s(:array, *val[0])
                    
    result
end

def _reduce_270(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

def _reduce_280(val, _values, result)
                      result = lexer.line
                    
    result
end

def _reduce_281(val, _values, result)
                      result = s(:begin, val[2])
                    
    result
end

def _reduce_282(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_283(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_284(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_285(val, _values, result)
                      result = new_nil(val[0])
                    
    result
end

def _reduce_286(val, _values, result)
                      result = new_paren(val[0], val[1], val[2])
                    
    result
end

def _reduce_287(val, _values, result)
                      result = new_colon2(val[0], val[1], val[2])
                    
    result
end

def _reduce_288(val, _values, result)
                      result = new_colon3(val[0], val[1])
                    
    result
end

def _reduce_289(val, _values, result)
                      result = new_call val[0], [:[], []], val[2]
                    
    result
end

def _reduce_290(val, _values, result)
                      result = new_js_call val[0], [:[], []], val[2]
                    
    result
end

def _reduce_291(val, _values, result)
                      result = new_array(val[0], val[1], val[2])
                    
    result
end

def _reduce_292(val, _values, result)
                      result = new_hash(val[0], val[1], val[2])
                    
    result
end

def _reduce_293(val, _values, result)
                      result = new_return(val[0])
                    
    result
end

def _reduce_294(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_295(val, _values, result)
                      result = s(:yield)
                    
    result
end

def _reduce_296(val, _values, result)
                      result = s(:yield)
                    
    result
end

def _reduce_297(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_298(val, _values, result)
                      result = new_unary_call(['!', []], val[2])
                    
    result
end

def _reduce_299(val, _values, result)
                      result = new_unary_call(['!', []], new_nil(val[0]))
                    
    result
end

def _reduce_300(val, _values, result)
                      result = new_call(nil, val[0], [])
                      result << val[1]
                    
    result
end

# reduce 301 omitted

def _reduce_302(val, _values, result)
                      result = new_method_call_with_block(val[0], val[1])
                    
    result
end

def _reduce_303(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_304(val, _values, result)
                      result = new_if(val[0], val[1], val[3], val[4])
                    
    result
end

def _reduce_305(val, _values, result)
                      result = new_if(val[0], val[1], val[4], val[3])
                    
    result
end

def _reduce_306(val, _values, result)
                      lexer.cond_push 1
                      result = lexer.line
                    
    result
end

def _reduce_307(val, _values, result)
                      lexer.cond_pop
                    
    result
end

def _reduce_308(val, _values, result)
                      result = s(:while, val[2], val[5])
                    
    result
end

def _reduce_309(val, _values, result)
                      lexer.cond_push 1
                      result = lexer.line
                    
    result
end

def _reduce_310(val, _values, result)
                      lexer.cond_pop
                    
    result
end

def _reduce_311(val, _values, result)
                      result = s(:until, val[2], val[5])
                    
    result
end

def _reduce_312(val, _values, result)
                      result = s(:case, val[1], *val[3])
                    
    result
end

def _reduce_313(val, _values, result)
                      result = s(:case, nil, *val[2])
                    
    result
end

def _reduce_314(val, _values, result)
                      result = s(:case, nil, val[3])
                    
    result
end

def _reduce_315(val, _values, result)
                      lexer.cond_push 1
                      result = lexer.line
                    
    result
end

def _reduce_316(val, _values, result)
                      lexer.cond_pop
                    
    result
end

def _reduce_317(val, _values, result)
                      result = s(:for, val[4], val[1], val[7])
                    
    result
end

def _reduce_318(val, _values, result)
                      # ...
                    
    result
end

def _reduce_319(val, _values, result)
                      result = new_class val[0], val[1], val[2], val[4], val[5]
                    
    result
end

def _reduce_320(val, _values, result)
                      result = lexer.line
                    
    result
end

def _reduce_321(val, _values, result)
                      # ...
                    
    result
end

def _reduce_322(val, _values, result)
                      result = new_sclass(val[0], val[3], val[6], val[7])
                    
    result
end

def _reduce_323(val, _values, result)
                      result = lexer.line
                    
    result
end

def _reduce_324(val, _values, result)
                      # ...
                    
    result
end

def _reduce_325(val, _values, result)
                      result = new_module(val[0], val[2], val[4], val[5])
                    
    result
end

def _reduce_326(val, _values, result)
                      push_scope
                    
    result
end

def _reduce_327(val, _values, result)
                      result = new_def(val[0], nil, val[1], val[3], val[4], val[5])
                      pop_scope
                    
    result
end

def _reduce_328(val, _values, result)
                       lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_329(val, _values, result)
                      push_scope
                      lexer.lex_state = :expr_endfn
                    
    result
end

def _reduce_330(val, _values, result)
                      result = new_def(val[0], val[1], val[4], val[6], val[7], val[8])
                      pop_scope
                    
    result
end

def _reduce_331(val, _values, result)
                      result = new_break(val[0])
                    
    result
end

def _reduce_332(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_333(val, _values, result)
                      result = s(:redo)
                    
    result
end

# reduce 334 omitted

# reduce 335 omitted

# reduce 336 omitted

# reduce 337 omitted

# reduce 338 omitted

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

def _reduce_343(val, _values, result)
                      result = []
                    
    result
end

def _reduce_344(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_345(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_346(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_347(val, _values, result)
                      result = new_shadowarg(val[0])
                    
    result
end

# reduce 348 omitted

def _reduce_349(val, _values, result)
                      result = new_call nil, [:lambda, []], []
                      result << new_iter(val[0], val[1])
                    
    result
end

def _reduce_350(val, _values, result)
                      result = new_block_args(*val[1])
                    
    result
end

def _reduce_351(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_352(val, _values, result)
                      result = new_block_args(*val[0])
                    
    result
end

# reduce 353 omitted

def _reduce_354(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_355(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_356(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_357(val, _values, result)
                      result = new_if(val[0], val[1], val[3], val[4])
                    
    result
end

# reduce 358 omitted

def _reduce_359(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_360(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_361(val, _values, result)
                      val[0] << val[2]
                      result = val[0]
                    
    result
end

def _reduce_362(val, _values, result)
                      result = new_assign(new_assignable(new_ident(
                                  val[0])), val[1], val[2])
                    
    result
end

# reduce 363 omitted

def _reduce_364(val, _values, result)
                      result = new_block_args(nil, [val[1]])
                    
    result
end

def _reduce_365(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_366(val, _values, result)
                      val[1] << val[2]
                      result = new_block_args(*val[1])
                    
    result
end

def _reduce_367(val, _values, result)
                      result = [val[0], val[2], val[3]]
                    
    result
end

def _reduce_368(val, _values, result)
                      result = [val[0], nil, val[1]]
                    
    result
end

def _reduce_369(val, _values, result)
                      result = [nil, val[0], val[1]]
                    
    result
end

def _reduce_370(val, _values, result)
                      result = [nil, nil, val[0]]
                    
    result
end

def _reduce_371(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_372(val, _values, result)
                      nil
                    
    result
end

def _reduce_373(val, _values, result)
                      optarg = new_optarg(val[2])
                      restarg = new_restarg(val[4])
                      result = [val[0] + optarg + restarg, val[5]]
                    
    result
end

def _reduce_374(val, _values, result)
                      optarg = new_optarg(val[2])
                      restarg = new_restarg(val[4])
                      result = [val[0] + optarg + restarg + val[6], val[7]]
                    
    result
end

def _reduce_375(val, _values, result)
                      optarg = new_optarg(val[2])
                      result = [val[0] + optarg, val[3]]
                    
    result
end

def _reduce_376(val, _values, result)
                      optarg = new_optarg(val[2])
                      result = [val[0] + optarg + val[4], val[5]]
                    
    result
end

def _reduce_377(val, _values, result)
                      restarg = new_restarg(val[2])
                      result = [val[0] + restarg, val[3]]
                    
    result
end

def _reduce_378(val, _values, result)
                      val[0] << nil
                      result = [val[0], nil]
                    
    result
end

def _reduce_379(val, _values, result)
                      restarg = new_restarg(val[2])
                      result = [val[0] + restarg + val[4], val[5]]
                    
    result
end

def _reduce_380(val, _values, result)
                      result = [val[0], val[1]]
                    
    result
end

def _reduce_381(val, _values, result)
                      optarg = new_optarg(val[0])
                      restarg = new_restarg(val[2])
                      result = [optarg + restarg, val[3]]
                    
    result
end

def _reduce_382(val, _values, result)
                      optarg = new_optarg(val[0])
                      restarg = new_restarg(val[2])
                      result = [optarg + restarg + val[4], val[5]]
                    
    result
end

def _reduce_383(val, _values, result)
                      optarg= new_optarg(val[0])
                      result = [optarg, val[1]]
                    
    result
end

def _reduce_384(val, _values, result)
                      optarg = new_optarg(val[0])
                      result = [optarg + val[2], val[3]]
                    
    result
end

def _reduce_385(val, _values, result)
                      restarg = new_restarg(val[0])
                      result = [restarg, val[1]]
                    
    result
end

def _reduce_386(val, _values, result)
                      restarg = new_restarg(val[0])
                      result = [restarg + val[2], val[3]]
                    
    result
end

def _reduce_387(val, _values, result)
                      result = [nil, val[0]]
                    
    result
end

def _reduce_388(val, _values, result)
                      push_scope :block
                      result = lexer.line
                    
    result
end

def _reduce_389(val, _values, result)
                      result = new_iter val[2], val[3]
                      pop_scope
                    
    result
end

def _reduce_390(val, _values, result)
                      val[0] << val[1]
                      result = val[0]
                    
    result
end

# reduce 391 omitted

# reduce 392 omitted

# reduce 393 omitted

def _reduce_394(val, _values, result)
                      result = new_call(nil, val[0], val[1])
                    
    result
end

def _reduce_395(val, _values, result)
                      result = new_call(val[0], val[2], val[3])
                    
    result
end

def _reduce_396(val, _values, result)
                      result = new_js_call(val[0], val[2], val[3])
                    
    result
end

def _reduce_397(val, _values, result)
                      result = new_call(val[0], [:call, []], val[2])
                    
    result
end

def _reduce_398(val, _values, result)
                      result = new_call(val[0], val[2], val[3])
                    
    result
end

def _reduce_399(val, _values, result)
                      result = new_call(val[0], val[2])
                    
    result
end

def _reduce_400(val, _values, result)
                      result = new_super(val[0], val[1])
                    
    result
end

def _reduce_401(val, _values, result)
                      result = new_super(val[0], nil)
                    
    result
end

def _reduce_402(val, _values, result)
                      push_scope :block
                      result = lexer.line
                    
    result
end

def _reduce_403(val, _values, result)
                      result = new_iter val[2], val[3]
                      pop_scope
                    
    result
end

def _reduce_404(val, _values, result)
                      push_scope :block
                      result = lexer.line
                    
    result
end

def _reduce_405(val, _values, result)
                      result = new_iter val[2], val[3]
                      pop_scope
                    
    result
end

def _reduce_406(val, _values, result)
                      result = lexer.line
                    
    result
end

def _reduce_407(val, _values, result)
                      part = s(:when, s(:array, *val[2]), val[4])
                      result = [part]
                      result.push(*val[5]) if val[5]
                    
    result
end

def _reduce_408(val, _values, result)
                      result = [val[0]]
                    
    result
end

# reduce 409 omitted

def _reduce_410(val, _values, result)
                      exc = val[1] || s(:array)
                      exc << new_assign(val[2], val[2], s(:gvar, '$!'.intern)) if val[2]
                      result = [s(:resbody, exc, val[4])]
                      result.concat val[5] if val[5]
                    
    result
end

def _reduce_411(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_412(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 413 omitted

# reduce 414 omitted

def _reduce_415(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_416(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_417(val, _values, result)
                      result = val[1].nil? ? s(:nil) : val[1]
                    
    result
end

# reduce 418 omitted

# reduce 419 omitted

# reduce 420 omitted

# reduce 421 omitted

def _reduce_422(val, _values, result)
                      result = new_str val[0]
                    
    result
end

# reduce 423 omitted

def _reduce_424(val, _values, result)
                    result = str_append val[0], val[1]
                  
    result
end

def _reduce_425(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_426(val, _values, result)
                      result = s(:str, value(val[0]))
                    
    result
end

def _reduce_427(val, _values, result)
                      result = new_xstr(val[0], val[1], val[2])
                    
    result
end

def _reduce_428(val, _values, result)
                      result = new_regexp val[1], val[2]
                    
    result
end

def _reduce_429(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_430(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_431(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_432(val, _values, result)
                      part = val[1]
                      part = s(:dstr, "", val[1]) if part.type == :evstr
                      result = val[0] << part
                    
    result
end

def _reduce_433(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_434(val, _values, result)
                      result = val[0].concat([val[1]])
                    
    result
end

def _reduce_435(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_436(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_437(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_438(val, _values, result)
                      result = val[0] << s(:str, value(val[1]))
                    
    result
end

def _reduce_439(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_440(val, _values, result)
                      result = str_append val[0], val[1]
                    
    result
end

def _reduce_441(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_442(val, _values, result)
                      result = str_append val[0], val[1]
                    
    result
end

def _reduce_443(val, _values, result)
                      result = new_str_content(val[0])
                    
    result
end

def _reduce_444(val, _values, result)
                      result = lexer.strterm
                      lexer.strterm = nil
                    
    result
end

def _reduce_445(val, _values, result)
                      lexer.strterm = val[1]
                      result = new_evstr(val[2])
                    
    result
end

def _reduce_446(val, _values, result)
                      lexer.cond_push 0
                      lexer.cmdarg_push 0
                      result = lexer.strterm
                      lexer.strterm = nil
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_447(val, _values, result)
                      lexer.strterm = val[1]
                      lexer.cond_lexpop
                      lexer.cmdarg_lexpop
                      result = new_evstr(val[2])
                    
    result
end

def _reduce_448(val, _values, result)
                      result = new_gvar(val[0])
                    
    result
end

def _reduce_449(val, _values, result)
                      result = new_ivar(val[0])
                    
    result
end

def _reduce_450(val, _values, result)
                      result = new_cvar(val[0])
                    
    result
end

# reduce 451 omitted

def _reduce_452(val, _values, result)
                      result = new_sym(val[1])
                      lexer.lex_state = :expr_end
                    
    result
end

def _reduce_453(val, _values, result)
                      result = new_sym(val[0])
                    
    result
end

# reduce 454 omitted

# reduce 455 omitted

# reduce 456 omitted

# reduce 457 omitted

def _reduce_458(val, _values, result)
                      result = new_dsym val[1]
                    
    result
end

def _reduce_459(val, _values, result)
                      result = new_int(val[0])
                    
    result
end

def _reduce_460(val, _values, result)
                      result = new_float(val[0])
                    
    result
end

def _reduce_461(val, _values, result)
                    result = negate_num(new_int(val[1]))
                  
    result
end

def _reduce_462(val, _values, result)
                    result = negate_num(new_float(val[1]))
                  
    result
end

def _reduce_463(val, _values, result)
                    result = new_int(val[1])
                  
    result
end

def _reduce_464(val, _values, result)
                    result = new_float(val[1])
                  
    result
end

def _reduce_465(val, _values, result)
                      result = new_ident(val[0])
                    
    result
end

def _reduce_466(val, _values, result)
                      result = new_ivar(val[0])
                    
    result
end

def _reduce_467(val, _values, result)
                      result = new_gvar(val[0])
                    
    result
end

def _reduce_468(val, _values, result)
                      result = new_const(val[0])
                    
    result
end

def _reduce_469(val, _values, result)
                      result = new_cvar(val[0])
                    
    result
end

def _reduce_470(val, _values, result)
                      result = new_nil(val[0])
                    
    result
end

def _reduce_471(val, _values, result)
                      result = new_self(val[0])
                    
    result
end

def _reduce_472(val, _values, result)
                      result = new_true(val[0])
                    
    result
end

def _reduce_473(val, _values, result)
                      result = new_false(val[0])
                    
    result
end

def _reduce_474(val, _values, result)
                      result = new___FILE__(val[0])
                    
    result
end

def _reduce_475(val, _values, result)
                      result = new___LINE__(val[0])
                    
    result
end

def _reduce_476(val, _values, result)
                      result = new_var_ref(val[0])
                    
    result
end

def _reduce_477(val, _values, result)
                      result = new_assignable val[0]
                    
    result
end

def _reduce_478(val, _values, result)
                      result = s(:nth_ref, value(val[0]))
                    
    result
end

# reduce 479 omitted

def _reduce_480(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_481(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_482(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_483(val, _values, result)
                      result = val[1]
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_484(val, _values, result)
                      result = val[0]
                      lexer.lex_state = :expr_beg
                    
    result
end

# reduce 485 omitted

# reduce 486 omitted

def _reduce_487(val, _values, result)
                      result = new_kwrestarg(val[1])
                    
    result
end

def _reduce_488(val, _values, result)
                      result = new_kwrestarg()
                    
    result
end

def _reduce_489(val, _values, result)
                      result = new_sym(val[0])
                    
    result
end

def _reduce_490(val, _values, result)
                      result = new_kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_491(val, _values, result)
                      result = new_kwarg(val[0])
                    
    result
end

def _reduce_492(val, _values, result)
                      result = new_kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_493(val, _values, result)
                      result = new_kwarg(val[0])
                    
    result
end

def _reduce_494(val, _values, result)
                      result = [val[0]]
                    
    result
end

def _reduce_495(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_496(val, _values, result)
                      result = [val[0]]
                    
    result
end

def _reduce_497(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_498(val, _values, result)
                      result = new_args_tail(val[0], val[2], val[3])
                    
    result
end

def _reduce_499(val, _values, result)
                      result = new_args_tail(val[0], nil, val[1])
                    
    result
end

def _reduce_500(val, _values, result)
                      result = new_args_tail(nil, val[0], val[1])
                    
    result
end

def _reduce_501(val, _values, result)
                      result = new_args_tail(nil, nil, val[0])
                    
    result
end

def _reduce_502(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_503(val, _values, result)
                      result = new_args_tail(nil, nil, nil)
                    
    result
end

def _reduce_504(val, _values, result)
                      optarg = new_optarg(val[2])
                      restarg = new_restarg(val[4])
                      result = new_args(val[0] + optarg + restarg, val[5])
                    
    result
end

def _reduce_505(val, _values, result)
                      optarg = new_optarg(val[2])
                      restarg = new_restarg(val[4])
                      result = new_args(val[0] + optarg + restarg + val[6], val[7])
                    
    result
end

def _reduce_506(val, _values, result)
                      optarg = new_optarg(val[2])
                      result = new_args(val[0] + optarg, val[3])
                    
    result
end

def _reduce_507(val, _values, result)
                      optarg = new_optarg(val[2])
                      result = new_args(val[0] + optarg + val[4], val[5])
                    
    result
end

def _reduce_508(val, _values, result)
                      restarg = new_restarg(val[2])
                      result = new_args(val[0] + restarg, val[3])
                    
    result
end

def _reduce_509(val, _values, result)
                      restarg = new_restarg(val[2])
                      result = new_args(val[0] + restarg + val[4], val[5])
                    
    result
end

def _reduce_510(val, _values, result)
                      result = new_args(val[0], val[1])
                    
    result
end

def _reduce_511(val, _values, result)
                      optarg = new_optarg(val[0])
                      restarg = new_restarg(val[2])
                      result = new_args(optarg + restarg, val[3])
                    
    result
end

def _reduce_512(val, _values, result)
                      optarg = new_optarg(val[0])
                      restarg = new_restarg(val[2])
                      result = new_args(optarg + restarg + val[4], val[5])
                    
    result
end

def _reduce_513(val, _values, result)
                      optarg = new_optarg(val[0])
                      result = new_args(optarg, val[1])
                    
    result
end

def _reduce_514(val, _values, result)
                      optarg = new_optarg(val[0])
                      result = new_args(optarg + val[2], val[3])
                    
    result
end

def _reduce_515(val, _values, result)
                      optarg = new_restarg(val[0])
                      result = new_args(optarg, val[1])
                    
    result
end

def _reduce_516(val, _values, result)
                      restarg = new_restarg(val[0])
                      result = new_args(restarg + val[2], val[3])
                    
    result
end

def _reduce_517(val, _values, result)
                      result = new_args(nil, val[0])
                    
    result
end

def _reduce_518(val, _values, result)
                      result = new_args(nil, nil)
                    
    result
end

# reduce 519 omitted

def _reduce_520(val, _values, result)
                      result = value(val[0]).to_sym
                      scope.add_local result
                    
    result
end

def _reduce_521(val, _values, result)
                      raise 'formal argument cannot be a constant'
                    
    result
end

def _reduce_522(val, _values, result)
                      raise 'formal argument cannot be an instance variable'
                    
    result
end

def _reduce_523(val, _values, result)
                      raise 'formal argument cannot be a class variable'
                    
    result
end

def _reduce_524(val, _values, result)
                      raise 'formal argument cannot be a global variable'
                    
    result
end

def _reduce_525(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_526(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 527 omitted

# reduce 528 omitted

def _reduce_529(val, _values, result)
                      result = s(:arg, val[0])
                    
    result
end

def _reduce_530(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_531(val, _values, result)
                      result = s(:mlhs, val[0])
                    
    result
end

def _reduce_532(val, _values, result)
                      val[0] << val[2]
                      result = val[0]
                    
    result
end

# reduce 533 omitted

def _reduce_534(val, _values, result)
                      result = val[0].push(s(:restarg, val[3]))
                    
    result
end

def _reduce_535(val, _values, result)
                      result = val[0].push(s(:restarg, val[3])).concat(val[5][1..-1])
                    
    result
end

def _reduce_536(val, _values, result)
                      result = val[0].push(s(:restarg))
                    
    result
end

def _reduce_537(val, _values, result)
                      result = val[0].push(s(:restarg)).concat(val[4][1..-1])
                    
    result
end

def _reduce_538(val, _values, result)
                      result = s(:mlhs, s(:restarg, val[1]))
                    
    result
end

def _reduce_539(val, _values, result)
                      val[3].insert(1, s(:restarg, val[1]))
                      result = val[3]
                    
    result
end

def _reduce_540(val, _values, result)
                      result = s(:mlhs, s(:restarg))
                    
    result
end

def _reduce_541(val, _values, result)
                      val[2].insert(1, s(:restarg))
                      result = val[2]
                    
    result
end

def _reduce_542(val, _values, result)
                      result = [val[0]]
                    
    result
end

def _reduce_543(val, _values, result)
                      val[0] << val[2]
                      result = val[0]
                    
    result
end

def _reduce_544(val, _values, result)
                      result = new_assign(new_assignable(new_ident(val[0])), val[1], val[2])
                    
    result
end

def _reduce_545(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_546(val, _values, result)
                      result = val[0]
                      val[0] << val[2]
                    
    result
end

# reduce 547 omitted

# reduce 548 omitted

def _reduce_549(val, _values, result)
                      result = "*#{value(val[1])}".to_sym
                    
    result
end

def _reduce_550(val, _values, result)
                      result = :"*"
                    
    result
end

# reduce 551 omitted

# reduce 552 omitted

def _reduce_553(val, _values, result)
                      result = "&#{value(val[1])}".to_sym
                    
    result
end

def _reduce_554(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_555(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_556(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_557(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_558(val, _values, result)
                      result = []
                    
    result
end

def _reduce_559(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_560(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_561(val, _values, result)
                      result = val[0].concat(val[2])
                    
    result
end

def _reduce_562(val, _values, result)
                      result = [val[0], val[2]]
                    
    result
end

def _reduce_563(val, _values, result)
                      result = [new_sym(val[0]), val[1]]
                    
    result
end

def _reduce_564(val, _values, result)
                      result = [s(:sym, source(val[1]).to_sym), val[3]]
                    
    result
end

def _reduce_565(val, _values, result)
                      result = [new_kwsplat(val[1])]
                    
    result
end

# reduce 566 omitted

# reduce 567 omitted

# reduce 568 omitted

# reduce 569 omitted

# reduce 570 omitted

# reduce 571 omitted

# reduce 572 omitted

# reduce 573 omitted

# reduce 574 omitted

# reduce 575 omitted

# reduce 576 omitted

# reduce 577 omitted

# reduce 578 omitted

# reduce 579 omitted

# reduce 580 omitted

# reduce 581 omitted

# reduce 582 omitted

# reduce 583 omitted

# reduce 584 omitted

# reduce 585 omitted

# reduce 586 omitted

# reduce 587 omitted

# reduce 588 omitted

def _reduce_589(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Opal
