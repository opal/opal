#!/usr/bin/env ruby

require 'optparse'

options = {}
parser = OptionParser.new do |opts|
  opts.banner = 'Usage: opal [options] -- [programfile]'

  opts.on('-v', '--version', 'Display Opal Version') do |v|
    require 'opal/version'
    puts "Opal v#{Opal::VERSION}"
    exit
  end

  opts.on("-h", "--help", "Show this message") do
    puts opts
    exit
  end

  opts.separator ''
  opts.separator 'Basic Options:'

  opts.on('-I', '--include DIR',
          'Append a load path (may be used more than once)') do |i|
    options[:load_paths] ||= []
    options[:load_paths] << i
  end

  opts.on('-e', '--eval SOURCE', String,
          'One line of script. Several -e\'s allowed. Omit [programfile]') do |source|
    options[:evals] ||= []
    options[:evals] << source
  end

  opts.on('-s', '--sexp', 'Show Sexps') do
    options[:sexp] = true
  end

  opts.on('-c', '--compile', 'Compile to JavaScript') do
    options[:compile] = true
  end

  opts.on('-s', '--server [PORT]', 'Start a server (default port: 3000)') do |port|
    options[:server] = port.to_i
  end


  opts.separator ''
  opts.separator 'Compilation Options:'

  opts.on('-M', '--no-method-missing', 'Disable method missing') do |value|
    options[:method_missing_enabled] = false
  end

  opts.on('-O', '--no-optimized-operators', 'Disable optimized operators') do |value|
    options[:optimized_operators_enabled] = false
  end

  opts.on('-A', '--arity-check', 'Enable arity check') do |value|
    options[:arity_check] = true
  end

  opts.on('-C', '--no-const-missing', 'Disable const missing') do |value|
    options[:const_missing_enabled] = false
  end

  dynamic_require_levels = %w[error warning ignore]
  opts.on('-D', '--dynamic-require LEVEL', dynamic_require_levels,
                'Set levelDynamic require severity') do |level|
    options[:dynamic_require_severity] = level
  end

  opts.on('-P', '--no-source-map', 'Disable source map') do |value|
    options[:source_map_enabled] = false
  end

  opts.on("--irb", "IRB var mode") do |i|
    options[:irb_enabled] = true
  end

end

parser.parse!


module Opal
  class CLI
    attr_reader :options, :filename

    def initialize _filename, options
      @options = options
      @filename = _filename

      require 'opal'

      processor_options.each do |option|
        key = option.to_sym
        next unless options.has_key? key
        Opal::Processor.send("#{option}=", options[key])
      end



      if options[:evals] and options[:evals].any?
        require 'tempfile'
        path = File.join(Dir.tmpdir,"opal-#{$$}.js.rb")
        File.open(path, 'w') do |tempfile|
          options[:load_paths] ||= []
          options[:load_paths] << File.dirname(path)

          options[:evals].each do |code|
            tempfile.puts 'require "opal"'
            tempfile.puts code
          end
        end
        @filename = File.basename(path)
      end



      case
      when options[:sexp]
        puts sexp.inspect
      when options[:compile]
        puts sprockets[filename].to_a.last
      when options[:server]
        server_start
      else
        run
      end
    end

    def run
      begin
        full_source = sprockets[filename]
        IO.popen('node', 'w') do |stdin|
          stdin.write full_source
        end
      rescue Errno::ENOENT
        $stderr.puts 'Please install Node.js to be able to run Opal scripts.'
        exit 127
      end
    end

    def sexp
      Opal::Grammar.new.parse(source)
    end

    def source
      File.read(filename)
    end

    def processor_options
      %w[
        method_missing_enabled
        optimized_operators_enabled
        arity_check_enabled
        const_missing_enabled
        dynamic_require_severity
        source_map_enabled
        irb_enabled
      ]
    end

    def sprockets
      server.sprockets
    end

    def server
      @server ||= Opal::Server.new do |s|
        (options[:load_paths] || []).each do |path|
          s.append_path path
        end
        s.main = File.basename(filename, '.rb')
      end
    end

    def server_start
      require 'rack'
      require 'webrick'
      require 'logger'

      Rack::Server.start(
        :app       => server,
        :Port      => options[:port] || 3000,
        :AccessLog => [],
        :Logger    => Logger.new($stdout)
      )
    end
  end
end


Opal::CLI.new ARGV.first, options
